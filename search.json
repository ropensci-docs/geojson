[{"path":"https://docs.ropensci.org/geojson/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/geojson/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/geojson/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/geojson.git Make sure track progress upstream (.e., version geojson ropensci/geojson) git remote add upstream https://github.com/ropensci/geojson.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Push account Submit pull request home base ropensci/geojson","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/geojson/articles/geojson-operations.html","id":"inspect-the-object","dir":"Articles","previous_headings":"","what":"inspect the object","title":"geojson operations","text":"Get string Get type Pretty print geojson Write disk","code":"y[[1]] #> [1] \"{\\n \\\"type\\\": \\\"GeometryCollection\\\",\\n \\\"geometries\\\": [\\n   {\\n     \\\"type\\\": \\\"Point\\\",\\n     \\\"coordinates\\\": [100.0, 0.0]\\n   },\\n   {\\n     \\\"type\\\": \\\"LineString\\\",\\n     \\\"coordinates\\\": [ [101.0, 0.0], [102.0, 1.0] ]\\n   }\\n  ]\\n}\" geo_type(y) #> [1] \"GeometryCollection\" geo_pretty(y) #> { #>     \"type\": \"GeometryCollection\", #>     \"geometries\": [ #>         { #>             \"type\": \"Point\", #>             \"coordinates\": [ #>                 100.0, #>                 0.0 #>             ] #>         }, #>         { #>             \"type\": \"LineString\", #>             \"coordinates\": [ #>                 [ #>                     101.0, #>                     0.0 #>                 ], #>                 [ #>                     102.0, #>                     1.0 #>                 ] #>             ] #>         } #>     ] #> } #> geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"GeometryCollection\" #>  #> $geometries #> $geometries[[1]] #> $geometries[[1]]$type #> [1] \"Point\" #>  #> $geometries[[1]]$coordinates #> $geometries[[1]]$coordinates[[1]] #> [1] 100 #>  #> $geometries[[1]]$coordinates[[2]] #> [1] 0 #>  #>  #>  #> $geometries[[2]] #> $geometries[[2]]$type #> [1] \"LineString\" #>  #> $geometries[[2]]$coordinates #> $geometries[[2]]$coordinates[[1]] #> $geometries[[2]]$coordinates[[1]][[1]] #> [1] 101 #>  #> $geometries[[2]]$coordinates[[1]][[2]] #> [1] 0 #>  #>  #> $geometries[[2]]$coordinates[[2]] #> $geometries[[2]]$coordinates[[2]][[1]] #> [1] 102 #>  #> $geometries[[2]]$coordinates[[2]][[2]] #> [1] 1"},{"path":"https://docs.ropensci.org/geojson/articles/geojson-operations.html","id":"properties","dir":"Articles","previous_headings":"","what":"properties","title":"geojson operations","text":"Add properties Get property","code":"x <- '{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]}' res <- linestring(x) %>% feature() %>% properties_add(population = 1000) res #> <Feature>  #>   type:  LineString  #>   coordinates:  [[100,0],[101,1]] properties_get(res, property = 'population') #> 1000"},{"path":"https://docs.ropensci.org/geojson/articles/geojson-operations.html","id":"crs","dir":"Articles","previous_headings":"","what":"crs","title":"geojson operations","text":"Add crs Get crs","code":"crs <- '{   \"type\": \"name\",   \"properties\": {      \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"   } }' z <- x %>% feature() %>% crs_add(crs) z #> { #>     \"type\": \"Feature\", #>     \"properties\": { #>  #>     }, #>     \"geometry\": { #>         \"type\": \"LineString\", #>         \"coordinates\": [ #>             [ #>                 100, #>                 0 #>             ], #>             [ #>                 101, #>                 1 #>             ] #>         ] #>     }, #>     \"crs\": { #>         \"type\": \"name\", #>         \"properties\": { #>             \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" #>         } #>     } #> } crs_get(z) #> $type #> [1] \"name\" #>  #> $properties #> $properties$name #> [1] \"urn:ogc:def:crs:OGC:1.3:CRS84\""},{"path":"https://docs.ropensci.org/geojson/articles/geojson-operations.html","id":"bbox","dir":"Articles","previous_headings":"","what":"bbox","title":"geojson operations","text":"Add bbox - default, don’t pass bbox bbox_add() attempt calculate bbox . can also pass bbox. Get bbox","code":"tt <- x %>% feature() %>% bbox_add() tt #> { #>     \"type\": \"Feature\", #>     \"properties\": { #>  #>     }, #>     \"geometry\": { #>         \"type\": \"LineString\", #>         \"coordinates\": [ #>             [ #>                 100, #>                 0 #>             ], #>             [ #>                 101, #>                 1 #>             ] #>         ] #>     }, #>     \"bbox\": [ #>         100, #>         0, #>         101, #>         1 #>     ] #> } bbox_get(tt) #> [1] 100   0 101   1"},{"path":"https://docs.ropensci.org/geojson/articles/geojson-operations.html","id":"geojson-in-data-frames","dir":"Articles","previous_headings":"","what":"geojson in data.frame’s","title":"geojson operations","text":"’s really easy put geojson class objects data.frame’s well. ideal solution put tbl’s (see tibble package) Make point Put point tbl Another object, multilinestring Put tbl Put point multilinestring tbl can pull geojson back ","code":"x <- '{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }' (pt <- point(x)) #> <Point>  #>   coordinates:  [100,0] library(\"tibble\") data_frame(a = 1:5, b = list(pt)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <geopoint [1]> #> 2     2 <geopoint [1]> #> 3     3 <geopoint [1]> #> 4     4 <geopoint [1]> #> 5     5 <geopoint [1]> x <- '{ \"type\": \"MultiLineString\",   \"coordinates\": [ [ [100.0, 0.0], [101.0, 1.0] ], [ [102.0, 2.0], [103.0, 3.0] ] ] }' (mls <- multilinestring(x)) #> <MultiLineString>  #>   no. lines:  2  #>   no. nodes / line:  2, 2  #>   coordinates:  [[[100,0],[101,1]],[[102,2],[103,3]]] data_frame(a = 1:5, b = list(mls)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <gmltlnst [1]> #> 2     2 <gmltlnst [1]> #> 3     3 <gmltlnst [1]> #> 4     4 <gmltlnst [1]> #> 5     5 <gmltlnst [1]> (df <- data_frame(a = 1:5, b = list(pt), c = list(mls))) #> # A tibble: 5 × 3 #>       a b              c              #>   <int> <list>         <list>         #> 1     1 <geopoint [1]> <gmltlnst [1]> #> 2     2 <geopoint [1]> <gmltlnst [1]> #> 3     3 <geopoint [1]> <gmltlnst [1]> #> 4     4 <geopoint [1]> <gmltlnst [1]> #> 5     5 <geopoint [1]> <gmltlnst [1]> df$b #> [[1]] #> <Point>  #>   coordinates:  [100,0]  #>  #> [[2]] #> <Point>  #>   coordinates:  [100,0]  #>  #> [[3]] #> <Point>  #>   coordinates:  [100,0]  #>  #> [[4]] #> <Point>  #>   coordinates:  [100,0]  #>  #> [[5]] #> <Point>  #>   coordinates:  [100,0] df$b[[1]] #> <Point>  #>   coordinates:  [100,0]"},{"path":"https://docs.ropensci.org/geojson/articles/geojson.html","id":"point","dir":"Articles","previous_headings":"","what":"point","title":"geojson package classes","text":"","code":"(x <- point('{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }')) #> <Point>  #>   coordinates:  [100,0] class(x) #> [1] \"geopoint\" \"geojson\" attributes(x) #> $class #> [1] \"geopoint\" \"geojson\"  #>  #> $coords #> [1] \"[100,0]\""},{"path":"https://docs.ropensci.org/geojson/articles/geojson.html","id":"multipoint","dir":"Articles","previous_headings":"","what":"multipoint","title":"geojson package classes","text":"","code":"multipoint('{\"type\": \"MultiPoint\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ] }') #> <MultiPoint>  #>   coordinates:  [[100,0],[101,1]]"},{"path":"https://docs.ropensci.org/geojson/articles/geojson.html","id":"linestring","dir":"Articles","previous_headings":"","what":"linestring","title":"geojson package classes","text":"","code":"linestring('{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ] }') #> <LineString>  #>   coordinates:  [[100,0],[101,1]]"},{"path":"https://docs.ropensci.org/geojson/articles/geojson.html","id":"multilinestring","dir":"Articles","previous_headings":"","what":"multilinestring","title":"geojson package classes","text":"","code":"str <- '{ \"type\": \"MultiLineString\",   \"coordinates\": [ [ [100.0, 0.0], [101.0, 1.0] ], [ [102.0, 2.0], [103.0, 3.0] ] ] }' multilinestring(str) #> <MultiLineString>  #>   no. lines:  2  #>   no. nodes / line:  2, 2  #>   coordinates:  [[[100,0],[101,1]],[[102,2],[103,3]]]"},{"path":"https://docs.ropensci.org/geojson/articles/geojson.html","id":"polygon","dir":"Articles","previous_headings":"","what":"polygon","title":"geojson package classes","text":"","code":"str <- '{ \"type\": \"Polygon\",  \"coordinates\": [    [ [100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0], [100.0, 0.0] ]    ] }' polygon(str) #> <Polygon>  #>   no. lines:  1  #>   no. holes:  0  #>   no. nodes / line:  5  #>   coordinates:  [[[100,0],[100,1],[101,1],[101,0],[100,0]]]"},{"path":"https://docs.ropensci.org/geojson/articles/geojson.html","id":"multipolygon","dir":"Articles","previous_headings":"","what":"multipolygon","title":"geojson package classes","text":"","code":"str <- '{ \"type\": \"MultiPolygon\",   \"coordinates\": [    [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],    [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],    [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]   ] }' multipolygon(str) #> <MultiPolygon>  #>   no. polygons:  2  #>   coordinates:  [[[[102,2],[103,2],[103,3],[102,3],[102,2]]],[[[100,0],[101,0],[101,1] ..."},{"path":"https://docs.ropensci.org/geojson/articles/geojson.html","id":"feature","dir":"Articles","previous_headings":"","what":"feature","title":"geojson package classes","text":"geopoint class character string","code":"pt <- point('{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }') feature(pt) #> <Feature>  #>   type:  Point  #>   coordinates:  [100,0] str <- \"{ \\\"type\\\": \\\"Feature\\\", \\\"properties\\\": {}, \\\"geometry\\\": { \\\"type\\\": \\\"Point\\\", \\\"coordinates\\\": [100.0, 0.0] } }\" feature(str) #> <Feature>  #>   type:  Point  #>   coordinates:  [100,0]"},{"path":"https://docs.ropensci.org/geojson/articles/geojson.html","id":"featurecollection","dir":"Articles","previous_headings":"","what":"featurecollection","title":"geojson package classes","text":"feature string","code":"pt %>% feature() %>% featurecollection() #> <FeatureCollection>  #>   type:  FeatureCollection  #>   no. features:  1  #>   features (1st 5):  Point file <- system.file(\"examples\", 'featurecollection1.geojson', package = \"geojson\") str <- paste0(readLines(file), collapse = \" \") featurecollection(str) #> <FeatureCollection>  #>   type:  FeatureCollection  #>   no. features:  1  #>   features (1st 5):  GeometryCollection"},{"path":"https://docs.ropensci.org/geojson/articles/geojson.html","id":"geometrycollection","dir":"Articles","previous_headings":"","what":"geometrycollection","title":"geojson package classes","text":"","code":"str <- '{  \"type\": \"GeometryCollection\",  \"geometries\": [    {      \"type\": \"Point\",      \"coordinates\": [100.0, 0.0]    },    {      \"type\": \"LineString\",      \"coordinates\": [ [101.0, 0.0], [102.0, 1.0] ]    }   ] }' geometrycollection(str) #> <GeometryCollection>  #>   geometries (n): 2  #>   geometries (geometry / length): #>     Point / 2 #>     LineString / 2"},{"path":"https://docs.ropensci.org/geojson/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author. Jeroen Ooms. Author. Michael Sumner. Maintainer.","code":""},{"path":"https://docs.ropensci.org/geojson/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S, Ooms J (2024). geojson: Classes 'GeoJSON'. R package version 0.3.5.9000, https://github.com/ropensci/geojson, https://docs.ropensci.org/geojson/.","code":"@Manual{,   title = {geojson: Classes for 'GeoJSON'},   author = {Scott Chamberlain and Jeroen Ooms},   year = {2024},   note = {R package version 0.3.5.9000, https://github.com/ropensci/geojson},   url = {https://docs.ropensci.org/geojson/}, }"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"geojson","dir":"","previous_headings":"","what":"Classes for GeoJSON","title":"Classes for GeoJSON","text":"geojson aims deal geojson data lightweight way. ’ve defined classes (S3) following GeoJSON spec. classes sort overlap sp’s classes, really. ’s also overlap GeoJSON classes Well-Known Text (WKT) classes, GeoJSON subset WKT’s classes. package geoops supports manipulations classes defined package. package used within geojsonio make tasks easier.","code":""},{"path":"https://docs.ropensci.org/geojson/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Classes for GeoJSON","text":"Stable CRAN version Dev version","code":"install.packages(\"geojson\") remotes::install_github(\"ropensci/geojson\") library(\"geojson\")"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"geojson-class","dir":"","previous_headings":"","what":"geojson class","title":"Classes for GeoJSON","text":"Essentially character string S3 class geojson attached make easy perform operations ","code":"x <- \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-99.74,32.45]},\\\"properties\\\":{}}]}\" as.geojson(x) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 1  #>   features (geometry / length) [first 5]: #>     Point / 2"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"geometrycollection","dir":"","previous_headings":"","what":"geometrycollection","title":"Classes for GeoJSON","text":"","code":"x <- '{  \"type\": \"GeometryCollection\",  \"geometries\": [    {      \"type\": \"Point\",      \"coordinates\": [100.0, 0.0]    },    {      \"type\": \"LineString\",      \"coordinates\": [ [101.0, 0.0], [102.0, 1.0] ]    }   ] }' (y <- geometrycollection(x)) #> <GeometryCollection>  #>   geometries (n): 2  #>   geometries (geometry / length): #>     Point / 2 #>     LineString / 2"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"inspect-the-object","dir":"","previous_headings":"geometrycollection","what":"inspect the object","title":"Classes for GeoJSON","text":"get string get type pretty print geojson write disk","code":"y[[1]] #> [1] \"{\\n \\\"type\\\": \\\"GeometryCollection\\\",\\n \\\"geometries\\\": [\\n   {\\n     \\\"type\\\": \\\"Point\\\",\\n     \\\"coordinates\\\": [100.0, 0.0]\\n   },\\n   {\\n     \\\"type\\\": \\\"LineString\\\",\\n     \\\"coordinates\\\": [ [101.0, 0.0], [102.0, 1.0] ]\\n   }\\n  ]\\n}\" geo_type(y) #> [1] \"GeometryCollection\" geo_pretty(y) #> { #>     \"type\": \"GeometryCollection\", #>     \"geometries\": [ #>         { #>             \"type\": \"Point\", #>             \"coordinates\": [ #>                 100.0, #>                 0.0 #>             ] #>         }, #>         { #>             \"type\": \"LineString\", #>             \"coordinates\": [ #>                 [ #>                     101.0, #>                     0.0 #>                 ], #>                 [ #>                     102.0, #>                     1.0 #>                 ] #>             ] #>         } #>     ] #> } #> geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"GeometryCollection\" #>  #> $geometries #> $geometries[[1]] #> $geometries[[1]]$type #> [1] \"Point\" #>  #> $geometries[[1]]$coordinates #> $geometries[[1]]$coordinates[[1]] #> [1] 100 #>  #> $geometries[[1]]$coordinates[[2]] #> [1] 0 #>  #>  #>  #> $geometries[[2]] #> $geometries[[2]]$type #> [1] \"LineString\" #>  #> $geometries[[2]]$coordinates #> $geometries[[2]]$coordinates[[1]] #> $geometries[[2]]$coordinates[[1]][[1]] #> [1] 101 #>  #> $geometries[[2]]$coordinates[[1]][[2]] #> [1] 0 #>  #>  #> $geometries[[2]]$coordinates[[2]] #> $geometries[[2]]$coordinates[[2]][[1]] #> [1] 102 #>  #> $geometries[[2]]$coordinates[[2]][[2]] #> [1] 1"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"properties","dir":"","previous_headings":"","what":"properties","title":"Classes for GeoJSON","text":"Add properties Get property","code":"x <- '{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]}' res <- linestring(x) %>% feature() %>% properties_add(population = 1000) res #> <Feature>  #>   type:  LineString  #>   coordinates:  [[100,0],[101,1]] properties_get(res, property = 'population') #> 1000"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"crs","dir":"","previous_headings":"","what":"crs","title":"Classes for GeoJSON","text":"Add crs Get crs","code":"crs <- '{   \"type\": \"name\",   \"properties\": {      \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\"   } }' z <- x %>% feature() %>% crs_add(crs) z #> { #>     \"type\": \"Feature\", #>     \"properties\": { #>  #>     }, #>     \"geometry\": { #>         \"type\": \"LineString\", #>         \"coordinates\": [ #>             [ #>                 100, #>                 0 #>             ], #>             [ #>                 101, #>                 1 #>             ] #>         ] #>     }, #>     \"crs\": { #>         \"type\": \"name\", #>         \"properties\": { #>             \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" #>         } #>     } #> } crs_get(z) #> $type #> [1] \"name\" #>  #> $properties #> $properties$name #> [1] \"urn:ogc:def:crs:OGC:1.3:CRS84\""},{"path":"https://docs.ropensci.org/geojson/index.html","id":"bbox","dir":"","previous_headings":"","what":"bbox","title":"Classes for GeoJSON","text":"Add bbox Get bbox","code":"tt <- x %>% feature() %>% bbox_add() tt #> { #>     \"type\": \"Feature\", #>     \"properties\": { #>  #>     }, #>     \"geometry\": { #>         \"type\": \"LineString\", #>         \"coordinates\": [ #>             [ #>                 100, #>                 0 #>             ], #>             [ #>                 101, #>                 1 #>             ] #>         ] #>     }, #>     \"bbox\": [ #>         100, #>         0, #>         101, #>         1 #>     ] #> } bbox_get(tt) #> [1] 100   0 101   1"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"geojson-in-dataframes","dir":"","previous_headings":"","what":"geojson in data.frame’s","title":"Classes for GeoJSON","text":"","code":"x <- '{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }' (pt <- point(x)) #> <Point>  #>   coordinates:  [100,0] library(\"tibble\") tibble(a = 1:5, b = list(pt)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <geopoint [1]> #> 2     2 <geopoint [1]> #> 3     3 <geopoint [1]> #> 4     4 <geopoint [1]> #> 5     5 <geopoint [1]> x <- '{ \"type\": \"MultiLineString\",   \"coordinates\": [ [ [100.0, 0.0], [101.0, 1.0] ], [ [102.0, 2.0], [103.0, 3.0] ] ] }' (mls <- multilinestring(x)) #> <MultiLineString>  #>   no. lines:  2  #>   no. nodes / line:  2, 2  #>   coordinates:  [[[100,0],[101,1]],[[102,2],[103,3]]] tibble(a = 1:5, b = list(mls)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <gmltlnst [1]> #> 2     2 <gmltlnst [1]> #> 3     3 <gmltlnst [1]> #> 4     4 <gmltlnst [1]> #> 5     5 <gmltlnst [1]> tibble(a = 1:5, b = list(pt), c = list(mls)) #> # A tibble: 5 × 3 #>       a b              c              #>   <int> <list>         <list>         #> 1     1 <geopoint [1]> <gmltlnst [1]> #> 2     2 <geopoint [1]> <gmltlnst [1]> #> 3     3 <geopoint [1]> <gmltlnst [1]> #> 4     4 <geopoint [1]> <gmltlnst [1]> #> 5     5 <geopoint [1]> <gmltlnst [1]>"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"geobuf","dir":"","previous_headings":"","what":"geobuf","title":"Classes for GeoJSON","text":"Geobuf compact binary encoding geographic data using protocol buffers https://github.com/mapbox/geobuf (via protolite) package.","code":"file <- system.file(\"examples/test.pb\", package = \"geojson\") (json <- from_geobuf(file)) #> {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102,0.5]},\"id\":999,\"properties\":{\"prop0\":\"value0\",\"double\":0.0123,\"negative_int\":-100,\"positive_int\":100,\"negative_double\":-1.2345e+16,\"positive_double\":1.2345e+16,\"null\":null,\"array\":[1,2,3.1],\"object\":{\"foo\":[5,6,7]}},\"blabla\":{\"foo\":[1,1,1]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102,0],[103,-1.1],[104,-3],[105,1]]},\"id\":123,\"properties\":{\"custom1\":\"test\",\"prop0\":\"value0\",\"prop1\":0}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[99,10],[101,0],[100,1],[99,10]]]},\"id\":\"test-id\",\"properties\":{\"prop0\":\"value0\",\"prop1\":{\"this\":\"that\"}},\"custom1\":\"jeroen\"},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102,2],[103,2],[103,3],[102,2]]],[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[100.2,0.2],[100.2,0.8],[100.2,0.2]]]]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100,0]},{\"type\":\"LineString\",\"coordinates\":[[101,0],[102,1]]},{\"type\":\"MultiPoint\",\"coordinates\":[[100,0],[101,1]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100,0],[101,1]],[[102,2],[103,3]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102,2],[103,2],[103,3],[102,3],[102,2]]],[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[100.2,0.2],[100.8,0.2],[100.8,0.8],[100.2,0.8],[100.2,0.2]]]]}]}}]} pb <- to_geobuf(json) class(pb) #> [1] \"raw\" f <- tempfile(fileext = \".pb\") to_geobuf(json, f) from_geobuf(f) #> {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102,0.5]},\"id\":999,\"properties\":{\"prop0\":\"value0\",\"double\":0.0123,\"negative_int\":-100,\"positive_int\":100,\"negative_double\":-1.2345e+16,\"positive_double\":1.2345e+16,\"null\":null,\"array\":[1,2,3.1],\"object\":{\"foo\":[5,6,7]}},\"blabla\":{\"foo\":[1,1,1]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102,0],[103,-1.1],[104,-3],[105,1]]},\"id\":123,\"properties\":{\"custom1\":\"test\",\"prop0\":\"value0\",\"prop1\":0}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[99,10],[101,0],[100,1],[99,10]]]},\"id\":\"test-id\",\"properties\":{\"prop0\":\"value0\",\"prop1\":{\"this\":\"that\"}},\"custom1\":\"jeroen\"},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102,2],[103,2],[103,3],[102,2]]],[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[100.2,0.2],[100.2,0.8],[100.2,0.2]]]]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100,0]},{\"type\":\"LineString\",\"coordinates\":[[101,0],[102,1]]},{\"type\":\"MultiPoint\",\"coordinates\":[[100,0],[101,1]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100,0],[101,1]],[[102,2],[103,3]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102,2],[103,2],[103,3],[102,3],[102,2]]],[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[100.2,0.2],[100.8,0.2],[100.8,0.8],[100.2,0.8],[100.2,0.2]]]]}]}}]}  x <- '{ \"type\": \"Polygon\", \"coordinates\": [   [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]   ] }' y <- polygon(x) to_geobuf(y) #>  [1] 10 02 18 06 2a 1a 0a 18 08 04 12 01 04 1a 11 80 84 af 5f 00 80 89 7a 00 00 #> [26] 80 89 7a ff 88 7a 00  x <- '{\"type\": \"MultiPoint\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ] }' y <- multipoint(x) to_geobuf(y) #>  [1] 10 02 18 06 2a 11 0a 0f 08 01 1a 0b 80 84 af 5f 00 80 89 7a 80 89 7a"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"newline-delimited-geojson","dir":"","previous_headings":"","what":"newline-delimited GeoJSON","title":"Classes for GeoJSON","text":"read nd-GeoJSON Write nd-GeoJSON One think take output ndego_read() pass ndgeo_write(). However, example, json big jqr handle, underlying parser tool. ’s smaller example:","code":"url <- \"https://raw.githubusercontent.com/ropensci/geojson/main/inst/examples/ndgeojson1.json\" f <- tempfile(fileext = \".geojsonl\") download.file(url, f) x <- ndgeo_read(f, verbose = FALSE) x #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 3  #>   features (geometry / length) [first 5]: #>     Point / 2 #>     Point / 2 #>     Point / 2 file <- system.file(\"examples\", \"featurecollection2.geojson\",   package = \"geojson\") str <- paste0(readLines(file), collapse = \" \") (x <- featurecollection(str)) #> <FeatureCollection>  #>   type:  FeatureCollection  #>   no. features:  3  #>   features (1st 5):  Point, Point, Point outfile <- tempfile(fileext = \".geojson\") ndgeo_write(x, outfile) jsonlite::stream_in(file(outfile)) #>  Found 3 records... Imported 3 records. Simplifying... #>      type id   properties.NOME #> 1 Feature  0 Sec de segunrança #> 2 Feature  1             Teste #> 3 Feature  3 Delacorte Theater #>                                                            properties.URL #> 1 http://www.theatermania.com/new-york/theaters/45th-street-theatre_2278/ #> 2          http://www.bestofoffbroadway.com/theaters/47streettheatre.html #> 3     http://www.centralpark.com/pages/attractions/delacorte-theatre.html #>                      properties.ADDRESS1 properties.CIDADE properties.CEP #> 1                   354 West 45th Street           Goiânia       74250010 #> 2                   304 West 47th Street          New York             NA #> 3 Central Park - Mid-Park at 80th Street          New York             NA #>   properties.ZIP geometry.type geometry.coordinates #> 1             NA         Point -49.25624, -16.68961 #> 2       74250010         Point -49.27624, -16.65561 #> 3       74250010         Point -49.27726, -16.67906"},{"path":"https://docs.ropensci.org/geojson/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Classes for GeoJSON","text":"Please report issues bugs. License: MIT Get citation information geojson R citation(package = 'geojson') Please note project released Contributor Code Conduct. participating project agree abide terms. (originally setup without requiring GEOS/GDAL stack now package sp depends sf can’t avoided without overhaul).","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/geojson/reference/as.geojson.html","id":null,"dir":"Reference","previous_headings":"","what":"Geojson class — as.geojson","title":"Geojson class — as.geojson","text":"Geojson class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/as.geojson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geojson class — as.geojson","text":"","code":"as.geojson(x)  # S4 method for json as.geojson(x)  # S4 method for geojson as.geojson(x)  # S4 method for character as.geojson(x)  # S4 method for SpatialPointsDataFrame as.geojson(x)  # S4 method for SpatialPoints as.geojson(x)  # S4 method for SpatialLinesDataFrame as.geojson(x)  # S4 method for SpatialLines as.geojson(x)  # S4 method for SpatialPolygonsDataFrame as.geojson(x)  # S4 method for SpatialPolygons as.geojson(x)"},{"path":"https://docs.ropensci.org/geojson/reference/as.geojson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geojson class — as.geojson","text":"x input, object class character, json, SpatialPoints, SpatialPointsDataFrame, SpatialLines, SpatialLinesDataFrame, SpatialPolygons, SpatialPolygonsDataFrame","code":""},{"path":"https://docs.ropensci.org/geojson/reference/as.geojson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geojson class — as.geojson","text":"object class geojson/json","code":""},{"path":"https://docs.ropensci.org/geojson/reference/as.geojson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geojson class — as.geojson","text":"print.geojson method prints geojson geometry type, bounding box, number features (applicable), geometries lengths","code":""},{"path":"https://docs.ropensci.org/geojson/reference/as.geojson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geojson class — as.geojson","text":"","code":"# character as.geojson(geojson_data$featurecollection_point) #> Loading required namespace: stringi #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 1  #>   features (geometry / length) [first 5]: #>     Point / 2  as.geojson(geojson_data$polygons_average) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 2  #>   features (geometry / length) [first 5]: #>     Polygon / 1 #>     Polygon / 1  as.geojson(geojson_data$polygons_aggregate) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 2  #>   features (geometry / length) [first 5]: #>     Polygon / 1 #>     Polygon / 1  as.geojson(geojson_data$points_count) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 2  #>   features (geometry / length) [first 5]: #>     Point / 2 #>     Point / 2   # sp classes  ## SpatialPoints library(sp) x <- c(1,2,3,4,5) y <- c(3,2,5,1,4) s <- SpatialPoints(cbind(x,y)) as.geojson(s) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 5  #>   features (geometry / length) [first 5]: #>     Point / 2 #>     Point / 2 #>     Point / 2 #>     Point / 2 #>     Point / 2   ## SpatialPointsDataFrame s <- SpatialPointsDataFrame(cbind(x,y), mtcars[1:5,]) as.geojson(s) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 5  #>   features (geometry / length) [first 5]: #>     Point / 2 #>     Point / 2 #>     Point / 2 #>     Point / 2 #>     Point / 2   ## SpatialLines L1 <- Line(cbind(c(1,2,3), c(3,2,2))) L2 <- Line(cbind(c(1.05,2.05,3.05), c(3.05,2.05,2.05))) L3 <- Line(cbind(c(1,2,3),c(1,1.5,1))) Ls1 <- Lines(list(L1), ID = \"a\") Ls2 <- Lines(list(L2, L3), ID = \"b\") sl1 <- SpatialLines(list(Ls1)) as.geojson(sl1) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 1  #>   features (geometry / length) [first 5]: #>     MultiLineString / 1   ## SpatialLinesDataFrame sl12 <- SpatialLines(list(Ls1, Ls2)) dat <- data.frame(X = c(\"Blue\", \"Green\"),                   Y = c(\"Train\", \"Plane\"),                   Z = c(\"Road\", \"River\"), row.names = c(\"a\", \"b\")) sldf <- SpatialLinesDataFrame(sl12, dat) as.geojson(sldf) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 2  #>   features (geometry / length) [first 5]: #>     MultiLineString / 1 #>     MultiLineString / 2   ## SpatialPolygons poly1 <- Polygons(list(Polygon(cbind(c(-100,-90,-85,-100),    c(40,50,45,40)))), \"1\") poly2 <- Polygons(list(Polygon(cbind(c(-90,-80,-75,-90),    c(30,40,35,30)))), \"2\") sp_poly <- SpatialPolygons(list(poly1, poly2), 1:2) as.geojson(sp_poly) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 2  #>   features (geometry / length) [first 5]: #>     Polygon / 1 #>     Polygon / 1   ## SpatialPolygonsDataFrame sp_polydf <- as(sp_poly, \"SpatialPolygonsDataFrame\") as.geojson(sp_polydf) #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 2  #>   features (geometry / length) [first 5]: #>     Polygon / 1 #>     Polygon / 1   ## sf objects if (requireNamespace('sf')) {   nc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"), quiet = TRUE)   as.geojson(nc) } #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 100  #>   features (geometry / length) [first 5]: #>     Polygon / 1 #>     Polygon / 1 #>     Polygon / 1 #>     Polygon / 3 #>     Polygon / 1"},{"path":"https://docs.ropensci.org/geojson/reference/bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or get bounding box — bbox","title":"Add or get bounding box — bbox","text":"Add get bounding box","code":""},{"path":"https://docs.ropensci.org/geojson/reference/bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or get bounding box — bbox","text":"","code":"bbox_add(x, bbox = NULL)  bbox_get(x)"},{"path":"https://docs.ropensci.org/geojson/reference/bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or get bounding box — bbox","text":"x object class geojson bbox (numeric) vector list length 4 2D bounding box length 6 3D bounding box. NULL, bounding box calculated ","code":""},{"path":"https://docs.ropensci.org/geojson/reference/bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add or get bounding box — bbox","text":"bbox_add: object class jqson/character jqr bbox_get: bounding box, form [west, south, east, north] 2D form [west, south, min-altitude, east, north, max-altitude] 3D","code":""},{"path":"https://docs.ropensci.org/geojson/reference/bbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add or get bounding box — bbox","text":"Note bbox_get outputs bbox exists, calculate geojson. See geo_bbox calculate bounding box. Bounding boxes can 2D 3D.","code":""},{"path":"https://docs.ropensci.org/geojson/reference/bbox.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add or get bounding box — bbox","text":"https://datatracker.ietf.org/doc/html/rfc7946#section-5","code":""},{"path":"https://docs.ropensci.org/geojson/reference/bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or get bounding box — bbox","text":"","code":"# make a polygon x <- '{ \"type\": \"Polygon\", \"coordinates\": [   [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]   ] }' (y <- polygon(x)) #> <Polygon>  #>   no. lines:  1  #>   no. holes:  0  #>   no. nodes / line:  5  #>   coordinates:  [[[100,0],[101,0],[101,1],[100,1],[100,0]]]   # add bbox - without an input, we figure out the 2D bbox for you y %>% feature() %>% bbox_add() #> { #>     \"type\": \"Feature\", #>     \"properties\": { #>  #>     }, #>     \"geometry\": { #>         \"type\": \"Polygon\", #>         \"coordinates\": [ #>             [ #>                 [ #>                     100, #>                     0 #>                 ], #>                 [ #>                     101, #>                     0 #>                 ], #>                 [ #>                     101, #>                     1 #>                 ], #>                 [ #>                     100, #>                     1 #>                 ], #>                 [ #>                     100, #>                     0 #>                 ] #>             ] #>         ] #>     }, #>     \"bbox\": [ #>         100, #>         0, #>         101, #>         1 #>     ] #> } ## 2D bbox y %>% feature() %>% bbox_add(c(100.0, -10.0, 105.0, 10.0)) #> { #>     \"type\": \"Feature\", #>     \"properties\": { #>  #>     }, #>     \"geometry\": { #>         \"type\": \"Polygon\", #>         \"coordinates\": [ #>             [ #>                 [ #>                     100, #>                     0 #>                 ], #>                 [ #>                     101, #>                     0 #>                 ], #>                 [ #>                     101, #>                     1 #>                 ], #>                 [ #>                     100, #>                     1 #>                 ], #>                 [ #>                     100, #>                     0 #>                 ] #>             ] #>         ] #>     }, #>     \"bbox\": [ #>         100, #>         -10, #>         105, #>         10 #>     ] #> } ## 3D bbox y %>% feature() %>% bbox_add(c(100.0, -10.0, 3, 105.0, 10.0, 17)) #> { #>     \"type\": \"Feature\", #>     \"properties\": { #>  #>     }, #>     \"geometry\": { #>         \"type\": \"Polygon\", #>         \"coordinates\": [ #>             [ #>                 [ #>                     100, #>                     0 #>                 ], #>                 [ #>                     101, #>                     0 #>                 ], #>                 [ #>                     101, #>                     1 #>                 ], #>                 [ #>                     100, #>                     1 #>                 ], #>                 [ #>                     100, #>                     0 #>                 ] #>             ] #>         ] #>     }, #>     \"bbox\": [ #>         100, #>         -10, #>         3, #>         105, #>         10, #>         17 #>     ] #> }  # get bounding box z <- y %>% feature() %>% bbox_add() bbox_get(z) #> [1] 100   0 101   1  ## returns NULL if no bounding box bbox_get(x) #> NULL"},{"path":"https://docs.ropensci.org/geojson/reference/crs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or get CRS — crs","title":"Add or get CRS — crs","text":"Add get CRS","code":""},{"path":"https://docs.ropensci.org/geojson/reference/crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or get CRS — crs","text":"","code":"crs_add(x, crs)  crs_get(x)"},{"path":"https://docs.ropensci.org/geojson/reference/crs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or get CRS — crs","text":"x object class geojson crs (character) CRS string. required.","code":""},{"path":"https://docs.ropensci.org/geojson/reference/crs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add or get CRS — crs","text":"According RFC 7946 (https://datatracker.ietf.org/doc/html/rfc7946#page-12) CRS GeoJSON objects must WGS-84, equivalent urn:ogc:def:crs:OGC::CRS84. lat/long must decimal degrees. Given , considering GeoJSON blobs exist CRS attributes , provide CRS helpers . moving forward likely used much.","code":""},{"path":"https://docs.ropensci.org/geojson/reference/crs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add or get CRS — crs","text":"https://github.com/OSGeo/PROJ, https://geojson.org/geojson-spec.html#coordinate-reference-system-objects","code":""},{"path":"https://docs.ropensci.org/geojson/reference/crs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or get CRS — crs","text":"","code":"x <- '{ \"type\": \"Polygon\", \"coordinates\": [   [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]   ] }'  # add crs crs <- '{\"type\": \"name\",  \"properties\": {      \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" }}' x %>% feature() %>% crs_add(crs) #> { #>     \"type\": \"Feature\", #>     \"properties\": { #>  #>     }, #>     \"geometry\": { #>         \"type\": \"Polygon\", #>         \"coordinates\": [ #>             [ #>                 [ #>                     100, #>                     0 #>                 ], #>                 [ #>                     101, #>                     0 #>                 ], #>                 [ #>                     101, #>                     1 #>                 ], #>                 [ #>                     100, #>                     1 #>                 ], #>                 [ #>                     100, #>                     0 #>                 ] #>             ] #>         ] #>     }, #>     \"crs\": { #>         \"type\": \"name\", #>         \"properties\": { #>             \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" #>         } #>     } #> }  # get crs z <- x %>% feature() %>% crs_add(crs) crs_get(z) #> $type #> [1] \"name\" #>  #> $properties #> $properties$name #> [1] \"urn:ogc:def:crs:OGC:1.3:CRS84\" #>  #>"},{"path":"https://docs.ropensci.org/geojson/reference/feature.html","id":null,"dir":"Reference","previous_headings":"","what":"feature class — feature","title":"feature class — feature","text":"feature class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"feature class — feature","text":"","code":"feature(x)"},{"path":"https://docs.ropensci.org/geojson/reference/feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"feature class — feature","text":"x input","code":""},{"path":"https://docs.ropensci.org/geojson/reference/feature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"feature class — feature","text":"Feature objects: feature object must member name \"geometry\". value geometry member geometry object defined JSON null value. feature object must member name \"properties\". value properties member object (JSON object JSON null value). feature commonly used identifier, identifier included member feature object name \"id\".","code":""},{"path":"https://docs.ropensci.org/geojson/reference/feature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"feature class — feature","text":"","code":"# point -> feature x <- '{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }' point(x) %>% feature() #> <Feature>  #>   type:  Point  #>   coordinates:  [100,0]   # multipoint -> feature x <- '{\"type\": \"MultiPoint\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ] }' multipoint(x) %>% feature() #> <Feature>  #>   type:  MultiPoint  #>   coordinates:  [[100,0],[101,1]]   # linestring -> feature x <- '{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ] }' linestring(x) %>% feature() #> <Feature>  #>   type:  LineString  #>   coordinates:  [[100,0],[101,1]]   # multilinestring -> feature x <- '{ \"type\": \"MultiLineString\",  \"coordinates\": [ [ [100.0, 0.0], [101.0, 1.0] ], [ [102.0, 2.0], [103.0, 3.0] ] ] }' multilinestring(x) %>% feature() #> <Feature>  #>   type:  MultiLineString  #>   coordinates:  [[[100,0],[101,1]],[[102,2],[103,3]]]   # add to a data.frame library('tibble') tibble(a = 1:5, b = list(multilinestring(x))) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <gmltlnst [1]> #> 2     2 <gmltlnst [1]> #> 3     3 <gmltlnst [1]> #> 4     4 <gmltlnst [1]> #> 5     5 <gmltlnst [1]>"},{"path":"https://docs.ropensci.org/geojson/reference/featurecollection.html","id":null,"dir":"Reference","previous_headings":"","what":"featurecollection class — featurecollection","title":"featurecollection class — featurecollection","text":"featurecollection class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/featurecollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"featurecollection class — featurecollection","text":"","code":"featurecollection(x)"},{"path":"https://docs.ropensci.org/geojson/reference/featurecollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"featurecollection class — featurecollection","text":"x input","code":""},{"path":"https://docs.ropensci.org/geojson/reference/featurecollection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"featurecollection class — featurecollection","text":"","code":"file <- system.file(\"examples\", 'featurecollection1.geojson',   package = \"geojson\") file <- system.file(\"examples\", 'featurecollection2.geojson',   package = \"geojson\") str <- paste0(readLines(file), collapse = \" \") (y <- featurecollection(str)) #> <FeatureCollection>  #>   type:  FeatureCollection  #>   no. features:  3  #>   features (1st 5):  Point, Point, Point  geo_type(y) #> [1] \"FeatureCollection\" geo_pretty(y) #> { #>     \"type\": \"FeatureCollection\", #>     \"features\": [ #>         { #>             \"type\": \"Feature\", #>             \"id\": 0, #>             \"properties\": { #>                 \"NOME\": \"Sec de segunrança\", #>                 \"URL\": \"http://www.theatermania.com/new-york/theaters/45th-street-theatre_2278/\", #>                 \"ADDRESS1\": \"354 West 45th Street\", #>                 \"CIDADE\": \"Goiânia\", #>                 \"CEP\": 74250010 #>             }, #>             \"geometry\": { #>                 \"type\": \"Point\", #>                 \"coordinates\": [ #>                     -49.256240, #>                     -16.689612 #>                 ] #>             } #>         }, #>         { #>             \"type\": \"Feature\", #>             \"id\": 1, #>             \"properties\": { #>                 \"NOME\": \"Teste\", #>                 \"URL\": \"http://www.bestofoffbroadway.com/theaters/47streettheatre.html\", #>                 \"ADDRESS1\": \"304 West 47th Street\", #>                 \"CIDADE\": \"New York\", #>                 \"ZIP\": 74250010 #>             }, #>             \"geometry\": { #>                 \"type\": \"Point\", #>                 \"coordinates\": [ #>                     -49.276240, #>                     -16.655612 #>                 ] #>             } #>         }, #>         { #>             \"type\": \"Feature\", #>             \"id\": 3, #>             \"properties\": { #>                 \"NOME\": \"Delacorte Theater\", #>                 \"URL\": \"http://www.centralpark.com/pages/attractions/delacorte-theatre.html\", #>                 \"ADDRESS1\": \"Central Park - Mid-Park at 80th Street\", #>                 \"CIDADE\": \"New York\", #>                 \"ZIP\": 74250010 #>             }, #>             \"geometry\": { #>                 \"type\": \"Point\", #>                 \"coordinates\": [ #>                     -49.277263, #>                     -16.679057 #>                 ] #>             } #>         } #>     ] #> } #>   geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"FeatureCollection\" #>  #> $features #> $features[[1]] #> $features[[1]]$type #> [1] \"Feature\" #>  #> $features[[1]]$id #> [1] 0 #>  #> $features[[1]]$properties #> $features[[1]]$properties$NOME #> [1] \"Sec de segunrança\" #>  #> $features[[1]]$properties$URL #> [1] \"http://www.theatermania.com/new-york/theaters/45th-street-theatre_2278/\" #>  #> $features[[1]]$properties$ADDRESS1 #> [1] \"354 West 45th Street\" #>  #> $features[[1]]$properties$CIDADE #> [1] \"Goiânia\" #>  #> $features[[1]]$properties$CEP #> [1] 74250010 #>  #>  #> $features[[1]]$geometry #> $features[[1]]$geometry$type #> [1] \"Point\" #>  #> $features[[1]]$geometry$coordinates #> $features[[1]]$geometry$coordinates[[1]] #> [1] -49.2562 #>  #> $features[[1]]$geometry$coordinates[[2]] #> [1] -16.6896 #>  #>  #>  #>  #> $features[[2]] #> $features[[2]]$type #> [1] \"Feature\" #>  #> $features[[2]]$id #> [1] 1 #>  #> $features[[2]]$properties #> $features[[2]]$properties$NOME #> [1] \"Teste\" #>  #> $features[[2]]$properties$URL #> [1] \"http://www.bestofoffbroadway.com/theaters/47streettheatre.html\" #>  #> $features[[2]]$properties$ADDRESS1 #> [1] \"304 West 47th Street\" #>  #> $features[[2]]$properties$CIDADE #> [1] \"New York\" #>  #> $features[[2]]$properties$ZIP #> [1] 74250010 #>  #>  #> $features[[2]]$geometry #> $features[[2]]$geometry$type #> [1] \"Point\" #>  #> $features[[2]]$geometry$coordinates #> $features[[2]]$geometry$coordinates[[1]] #> [1] -49.2762 #>  #> $features[[2]]$geometry$coordinates[[2]] #> [1] -16.6556 #>  #>  #>  #>  #> $features[[3]] #> $features[[3]]$type #> [1] \"Feature\" #>  #> $features[[3]]$id #> [1] 3 #>  #> $features[[3]]$properties #> $features[[3]]$properties$NOME #> [1] \"Delacorte Theater\" #>  #> $features[[3]]$properties$URL #> [1] \"http://www.centralpark.com/pages/attractions/delacorte-theatre.html\" #>  #> $features[[3]]$properties$ADDRESS1 #> [1] \"Central Park - Mid-Park at 80th Street\" #>  #> $features[[3]]$properties$CIDADE #> [1] \"New York\" #>  #> $features[[3]]$properties$ZIP #> [1] 74250010 #>  #>  #> $features[[3]]$geometry #> $features[[3]]$geometry$type #> [1] \"Point\" #>  #> $features[[3]]$geometry$coordinates #> $features[[3]]$geometry$coordinates[[1]] #> [1] -49.2773 #>  #> $features[[3]]$geometry$coordinates[[2]] #> [1] -16.6791 #>  #>  #>  #>  #>  unlink(f)  # add to a data.frame library('tibble') tibble(a = 1:5, b = list(y)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <gftrcllc [1]> #> 2     2 <gftrcllc [1]> #> 3     3 <gftrcllc [1]> #> 4     4 <gftrcllc [1]> #> 5     5 <gftrcllc [1]>  # features to featurecollection x <- '{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }' point(x) %>% feature() %>% featurecollection() #> <FeatureCollection>  #>   type:  FeatureCollection  #>   no. features:  1  #>   features (1st 5):  Point   ## all points x <- '{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }' y <- '{ \"type\": \"Point\", \"coordinates\": [100.0, 50.0] }' featls <- lapply(list(x, y), function(z) feature(point(z))) featurecollection(featls) #> <FeatureCollection>  #>   type:  FeatureCollection  #>   no. features:  2  #>   features (1st 5):  Point, Point"},{"path":"https://docs.ropensci.org/geojson/reference/geo_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a bounding box — geo_bbox","title":"Calculate a bounding box — geo_bbox","text":"Calculate bounding box","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a bounding box — geo_bbox","text":"","code":"geo_bbox(x)"},{"path":"https://docs.ropensci.org/geojson/reference/geo_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a bounding box — geo_bbox","text":"x object class geojson","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a bounding box — geo_bbox","text":"vector four doubles: min lon, min lat, max lon, max lat","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_bbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a bounding box — geo_bbox","text":"Supports inputs type: character, point, multipoint, linestring, multilinestring, polygon, multipoygon, feature, featurecollection character inputs, lint input make sure proper JSON GeoJSON, caculate bounding box","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a bounding box — geo_bbox","text":"","code":"# point x <- '{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }' (y <- point(x)) #> <Point>  #>   coordinates:  [100,0]  geo_bbox(y) #> [1] 100   0 100   0 y %>% feature() %>% geo_bbox() #> [1] 100   0 100   0  # multipoint x <- '{\"type\": \"MultiPoint\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ] }' (y <- multipoint(x)) #> <MultiPoint>  #>   coordinates:  [[100,0],[101,1]]  geo_bbox(y) #> [1] 100   0 101   1 y %>% feature() %>% geo_bbox() #> [1] 100   0 101   1  # linestring x <- '{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]}' (y <- linestring(x)) #> <LineString>  #>   coordinates:  [[100,0],[101,1]]  geo_bbox(y) #> [1] 100   0 101   1 y %>% feature() %>% geo_bbox() #> [1] 100   0 101   1 file <- system.file(\"examples\", 'linestring_one.geojson',   package = \"geojson\") con <- file(file) str <- paste0(readLines(con), collapse = \" \") (y <- linestring(str)) #> <LineString>  #>   coordinates:  [[109.96,54.5,0],[109.95,54.51,0],[109.96,54.52,0],[109.96,54.52,0],[1 ...  geo_bbox(y) #> [1] 109.95  54.48 110.00  54.52 y %>% feature() %>% geo_bbox() #> [1] 109.95  54.48 110.00  54.52 close(con)  if (FALSE) { # multilinestring x <- '{ \"type\": \"MultiLineString\",  \"coordinates\": [ [ [100.0, 0.0], [101.0, 1.0] ], [ [102.0, 2.0],  [103.0, 3.0] ] ] }' (y <- multilinestring(x)) geo_bbox(y) y %>% feature() %>% geo_bbox()  # polygon x <- '{ \"type\": \"Polygon\", \"coordinates\": [   [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]   ] }' (y <- polygon(x)) geo_bbox(y) y %>% feature() %>% geo_bbox()  # multipolygon x <- '{ \"type\": \"MultiPolygon\", \"coordinates\": [   [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],   [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],   [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]   ] }' (y <- multipolygon(x)) geo_bbox(y) y %>% feature() %>% geo_bbox()  # featurecollection file <- system.file(\"examples\", 'featurecollection2.geojson',   package = \"geojson\") str <- paste0(readLines(file), collapse = \" \") x <- featurecollection(str) geo_bbox(x)  # character file <- system.file(\"examples\", 'featurecollection2.geojson',   package = \"geojson\") str <- paste0(readLines(file), collapse = \" \") geo_bbox(str)  # json library('jsonlite') geo_bbox(toJSON(fromJSON(str), auto_unbox = TRUE)) }"},{"path":"https://docs.ropensci.org/geojson/reference/geo_pretty.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty print geojson — geo_pretty","title":"Pretty print geojson — geo_pretty","text":"Pretty print geojson","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_pretty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty print geojson — geo_pretty","text":"","code":"geo_pretty(x)"},{"path":"https://docs.ropensci.org/geojson/reference/geo_pretty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty print geojson — geo_pretty","text":"x input, object class geojson","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_pretty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pretty print geojson — geo_pretty","text":"Wrapper around prettify","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_pretty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty print geojson — geo_pretty","text":"","code":"geo_pretty(point('{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }')) #> { #>     \"type\": \"Point\", #>     \"coordinates\": [ #>         100.0, #>         0.0 #>     ] #> } #>    x <- '{ \"type\": \"Polygon\", \"coordinates\": [   [ [100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0], [100.0, 0.0] ]   ] }' poly <- polygon(x) geo_pretty(poly) #> { #>     \"type\": \"Polygon\", #>     \"coordinates\": [ #>         [ #>             [ #>                 100.0, #>                 0.0 #>             ], #>             [ #>                 100.0, #>                 1.0 #>             ], #>             [ #>                 101.0, #>                 1.0 #>             ], #>             [ #>                 101.0, #>                 0.0 #>             ], #>             [ #>                 100.0, #>                 0.0 #>             ] #>         ] #>     ] #> } #>"},{"path":"https://docs.ropensci.org/geojson/reference/geo_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get geometry type — geo_type","title":"Get geometry type — geo_type","text":"Get geometry type","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get geometry type — geo_type","text":"","code":"geo_type(x)"},{"path":"https://docs.ropensci.org/geojson/reference/geo_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get geometry type — geo_type","text":"x input, object class geojson","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get geometry type — geo_type","text":"","code":"geo_type(point('{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }')) #> [1] \"Point\"  x <- '{ \"type\": \"Polygon\", \"coordinates\": [   [ [100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0], [100.0, 0.0] ]   ] }' poly <- polygon(x)  geo_type(poly) #> [1] \"Polygon\""},{"path":"https://docs.ropensci.org/geojson/reference/geo_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write geojson to disk — geo_write","title":"Write geojson to disk — geo_write","text":"Write geojson disk","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write geojson to disk — geo_write","text":"","code":"geo_write(x, file)"},{"path":"https://docs.ropensci.org/geojson/reference/geo_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write geojson to disk — geo_write","text":"x input, object class geojson file (character) file path, connection","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write geojson to disk — geo_write","text":"Wrapper around jsonlite::toJSON() cat","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geo_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write geojson to disk — geo_write","text":"","code":"file <- tempfile(fileext = \".geojson\") geo_write(   point('{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }'),   file ) readLines(file) #> [1] \"{\"                           \"  \\\"type\\\": \\\"Point\\\",\"      #> [3] \"  \\\"coordinates\\\": [100, 0]\" \"} \"                          unlink(file)"},{"path":"https://docs.ropensci.org/geojson/reference/geobuf.html","id":null,"dir":"Reference","previous_headings":"","what":"Geobuf serialization — geobuf","title":"Geobuf serialization — geobuf","text":"Geobuf serialization","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geobuf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geobuf serialization — geobuf","text":"","code":"from_geobuf(x, pretty = FALSE)  to_geobuf(x, file = NULL, decimals = 6)"},{"path":"https://docs.ropensci.org/geojson/reference/geobuf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geobuf serialization — geobuf","text":"x (character) file raw object from_geobuf, json string to_geobuf pretty (logical) pretty print JSON. Default: FALSE file (character) file write protobuf . NULL, geobuf raw binary returned decimals (integer) many decimals (digits behind dot) store numbers","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geobuf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geobuf serialization — geobuf","text":"from_geobuf JSON character string, to_geobuf raw file written disk","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geobuf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geobuf serialization — geobuf","text":"from_geobuf uses protolite::geobuf2json(), to_geobuf uses protolite::json2geobuf() Note protolite expects either Feature, FeatureCollection, Geometry class geojson object, Thus, to_geobuf check geojson class, convert Feature class something acceptable set.","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geobuf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Geobuf serialization — geobuf","text":"Geobuf compact binary encoding geographic data using protocol buffers https://github.com/mapbox/geobuf","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geobuf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geobuf serialization — geobuf","text":"","code":"file <- system.file(\"examples/test.pb\", package = \"geojson\") (json <- from_geobuf(file)) #> {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102,0.5]},\"id\":999,\"properties\":{\"prop0\":\"value0\",\"double\":0.0123,\"negative_int\":-100,\"positive_int\":100,\"negative_double\":-12345000000000000,\"positive_double\":12345000000000000,\"null\":null,\"array\":[1,2,3.1],\"object\":{\"foo\":[5,6,7]}},\"blabla\":{\"foo\":[1,1,1]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102,0],[103,-1.1],[104,-3],[105,1]]},\"id\":123,\"properties\":{\"custom1\":\"test\",\"prop0\":\"value0\",\"prop1\":0}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[99,10],[101,0],[100,1],[99,10]]]},\"id\":\"test-id\",\"properties\":{\"prop0\":\"value0\",\"prop1\":{\"this\":\"that\"}},\"custom1\":\"jeroen\"},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102,2],[103,2],[103,3],[102,2]]],[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[100.2,0.2],[100.2,0.8],[100.2,0.2]]]]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100,0]},{\"type\":\"LineString\",\"coordinates\":[[101,0],[102,1]]},{\"type\":\"MultiPoint\",\"coordinates\":[[100,0],[101,1]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100,0],[101,1]],[[102,2],[103,3]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102,2],[103,2],[103,3],[102,3],[102,2]]],[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[100.2,0.2],[100.8,0.2],[100.8,0.8],[100.2,0.8],[100.2,0.2]]]]}]}}]}  from_geobuf(file, pretty = TRUE) #> { #>   \"type\": \"FeatureCollection\", #>   \"features\": [ #>     { #>       \"type\": \"Feature\", #>       \"geometry\": { #>         \"type\": \"Point\", #>         \"coordinates\": [102, 0.5] #>       }, #>       \"id\": 999, #>       \"properties\": { #>         \"prop0\": \"value0\", #>         \"double\": 0.0123, #>         \"negative_int\": -100, #>         \"positive_int\": 100, #>         \"negative_double\": -12345000000000000, #>         \"positive_double\": 12345000000000000, #>         \"null\": null, #>         \"array\": [1, 2, 3.1], #>         \"object\": { #>           \"foo\": [5, 6, 7] #>         } #>       }, #>       \"blabla\": { #>         \"foo\": [1, 1, 1] #>       } #>     }, #>     { #>       \"type\": \"Feature\", #>       \"geometry\": { #>         \"type\": \"LineString\", #>         \"coordinates\": [ #>           [102, 0], #>           [103, -1.1], #>           [104, -3], #>           [105, 1] #>         ] #>       }, #>       \"id\": 123, #>       \"properties\": { #>         \"custom1\": \"test\", #>         \"prop0\": \"value0\", #>         \"prop1\": 0 #>       } #>     }, #>     { #>       \"type\": \"Feature\", #>       \"geometry\": { #>         \"type\": \"Polygon\", #>         \"coordinates\": [ #>           [ #>             [100, 0], #>             [101, 0], #>             [101, 1], #>             [100, 1], #>             [100, 0] #>           ], #>           [ #>             [99, 10], #>             [101, 0], #>             [100, 1], #>             [99, 10] #>           ] #>         ] #>       }, #>       \"id\": \"test-id\", #>       \"properties\": { #>         \"prop0\": \"value0\", #>         \"prop1\": { #>           \"this\": \"that\" #>         } #>       }, #>       \"custom1\": \"jeroen\" #>     }, #>     { #>       \"type\": \"Feature\", #>       \"geometry\": { #>         \"type\": \"MultiPolygon\", #>         \"coordinates\": [ #>           [ #>             [ #>               [102, 2], #>               [103, 2], #>               [103, 3], #>               [102, 2] #>             ] #>           ], #>           [ #>             [ #>               [100, 0], #>               [101, 0], #>               [101, 1], #>               [100, 1], #>               [100, 0] #>             ], #>             [ #>               [100.2, 0.2], #>               [100.2, 0.8], #>               [100.2, 0.2] #>             ] #>           ] #>         ] #>       } #>     }, #>     { #>       \"type\": \"Feature\", #>       \"geometry\": { #>         \"type\": \"GeometryCollection\", #>         \"geometries\": [ #>           { #>             \"type\": \"Point\", #>             \"coordinates\": [100, 0] #>           }, #>           { #>             \"type\": \"LineString\", #>             \"coordinates\": [ #>               [101, 0], #>               [102, 1] #>             ] #>           }, #>           { #>             \"type\": \"MultiPoint\", #>             \"coordinates\": [ #>               [100, 0], #>               [101, 1] #>             ] #>           }, #>           { #>             \"type\": \"MultiLineString\", #>             \"coordinates\": [ #>               [ #>                 [100, 0], #>                 [101, 1] #>               ], #>               [ #>                 [102, 2], #>                 [103, 3] #>               ] #>             ] #>           }, #>           { #>             \"type\": \"MultiPolygon\", #>             \"coordinates\": [ #>               [ #>                 [ #>                   [102, 2], #>                   [103, 2], #>                   [103, 3], #>                   [102, 3], #>                   [102, 2] #>                 ] #>               ], #>               [ #>                 [ #>                   [100, 0], #>                   [101, 0], #>                   [101, 1], #>                   [100, 1], #>                   [100, 0] #>                 ], #>                 [ #>                   [100.2, 0.2], #>                   [100.8, 0.2], #>                   [100.8, 0.8], #>                   [100.2, 0.8], #>                   [100.2, 0.2] #>                 ] #>               ] #>             ] #>           } #>         ] #>       } #>     } #>   ] #> }  pb <- to_geobuf(json) f <- tempfile(fileext = \".pb\") to_geobuf(json, f) from_geobuf(f) #> {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Point\",\"coordinates\":[102,0.5]},\"id\":999,\"properties\":{\"prop0\":\"value0\",\"double\":0.0123,\"negative_int\":-100,\"positive_int\":100,\"negative_double\":-12345000000000000,\"positive_double\":12345000000000000,\"null\":null,\"array\":[1,2,3.1],\"object\":{\"foo\":[5,6,7]}},\"blabla\":{\"foo\":[1,1,1]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[102,0],[103,-1.1],[104,-3],[105,1]]},\"id\":123,\"properties\":{\"custom1\":\"test\",\"prop0\":\"value0\",\"prop1\":0}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[99,10],[101,0],[100,1],[99,10]]]},\"id\":\"test-id\",\"properties\":{\"prop0\":\"value0\",\"prop1\":{\"this\":\"that\"}},\"custom1\":\"jeroen\"},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102,2],[103,2],[103,3],[102,2]]],[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[100.2,0.2],[100.2,0.8],[100.2,0.2]]]]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[100,0]},{\"type\":\"LineString\",\"coordinates\":[[101,0],[102,1]]},{\"type\":\"MultiPoint\",\"coordinates\":[[100,0],[101,1]]},{\"type\":\"MultiLineString\",\"coordinates\":[[[100,0],[101,1]],[[102,2],[103,3]]]},{\"type\":\"MultiPolygon\",\"coordinates\":[[[[102,2],[103,2],[103,3],[102,3],[102,2]]],[[[100,0],[101,0],[101,1],[100,1],[100,0]],[[100.2,0.2],[100.8,0.2],[100.8,0.8],[100.2,0.8],[100.2,0.2]]]]}]}}]}   object.size(json) #> 1776 bytes object.size(pb) #> 728 bytes file.info(file)$size #> [1] 577 file.info(f)$size #> [1] 676  file <- system.file(\"examples/featurecollection1.geojson\",   package = \"geojson\") json <- paste0(readLines(file), collapse = \"\") to_geobuf(json) #>     [1] 0a 08 73 74 79 6c 65 55 72 6c 0a 09 73 74 79 6c 65 48 61 73 68 0a 04 5a #>    [25] 30 30 30 0a 04 5a 30 30 31 0a 04 5a 30 30 32 0a 04 5a 30 30 33 0a 05 43 #>    [49] 4f 55 4e 54 0a 04 5a 30 30 34 0a 04 5a 30 30 35 0a 06 52 5f 43 4f 44 45 #>    [73] 0a 06 52 45 47 49 4f 4e 10 03 18 06 22 b6 aa 01 0a b2 aa 01 0a aa a9 01 #>    [97] 08 06 22 81 01 08 04 12 01 18 1a 7a c4 b3 af 73 e2 81 e9 0d 00 f5 12 b9 #>   [121] 1d 00 9b 14 fb 1a 00 f7 19 e1 1e 00 c7 13 e9 1c 00 91 0a 87 0a 00 97 14 #>   [145] a9 1f 00 83 08 eb 1f 00 a2 03 b9 07 00 ca 0b af 07 00 fe 0f 62 00 b4 1b #>   [169] 9a 0a 00 dc 0c 9a 08 00 e8 0f 8a 14 00 fc 0b d6 14 00 a6 12 ca 1b 00 a0 #>   [193] 14 ee 17 00 c4 1c a4 1c 00 84 0a 92 17 00 96 0b be 25 00 ab 03 96 10 00 #>   [217] cd 12 a8 07 00 c5 12 13 00 9b 16 d1 11 00 22 a0 a8 01 08 04 12 03 ea 25 #>   [241] 5f 1a 95 a8 01 c0 a4 b9 73 f4 88 e6 0d 00 72 ea 02 00 b0 01 f2 02 00 02 #>   [265] f8 01 00 7c 90 03 00 a2 01 92 03 00 ba 01 b8 02 00 d0 01 96 03 00 a6 01 #>   [289] b8 03 00 9e 01 90 04 00 cc 01 dc 02 00 d4 02 c6 03 00 e2 01 0e 00 a4 02 #>   [313] d4 06 00 a7 03 d6 01 00 7c a8 02 00 98 01 86 04 00 88 01 31 00 f8 03 c8 #>   [337] 0a 00 81 03 a2 01 00 b0 02 9a 06 00 f4 02 63 00 ac 03 e4 05 00 e2 02 0a #>   [361] 00 98 01 b6 03 00 98 01 9a 03 00 85 04 8e 02 00 86 02 a2 05 00 d8 04 b6 #>   [385] 0c 00 e2 02 1d 00 a0 01 bc 08 00 32 c4 05 00 e4 01 a0 03 00 d0 02 f2 01 #>   [409] 00 90 05 c3 01 00 c0 05 25 00 ce 02 02 00 26 9c 01 00 a3 0a e2 03 00 12 #>   [433] dc 01 00 64 ca 02 00 44 da 01 00 b8 01 74 00 9f 01 7e 00 11 c6 01 00 07 #>   [457] ca 02 00 3e ec 01 00 e4 01 f6 01 00 ac 04 95 01 00 b4 01 dc 03 00 8b 03 #>   [481] c0 01 00 8a 01 f2 02 00 1f 84 03 00 68 aa 03 00 da 01 9e 02 00 f0 01 4c #>   [505] 00 ca 04 07 00 90 01 d6 04 00 b3 01 90 01 00 d3 01 0a 00 00 a2 01 00 a2 #>   [529] 01 3a 00 42 e4 01 00 d7 01 8a 01 00 59 b0 01 00 de 01 84 02 00 e2 01 16 #>   [553] 00 de 01 42 00 29 8e 01 00 9b 01 64 00 72 8a 01 00 8a 01 e6 02 00 07 bc #>   [577] 02 00 ad 01 ca 01 00 00 c0 01 00 76 da 02 00 c0 01 9a 08 00 50 b8 01 00 #>   [601] 45 c6 01 00 23 fc 01 00 a2 01 dc 03 00 ca 01 84 07 00 e0 01 86 06 00 b6 #>   [625] 01 d8 04 00 80 02 dc 05 00 90 01 dc 03 00 14 a2 05 00 11 82 04 00 94 01 #>   [649] 9e 02 00 aa 01 a0 04 00 3a ea 03 00 bc 02 2a 00 17 f8 01 00 17 66 00 81 #>   [673] 03 48 00 77 a0 07 00 e4 01 e6 03 00 9a 01 d4 04 00 06 b4 03 00 eb 01 98 #>   [697] 02 00 52 86 02 00 1a a6 03 00 52 ca 02 00 e8 01 82 02 00 61 b4 01 00 c8 #>   [721] 01 f2 01 00 0e d0 01 00 1b 94 02 00 80 02 90 01 00 95 02 4a 00 8d 01 50 #>   [745] 00 48 d0 01 00 b4 01 de 01 00 15 98 02 00 87 01 ca 02 00 18 d2 01 00 67 #>   [769] 86 02 00 91 01 fa 01 00 02 d6 03 00 64 8e 05 00 8f 01 c0 05 00 1a 88 04 #>   [793] 00 b0 01 dc 01 00 e6 01 19 00 aa 01 16 00 00 a6 02 00 6a 92 04 00 7c c0 #>   [817] 05 00 b2 01 c0 06 00 10 90 04 00 95 01 86 01 00 61 72 00 5a e0 01 00 30 #>   [841] cc 04 00 a0 01 c6 07 00 9a 02 94 09 00 40 9a 07 00 4e f8 06 00 24 bc 07 #>   [865] 00 90 01 ca 06 00 be 01 90 05 00 23 c0 02 00 a5 07 c4 01 00 42 84 02 00 #>   [889] 86 07 1b 00 c2 01 ec 01 00 ee 01 e8 06 00 b6 01 90 05 00 0d de 01 00 be #>   [913] 01 80 03 00 ce 02 88 08 00 b6 01 9c 08 00 94 01 b2 05 00 22 cc 05 00 b0 #>   [937] 01 fc 03 00 8a 03 d8 05 00 90 02 a2 05 00 15 c8 02 00 95 01 c8 01 00 26 #>   [961] 66 00 8a 01 03 00 9c 01 86 01 00 80 02 ea 03 00 90 02 8a 07 00 60 90 04 #>   [985] 00 a1 03 50 00 54 ee 06 00 3c fa 01 00 46 a0 01 00 b6 03 c4 02 00 8c 02 #>  [1009] be 01 00 76 ae 01 00 d2 02 d2 08 00 9e 03 86 07 00 ba 01 b4 03 00 7c e2 #>  [1033] 05 00 98 01 b0 04 00 c0 01 92 02 00 a6 02 9e 04 00 d0 02 82 05 00 88 01 #>  [1057] bc 02 00 66 a2 03 00 5c ee 02 00 c0 01 ac 02 00 94 01 a6 05 00 4e cc 02 #>  [1081] 00 d8 01 a8 02 00 a4 01 fa 01 00 4e ce 01 00 84 01 1c 00 ee 01 d4 02 00 #>  [1105] 1d 9e 01 00 04 86 01 00 ba 05 ca 07 00 d2 01 90 02 00 b6 01 da 01 00 c6 #>  [1129] 04 a4 0b 00 82 01 bc 02 00 7a a0 01 00 9a 01 8c 01 00 24 82 02 00 16 ba #>  [1153] 01 00 8c 01 c8 01 00 ff 02 8e 03 00 00 8a 01 00 70 ae 01 00 f2 01 31 00 #>  [1177] 92 01 35 00 82 01 fc 01 00 52 ac 03 00 6c e0 02 00 66 ac 01 00 d4 01 8e #>  [1201] 01 00 d4 01 b8 01 00 5e d2 01 00 16 a0 01 00 62 a6 01 00 46 8e 01 00 24 #>  [1225] b8 03 00 52 cc 04 00 66 d6 02 00 d2 01 da 02 00 b0 03 84 03 00 96 06 d2 #>  [1249] 05 00 86 02 e2 01 00 6c e0 01 00 8c 01 82 02 00 ea 02 92 03 00 e8 02 e2 #>  [1273] 03 00 f4 01 8a 02 00 d8 05 a4 04 00 98 03 a4 03 00 f8 01 aa 02 00 b0 02 #>  [1297] f0 02 00 b6 02 c6 02 00 84 01 90 01 00 b2 01 7c 00 30 75 00 8b 02 a7 02 #>  [1321] 00 a5 03 c7 03 00 5d 97 01 00 8a 01 47 00 9e 0b 86 09 00 e8 03 ca 02 00 #>  [1345] f0 01 02 00 8c 02 34 00 c2 01 4e 00 e8 02 55 00 fa 01 0b 00 ec 02 aa 01 #>  [1369] 00 b8 01 7a 00 b8 02 05 00 ca 01 80 01 00 16 e2 01 00 2a 8a 01 00 d8 01 #>  [1393] ca 01 00 ae 01 92 01 00 4a cc 02 00 19 f2 02 00 3f b0 02 00 00 9a 01 00 #>  [1417] b2 02 4a 00 8a 02 5d 00 fe 01 31 00 f4 02 58 00 c4 03 cc 01 00 b6 03 fa #>  [1441] 01 00 b8 01 a6 01 00 92 01 aa 01 00 b2 02 3e 00 9c 02 5e 00 92 01 1f 00 #>  [1465] 60 8d 01 00 34 c7 01 00 b0 01 65 00 26 a9 01 00 c0 01 e5 03 00 8a 01 ed #>  [1489] 01 00 aa 01 b9 01 00 5a 93 01 00 a9 01 91 01 00 f1 02 7e 00 87 03 cc 01 #>  [1513] 00 d9 01 6a 00 b7 01 0a 00 bb 01 45 00 87 01 93 01 00 40 97 03 00 30 ad #>  [1537] 02 00 02 b7 02 00 02 97 02 00 c0 01 ff 02 00 4c b1 01 00 45 61 00 9f 01 #>  [1561] 4f 00 23 9f 01 00 f4 01 ef 05 00 c4 01 fd 02 00 b0 01 f7 01 00 3a d7 01 #>  [1585] 00 27 99 03 00 3a b3 01 00 a6 02 a1 01 00 ba 01 bd 01 00 b4 01 cd 01 00 #>  [1609] be 03 dd 01 00 fa 02 dd 01 00 80 02 91 02 00 b8 02 25 00 e8 01 c7 01 00 #>  [1633] 92 03 95 01 00 b8 02 68 00 ba 01 c5 01 00 8e 01 2f 00 9c 02 2a 00 aa 01 #>  [1657] 89 01 00 10 c3 01 00 5a 51 00 90 03 30 00 98 01 31 00 2c d7 01 00 23 c3 #>  [1681] 01 00 9c 01 d5 01 00 fc 02 bf 01 00 ba 01 a5 01 00 a8 03 0c 00 e2 01 38 #>  [1705] 00 c8 02 8b 02 00 b4 01 a5 01 00 ae 04 6d 00 fe 04 6f 00 e0 02 b1 01 00 #>  [1729] aa 02 63 00 be 01 71 00 a0 02 31 00 a0 03 38 00 c6 02 4f 00 9c 02 cb 01 #>  [1753] 00 ae 02 4b 00 d4 01 5d 00 3e ab 01 00 bb 01 a1 01 00 c7 03 af 01 00 8d #>  [1777] 01 97 01 00 de 02 67 00 8a 08 18 00 d8 05 19 00 b4 05 74 00 c8 06 03 00 #>  [1801] fa 02 4e 00 9c 04 ca 02 00 a4 03 c4 01 00 fa 01 21 00 9c 02 1c 00 96 01 #>  [1825] 9e 02 00 cc 01 9c 06 00 58 d2 02 00 a4 01 c0 01 00 a0 01 c2 01 00 74 c2 #>  [1849] 02 00 92 01 03 00 d6 01 af 01 00 9a 03 63 00 a6 02 21 00 d6 01 a5 02 00 #>  [1873] fc 01 bd 02 00 b4 03 a3 01 00 ae 03 4f 00 b6 02 ba 01 00 36 ea 01 00 76 #>  [1897] 70 00 ca 01 08 00 b0 02 af 01 00 b8 02 02 00 aa 06 94 02 00 88 02 22 00 #>  [1921] 8e 01 dd 01 00 a2 01 d5 01 00 f0 01 10 00 ce 01 9a 01 00 70 7e 00 9c 01 #>  [1945] 61 00 8e 01 77 00 b8 02 2c 00 88 01 fc 01 00 8c 01 c4 02 00 c6 01 72 00 #>  [1969] d4 02 2c 00 86 03 6c 00 d0 01 9a 01 00 c4 03 98 01 00 bc 08 da 01 00 c4 #>  [1993] 01 9c 02 00 c4 01 ca 02 00 a4 02 4c 00 6a 91 01 00 3e cd 01 00 96 04 0b #>  [2017] 00 de 01 5e 00 92 01 84 01 00 f2 01 37 00 ae 02 0e 00 e6 02 da 02 00 d8 #>  [2041] 03 cc 05 00 d6 01 f4 02 00 8a 02 c4 04 00 bc 02 80 06 00 d4 01 f8 06 00 #>  [2065] 5a b6 05 00 c8 01 92 03 00 cc 03 ac 03 00 fc 01 aa 04 00 80 02 a8 04 00 #>  [2089] ba 02 82 04 00 8e 03 d6 02 00 ca 02 8e 02 00 ce 01 aa 02 00 c0 01 ac 03 #>  [2113] 00 78 c2 03 00 47 78 00 e7 01 5a 00 13 e8 01 00 82 01 ce 02 00 be 01 9e #>  [2137] 05 00 66 e4 03 00 be 01 a0 03 00 f8 01 d6 03 00 ac 01 98 03 00 2c a2 03 #>  [2161] 00 1f b6 02 00 0e b8 01 00 01 ea 02 00 9a 01 88 03 00 62 fa 02 00 08 82 #>  [2185] 03 00 a8 03 b0 02 00 94 03 c0 02 00 82 02 92 03 00 1e f8 02 00 1a fe 02 #>  [2209] 00 4e 86 02 00 01 82 03 00 25 98 01 00 1e 82 03 00 b6 01 aa 02 00 9a 02 #>  [2233] b6 02 00 52 fa 02 00 6d 8a 03 00 57 86 04 00 93 01 dc 02 00 31 d0 04 00 #>  [2257] 7e f2 03 00 6e ee 03 00 7f 9a 02 00 21 8a 02 00 4a 98 02 00 1a 90 02 00 #>  [2281] 12 ea 02 00 7a dc 01 00 86 02 c8 02 00 e0 01 ea 02 00 62 8e 02 00 54 ac #>  [2305] 01 00 9a 03 ec 01 00 a4 01 fc 01 00 6e 94 03 00 4e 96 03 00 d6 01 b8 03 #>  [2329] 00 78 d2 03 00 86 02 94 03 00 ac 01 c2 02 00 44 94 02 00 ea 01 a6 01 00 #>  [2353] fa 02 96 01 00 ee 02 be 02 00 a4 01 ba 02 00 5c d6 02 00 24 8a 02 00 b2 #>  [2377] 03 f0 01 00 8c 06 8a 04 00 ec 03 e8 03 00 8c 02 c2 01 00 ca 02 e0 01 00 #>  [2401] 86 03 e2 02 00 90 03 86 01 00 d2 04 4a 00 f8 04 b4 01 00 b8 05 9a 02 00 #>  [2425] 9e 04 7a 00 a8 05 13 00 ca 02 0a 00 f4 02 ac 01 00 ec 01 70 00 fe 02 6c #>  [2449] 00 90 03 94 02 00 f8 02 a2 02 00 9e 03 b8 01 00 e0 04 dc 02 00 be 08 c3 #>  [2473] 06 00 f0 01 42 00 3c a8 02 00 ba 02 9a 02 00 8a 03 de 04 00 d2 01 e6 02 #>  [2497] 00 a8 01 e8 01 00 62 f4 02 00 bc 01 96 02 00 6c 78 00 2e e4 01 00 bc 01 #>  [2521] 90 02 00 66 e0 01 00 6c 9a 02 00 ca 02 d4 01 00 94 03 90 01 00 a4 03 08 #>  [2545] 00 8a 02 b9 01 00 da 02 95 03 00 a0 03 f7 02 00 8a 06 a3 04 00 ec 01 75 #>  [2569] 00 3e 81 01 00 00 ad 01 00 d6 01 ad 01 00 f2 0b ef 06 00 98 02 6b 00 d0 #>  [2593] 01 ad 01 00 56 c7 01 00 b4 01 93 01 00 dc 04 cf 01 00 92 03 11 00 8e 02 #>  [2617] 61 00 7c 91 01 00 18 97 01 00 52 a3 01 00 8c 03 7f 00 9c 02 37 00 82 03 #>  [2641] 37 00 b8 04 f5 02 00 94 02 77 00 9a 02 69 00 9e 02 59 00 a2 02 4d 00 a6 #>  [2665] 02 3b 00 a8 02 31 00 aa 02 21 00 ac 02 13 00 ac 02 03 00 ac 02 0c 00 ac #>  [2689] 02 1a 00 aa 02 28 00 a8 02 36 00 f6 02 b8 01 00 fc 02 ac 01 00 82 03 a0 #>  [2713] 01 00 88 03 90 01 00 8c 03 82 01 00 92 03 74 00 94 03 64 00 98 03 56 00 #>  [2737] 9c 03 4a 00 9e 03 3a 00 a0 03 2a 00 a0 03 1c 00 ac 05 8a 08 00 85 09 d4 #>  [2761] 01 00 ed 05 70 00 af 07 98 01 00 e3 15 f2 08 00 cb 03 cc 02 00 a3 07 9a #>  [2785] 06 00 d3 02 e6 03 00 db 01 86 03 00 99 01 ce 02 00 65 88 03 00 4f 98 03 #>  [2809] 00 07 b8 03 00 1e c8 03 00 58 ba 08 00 22 be 03 00 80 01 b2 03 00 60 f2 #>  [2833] 02 00 b8 01 f4 03 00 b8 01 8c 04 00 c0 01 d4 04 00 a2 01 f4 0a 00 41 d0 #>  [2857] 03 00 c9 01 d8 03 00 bb 02 c8 03 00 e9 01 d6 02 00 8f 03 e2 02 00 f7 02 #>  [2881] fa 02 00 e7 0a 9e 09 00 fb 03 cc 03 00 db 11 90 0f 00 f3 04 be 04 00 bb #>  [2905] 08 aa 08 00 d9 01 72 00 83 02 7a 00 c1 01 84 01 00 ab 01 88 01 00 d3 06 #>  [2929] ea 04 00 8d 01 4c 00 75 48 00 0d 0e 00 5d 4c 00 53 56 00 45 28 00 7f 0c #>  [2953] 00 7f 20 00 6b 34 00 71 46 00 5d 46 00 cf 01 88 01 00 a5 01 40 00 91 01 #>  [2977] 56 00 f3 02 c2 01 00 41 18 00 dd 01 74 00 bb 01 3a 00 b7 01 5c 00 a9 02 #>  [3001] ac 01 00 59 44 00 95 01 4a 00 8d 01 62 00 71 60 00 75 6e 00 c5 01 ce 01 #>  [3025] 00 89 01 7c 00 59 46 00 5d 58 00 7f 52 00 ad 01 86 01 00 fd 01 bc 01 00 #>  [3049] 1f 20 00 6d 5c 00 b7 01 64 00 9b 01 6c 00 eb 01 dc 01 00 b1 02 8a 02 00 #>  [3073] 6b 80 01 00 4f 8a 01 00 87 01 b4 01 00 87 01 94 01 00 67 92 01 00 79 a8 #>  [3097] 01 00 41 94 01 00 4f 9c 01 00 29 b6 01 00 71 9e 02 00 95 01 e8 02 00 e1 #>  [3121] 01 9e 03 00 3d a2 01 00 61 b6 01 00 65 8e 01 00 59 8c 01 00 95 01 e0 01 #>  [3145] 00 a3 01 ca 02 00 95 02 e4 02 00 b7 01 ec 01 00 9f 01 b2 02 00 19 38 00 #>  [3169] 2b 64 00 25 34 00 97 01 b4 01 00 a3 01 be 01 00 29 38 00 91 01 9c 01 00 #>  [3193] ad 01 9c 01 00 8d 01 74 00 9f 01 6c 00 9f 01 5e 00 71 40 00 cc 0a e8 29 #>  [3217] 00 f8 03 8e 09 00 e8 02 de 05 00 7c ee 03 00 12 ac 03 00 49 84 04 00 b9 #>  [3241] 01 c4 08 00 99 01 9e 0a 00 87 01 90 0a 00 c3 01 d4 0a 00 51 f8 08 00 ab #>  [3265] 01 b8 08 00 81 01 8c 06 00 83 02 ba 0f 00 cb 01 e8 08 00 a1 01 e8 08 00 #>  [3289] 39 96 05 00 ae 01 ca 04 00 de 01 bc 04 00 d8 03 84 08 00 96 05 92 0b 00 #>  [3313] ac 06 ea 0f 00 b2 06 fa 0d 00 9c 01 ca 04 00 10 cc 02 00 05 36 00 3f b6 #>  [3337] 02 00 57 d8 01 00 9b 01 82 03 00 db 0c 96 28 00 bf 09 f6 1b 00 a7 0e 80 #>  [3361] 2c 00 c9 01 fa 04 00 9b 0e c8 2c 00 f1 05 9e 12 00 87 02 b2 06 00 98 01 #>  [3385] b0 02 00 cc 03 b8 02 00 8c 05 b8 03 00 d4 09 e8 08 00 ea 08 a0 07 00 d8 #>  [3409] 06 be 05 00 ac 0d e2 0b 00 88 0d 9c 0b 00 f8 0d 84 0c 00 f8 0c d4 0a 00 #>  [3433] 1e 1a 00 b8 36 ac 40 00 10 0e 00 a0 05 e6 04 00 b6 0b d4 06 00 cc 04 f4 #>  [3457] 03 00 f8 03 8e 03 00 f0 04 48 00 b6 03 54 00 ec 01 94 01 00 ce 02 a4 04 #>  [3481] 00 c8 02 9e 03 00 d4 04 f4 04 00 fc 02 aa 01 00 48 0e 00 a4 05 96 01 00 #>  [3505] a0 08 bc 01 00 ea 05 98 02 00 86 04 a0 03 00 94 03 e2 03 00 12 1e 00 b8 #>  [3529] 03 ac 05 00 9c 05 be 0f 00 9a 01 da 04 00 59 a2 03 00 cf 01 a4 03 00 03 #>  [3553] b8 02 00 cc 01 8e 05 00 1e 86 05 00 93 01 d0 03 00 a3 02 9c 02 00 db 01 #>  [3577] 84 01 00 4d f6 01 00 18 aa 02 00 b5 01 ee 01 00 f3 01 f0 02 00 81 01 96 #>  [3601] 04 00 81 01 ea 01 00 b1 01 fc 01 00 23 ec 01 00 60 ac 02 00 18 94 02 00 #>  [3625] 3d 90 03 00 10 88 05 00 be 01 b2 08 00 11 ae 02 00 75 ba 02 00 11 dc 02 #>  [3649] 00 8a 01 f4 02 00 bc 01 ee 05 00 8a 01 f0 04 00 8f 01 92 04 00 89 01 9e #>  [3673] 03 00 44 f2 01 00 f4 01 a2 04 00 f2 04 cc 07 00 e2 03 e0 07 00 d6 02 c8 #>  [3697] 04 00 ec 01 b2 03 00 50 ea 01 00 d4 01 c4 01 00 74 d8 02 00 58 ec 02 00 #>  [3721] be 01 de 02 00 dc 02 e6 03 00 c2 03 c2 03 00 be 06 b2 04 00 c0 03 e8 02 #>  [3745] 00 9a 02 f2 02 00 5e a2 02 00 41 f0 02 00 f7 02 cc 06 00 cf 03 8c 08 00 #>  [3769] 9b 01 fe 03 00 d5 01 f6 07 00 08 92 03 00 2a 9a 04 00 0b da 05 00 b6 05 #>  [3793] fa 11 00 3f e4 06 00 bb 01 c2 05 00 d1 02 ea 07 00 e9 02 c6 07 00 eb 02 #>  [3817] f8 08 00 dd 02 a0 08 00 99 03 8a 0b 00 0f ee 02 00 0b d6 04 00 29 d6 03 #>  [3841] 00 43 b2 04 00 43 ea 04 00 fb 01 ba 02 00 89 01 de 03 00 7f 94 02 00 0b #>  [3865] 9e 01 00 4a 80 02 00 6a c0 01 00 b4 01 d2 02 00 4c ec 01 00 01 c4 01 00 #>  [3889] 69 de 01 00 1f a6 02 00 24 62 00 7e 9a 01 00 8e 01 74 00 b0 01 9c 01 00 #>  [3913] c8 01 e4 01 00 52 5c 00 0a 4c 00 09 34 00 35 5c 00 71 7c 00 c7 01 dc 01 #>  [3937] 00 a3 01 b4 01 00 8f 01 36 00 eb 01 0d 00 d3 01 0a 00 77 7c 00 3f 6e 00 #>  [3961] 3d 88 02 00 0b ea 01 00 16 b2 01 00 8e 01 a0 01 00 dc 01 9c 01 00 92 01 #>  [3985] 7e 00 30 70 00 0c da 02 00 16 a4 02 00 34 b2 01 00 08 9e 01 00 19 ea 01 #>  [4009] 00 2a cc 01 00 2c 78 00 0f 86 01 00 2d 6e 00 3f 44 00 d9 01 50 00 e3 02 #>  [4033] 6c 00 89 01 62 00 b3 01 94 02 00 c5 01 ea 01 00 05 b2 01 00 4e b8 01 00 #>  [4057] 36 a8 01 00 0f 80 01 00 3b 66 00 77 7c 00 af 01 94 01 00 dd 01 98 01 00 #>  [4081] 99 02 f2 01 00 a7 01 7e 00 c5 01 84 01 00 8f 01 64 00 ad 02 82 01 00 77 #>  [4105] 86 01 00 08 8e 01 00 44 7c 00 8e 01 4e 00 c4 02 72 00 4e 44 00 26 9e 01 #>  [4129] 00 01 86 01 00 31 90 01 00 45 66 00 29 f4 01 00 35 f2 02 00 1f b8 02 00 #>  [4153] 37 8c 02 00 23 d4 01 00 20 be 01 00 92 01 92 01 00 dc 01 be 01 00 b6 01 #>  [4177] 30 00 dc 01 46 00 84 01 64 00 34 b0 01 00 90 01 8a 03 00 5c aa 01 00 40 #>  [4201] 4e 00 80 01 4e 00 76 52 00 94 01 60 00 62 44 00 7a 3a 00 72 0c 00 94 01 #>  [4225] 13 00 86 01 2d 00 d0 01 07 00 8e 01 02 00 66 5c 00 1c 66 00 16 b4 03 00 #>  [4249] 36 56 00 b0 01 0e 00 7c 17 00 76 3c 00 44 6c 00 06 94 03 00 0e 8e 01 00 #>  [4273] 84 01 88 01 00 c4 01 44 00 c4 01 24 00 f6 01 34 00 94 01 1f 00 86 01 5b #>  [4297] 00 80 01 59 00 9e 01 a5 01 00 86 01 13 00 4e 44 00 3a 56 00 0c 8a 03 00 #>  [4321] fa 02 96 03 00 92 01 88 01 00 76 ce 01 00 92 01 8a 01 00 76 92 01 00 18 #>  [4345] 6a 00 21 9c 01 00 0b 96 01 00 3c 9a 01 00 6e 46 00 94 01 0e 00 9a 01 20 #>  [4369] 00 78 5c 00 38 ba 01 00 0f 94 01 00 77 a8 02 00 1d d6 01 00 42 e0 01 00 #>  [4393] 7c 68 00 a2 01 5e 00 fa 01 56 00 56 84 01 00 12 98 01 00 85 01 2c 00 e5 #>  [4417] 01 13 00 f7 01 9f 01 00 ad 01 01 00 57 6e 00 26 98 01 00 be 01 88 02 00 #>  [4441] 68 54 00 96 01 ba 03 00 7c 88 02 00 1d 6e 00 91 01 96 01 00 1d 82 01 00 #>  [4465] 38 84 01 00 86 07 9a 06 00 e4 04 8e 03 00 b4 02 28 00 fa 01 65 00 7e 5b #>  [4489] 00 b6 01 1c 00 86 01 42 00 68 84 01 00 27 d8 01 00 08 d6 01 00 7a e4 02 #>  [4513] 00 00 68 00 c7 02 f2 01 00 4d d6 01 00 57 b2 01 00 4d d6 01 00 1f f4 01 #>  [4537] 00 01 aa 02 00 13 9e 01 00 12 7a 00 97 02 2e 00 2f 70 00 12 96 01 00 82 #>  [4561] 02 88 02 00 a2 01 88 02 00 1d 94 01 00 d7 01 c8 01 00 a3 01 2e 00 ff 01 #>  [4585] 35 00 e9 01 02 00 7d 94 01 00 a1 01 dc 01 00 17 ae 02 00 3b 96 01 00 91 #>  [4609] 01 f0 01 00 1d 98 01 00 31 c8 02 00 9b 01 88 01 00 d3 01 10 00 81 02 c5 #>  [4633] 01 00 99 01 13 00 9b 04 94 02 00 7d 70 00 31 c4 01 00 7d a6 01 00 7d 2e #>  [4657] 00 85 01 2f 00 ab 01 83 01 00 c1 01 06 00 c1 01 d8 01 00 4d c4 01 00 3b #>  [4681] f2 01 00 7f 9a 02 00 4d d6 01 00 01 b0 01 00 e9 03 2c 00 ab 02 66 00 a1 #>  [4705] 02 84 02 00 a1 02 96 02 00 93 01 f6 02 00 1d b0 01 00 87 01 40 00 8f 01 #>  [4729] 01 00 c9 01 5d 00 b1 02 43 00 e5 01 01 00 d3 01 1a 00 b7 01 d8 01 00 75 #>  [4753] c4 01 00 e5 01 2c 00 b3 02 94 01 00 4d 82 01 00 4f ac 01 00 3b c4 01 00 #>  [4777] 61 94 01 00 a1 02 f2 01 00 b5 01 2f 00 8f 01 01 00 a3 01 2e 00 7d 82 01 #>  [4801] 00 73 82 01 00 83 02 c2 01 00 b5 02 e8 01 00 87 01 5c 00 e7 01 d4 01 00 #>  [4825] 69 40 00 89 03 2f 00 bf 01 5c 00 8f 01 82 01 00 6b c4 01 00 87 01 d6 01 #>  [4849] 00 9b 01 9a 02 00 9b 02 cc 05 00 9b 01 f6 02 00 45 ac 02 00 01 d6 01 00 #>  [4873] 4a 86 02 00 98 01 72 00 dc 01 84 01 00 04 f4 01 00 cd 01 e8 03 00 df 02 #>  [4897] ca 05 00 57 a4 02 00 44 98 02 00 80 01 b4 02 00 1d aa 01 00 cf 04 a0 02 #>  [4921] 00 83 02 98 01 00 49 ee 01 00 01 a6 02 00 48 9a 01 00 d4 02 ac 02 00 38 #>  [4945] aa 01 00 6b 88 06 00 e9 01 f8 02 00 99 01 80 01 00 c3 01 10 00 b7 01 27 #>  [4969] 00 f9 04 a9 03 00 7b 12 00 3b 3c 00 b5 06 ae 06 00 81 04 c8 05 00 91 02 #>  [4993] fc 02 00 29 7a 00 01 b6 01 00 a9 04 c6 06 00 26 9a 01 00 68 a0 02 00 b2 #>  [5017] 01 7c 00 a0 01 6a 00 60 cc 02 00 20 f0 01 00 23 e4 01 00 26 a8 01 00 ac #>  [5041] 01 fe 01 00 34 7c 00 35 88 01 00 f9 02 9e 04 00 2f d0 01 00 4e 9c 01 00 #>  [5065] c6 01 a2 01 00 20 d6 01 00 2f aa 01 00 b1 0c cc 06 00 3d 5a 00 06 42 00 #>  [5089] 88 01 94 03 00 00 6e 00 97 01 80 04 00 12 a2 01 00 9c 03 de 08 00 0b a0 #>  [5113] 01 00 c3 03 b2 08 00 c9 01 92 04 00 8e 06 f0 03 00 f6 05 c6 06 00 64 88 #>  [5137] 01 00 d6 03 ae 0a 00 7c c2 03 00 74 96 0f 00 06 46 00 0a 80 01 00 1c f6 #>  [5161] 02 00 30 a4 04 00 d6 06 b6 02 00 76 a4 05 00 2a 98 04 00 6a ee 05 00 67 #>  [5185] f4 01 00 0b a8 01 00 d0 04 d4 0a 00 1e ac 01 00 35 5e 00 55 48 00 b3 03 #>  [5209] c4 02 00 3f 6c 00 1d de 01 00 01 8a 02 00 3a 64 00 9a 02 b2 01 00 64 94 #>  [5233] 01 00 ea 01 ac 05 00 06 12 00 ca 01 80 04 00 9a 01 a4 01 00 d8 03 ec 02 #>  [5257] 00 92 02 92 03 00 5a 5c 00 d4 03 d4 02 00 98 02 9e 03 00 84 01 6e 00 ce #>  [5281] 04 f2 07 00 7a 9c 01 00 47 ca 02 00 0a 88 01 00 f2 03 bc 04 00 72 d6 01 #>  [5305] 00 fa 02 8c 02 00 6e b8 01 00 8e 01 ec 02 00 9a 07 96 05 00 f0 03 ba 02 #>  [5329] 00 a2 02 14 00 ce 06 7f 00 e4 04 55 00 be 05 69 00 ec 04 43 00 f8 01 4d #>  [5353] 00 c2 06 a9 04 00 ec 01 a9 01 00 b6 02 31 00 92 03 0c 00 c8 01 1a 00 ce #>  [5377] 05 a4 02 00 92 08 8e 02 00 86 02 68 00 fc 01 ba 01 00 b6 04 a2 04 00 c4 #>  [5401] 04 d4 04 00 7c aa 01 00 a6 04 a2 06 00 a4 03 ea 04 00 f0 01 ba 02 00 9e #>  [5425] 01 72 00 fa 12 f4 02 00 fc 03 8c 01 00 f0 07 a8 02 00 86 02 14 00 b6 01 #>  [5449] 45 00 9c 06 f5 04 00 4a c5 01 00 14 b3 01 00 22 69 00 96 01 15 00 ca 01 #>  [5473] 2f 00 a4 01 4b 00 88 01 7f 00 48 8f 01 00 4c 95 01 00 8a 07 dd 06 00 e0 #>  [5497] 01 7b 00 cc 05 3b 00 d4 0c 71 00 88 01 27 00 84 01 4b 00 72 7f 00 64 af #>  [5521] 01 00 10 9d 02 00 2f c1 02 00 11 cf 04 00 34 e5 03 00 3e 9d 01 00 aa 01 #>  [5545] 75 00 b0 02 65 00 96 01 27 00 a6 01 95 01 00 5a 35 00 ea 01 02 00 c4 08 #>  [5569] c2 01 00 f8 02 74 00 ca 09 35 00 dc 01 07 00 7e 20 00 1a 90 01 00 39 fe #>  [5593] 01 00 3d a8 01 00 01 b4 01 00 96 01 24 00 e0 01 07 00 9e 01 5c 00 ca 01 #>  [5617] a0 02 00 ca 02 f0 01 00 fe 02 96 01 00 9a 01 49 00 b0 03 b9 01 00 b2 01 #>  [5641] 33 00 ca 03 1a 00 86 04 ac 01 00 f4 02 8e 02 00 ae 02 94 02 00 96 02 e0 #>  [5665] 01 00 32 98 01 00 25 92 01 00 d1 01 dc 03 00 1d 98 01 00 2e be 01 00 9e #>  [5689] 01 da 01 00 28 ba 01 00 0b 80 02 00 3c a0 01 00 96 01 4a 00 da 02 10 00 #>  [5713] b6 04 51 00 d4 03 0c 00 fe 02 62 00 5e 0e 00 46 0b 00 c2 04 c9 08 00 da #>  [5737] 03 dd 07 00 4c 5f 00 d4 01 3d 00 b6 01 45 00 80 01 9f 01 00 44 af 01 00 #>  [5761] 22 5f 00 b0 02 3b 00 6c 15 00 70 73 00 7c 91 01 00 ac 02 a3 01 00 80 02 #>  [5785] 19 00 5e 5c 00 72 dc 01 00 62 72 00 36 00 00 40 35 00 84 02 a7 04 00 36 #>  [5809] 23 00 3c 25 00 ba 02 31 00 aa 01 6f 00 e8 01 07 00 f6 03 14 00 d2 01 0d #>  [5833] 00 de 02 39 00 8c 02 0c 00 a0 02 36 00 c8 02 30 00 ce 02 12 00 6a 1d 00 #>  [5857] 82 01 41 00 90 01 89 01 00 20 6f 00 46 6f 00 74 85 01 00 70 15 00 7c 2b #>  [5881] 00 56 43 00 dc 02 e5 02 00 b8 03 f9 02 00 86 02 df 01 00 de 01 9b 01 00 #>  [5905] 90 02 7d 00 fe 02 47 00 d6 02 7d 00 da 02 83 01 00 9a 03 8d 01 00 98 02 #>  [5929] ad 01 00 36 4d 00 da 01 81 03 00 68 41 00 de 01 41 00 9a 04 3f 00 44 00 #>  [5953] 00 ce 02 ba 02 00 50 b2 02 00 48 a0 03 00 4e a4 03 00 a4 02 d8 02 00 bc #>  [5977] 02 f8 01 00 94 01 d0 03 00 24 8e 03 00 99 01 f2 02 00 af 02 f0 02 00 cb #>  [6001] 03 f6 02 00 f3 04 de 03 00 b1 03 b8 03 00 c7 01 ba 02 00 13 8c 03 00 12 #>  [6025] a8 04 00 1f fc 05 00 31 ba 07 00 5b f8 06 00 d3 01 a8 0b 00 67 8c 06 00 #>  [6049] 99 01 9e 05 00 d3 01 9c 06 00 99 02 9c 07 00 b3 03 e2 08 00 ff 02 92 07 #>  [6073] 00 78 d0 06 00 05 82 03 00 fa 09 90 21 00 8e 0d b6 25 00 b2 07 96 15 00 #>  [6097] ee 01 fe 0d 00 90 02 a2 0c 00 94 01 92 08 00 d0 01 dc 06 00 84 01 a4 04 #>  [6121] 00 ea 03 cc 0a 00 f2 03 a0 08 00 e8 03 8e 08 00 c8 03 82 07 00 ce 06 ec #>  [6145] 02 00 f6 05 4d 00 b2 05 85 03 00 ba 01 86 01 00 fe 04 d6 03 00 d6 06 88 #>  [6169] 05 00 8a 06 86 05 00 ce 03 b4 05 00 9c 01 d2 05 00 2d ec 04 00 cf 01 9c #>  [6193] 04 00 4e d6 03 00 b8 01 92 04 00 cc 01 ce 05 00 a0 01 de 04 00 a0 02 92 #>  [6217] 06 00 4f 90 04 00 bf 01 a4 03 00 8b 02 d2 04 00 71 fe 04 00 83 01 f8 04 #>  [6241] 00 c9 02 90 06 00 d9 03 a6 06 00 8b 02 b2 04 00 fb 02 f0 02 00 a3 06 ce #>  [6265] 06 00 db 04 ec 05 00 ad 02 ae 04 00 8d 02 b2 05 00 ad 02 f4 06 00 cb 05 #>  [6289] f6 07 00 d9 04 a4 07 00 e1 02 ca 05 00 cf 02 a0 05 00 c9 03 fc 05 00 b5 #>  [6313] 04 d6 03 00 bf 05 9c 05 00 b1 02 f0 03 00 65 cc 03 00 0d b0 04 00 1d 8e #>  [6337] 07 00 32 b4 07 00 b6 01 96 08 00 f4 02 94 08 00 b2 01 f8 06 00 4d e6 02 #>  [6361] 00 c7 02 f2 01 00 91 03 94 01 00 89 05 e6 02 00 8d 07 ae 03 00 99 08 e4 #>  [6385] 02 00 a9 07 9c 02 00 9f 06 a4 02 00 a7 07 ba 01 00 d5 06 4b 00 9b 04 48 #>  [6409] 00 97 03 be 02 00 fd 03 f2 03 00 fd 03 ba 05 00 e1 03 ea 04 00 af 03 cc #>  [6433] 01 00 b5 03 4b 00 df 02 f1 01 00 97 03 df 03 00 fd 03 f7 03 00 97 03 c1 #>  [6457] 03 00 e7 01 c1 03 00 5f f7 03 00 41 8f 05 00 80 01 ab 06 00 f2 01 9d 06 #>  [6481] 00 92 01 a5 05 00 3d a3 04 00 d1 02 f1 02 00 9f 06 a3 03 00 e9 07 a7 04 #>  [6505] 00 9f 0b cb 04 00 cf 06 81 02 00 e3 03 b6 01 00 b1 02 d2 03 00 fd 01 92 #>  [6529] 03 00 af 01 d2 03 00 a1 02 96 01 00 9f 04 62 00 9f 02 6c 00 eb 04 9a 02 #>  [6553] 00 b7 03 c0 01 00 a7 01 8a 03 00 cd 02 d0 03 00 ab 04 c4 04 00 ed 02 ee #>  [6577] 03 00 bb 01 d6 03 00 19 c2 03 00 7d e2 02 00 8d 02 84 02 00 f1 01 b2 02 #>  [6601] 00 01 1c 00 1b a6 02 00 d2 01 d6 03 00 84 02 98 05 00 80 03 80 05 00 e4 #>  [6625] 01 8e 04 00 19 bc 01 00 8f 01 a6 01 00 9b 03 fc 02 00 f7 03 da 02 00 97 #>  [6649] 05 ca 03 00 fd 01 76 00 e1 01 8e 02 00 4f a6 02 00 2a fc 02 00 38 f2 01 #>  [6673] 00 07 d4 03 00 67 fc 02 00 f7 02 e0 02 00 fb 04 1e 00 b1 05 41 00 ad 06 #>  [6697] a7 01 00 fd 05 cf 03 00 91 05 b3 03 00 fb 02 29 00 bf 02 b0 02 00 7d ee #>  [6721] 03 00 47 9a 06 00 b5 03 ba 09 00 99 01 94 03 00 cd 02 88 03 00 f3 01 d0 #>  [6745] 02 00 a3 02 98 02 00 9b 02 e0 01 00 a1 02 56 00 9b 06 25 00 fb 02 bb 01 #>  [6769] 00 af 02 e3 01 00 f7 0a a5 04 00 28 8b 02 00 76 c1 02 00 e4 03 af 03 00 #>  [6793] c2 03 df 02 00 b4 02 c5 01 00 86 01 c1 01 00 1a b9 01 00 2f a9 01 00 ab #>  [6817] 01 d3 02 00 f1 02 d5 02 00 a3 03 87 02 00 a1 08 93 03 00 b5 07 e7 01 00 #>  [6841] 89 02 27 00 91 03 36 00 ad 04 74 00 af 03 c0 02 00 fb 02 f8 02 00 ef 04 #>  [6865] de 05 00 e9 01 ba 02 00 20 aa 02 00 08 ca 01 00 d5 01 b4 01 00 bb 02 02 #>  [6889] 00 ad 03 97 01 00 b5 05 bf 03 00 db 01 bb 02 00 3f b3 02 00 46 cb 02 00 #>  [6913] c0 01 a9 04 00 e4 03 9b 07 00 aa 01 b5 02 00 03 f1 02 00 b7 01 f1 06 00 #>  [6937] 83 06 a3 07 00 e1 02 ab 01 00 ef 03 f7 01 00 8d 04 13 00 c5 03 1c 00 83 #>  [6961] 04 f4 01 00 93 03 ec 02 00 cd 02 ee 03 00 95 01 ce 03 00 1e 96 04 00 9e #>  [6985] 01 fe 03 00 e6 01 a4 04 00 86 02 c6 03 00 e0 01 ae 05 00 a6 02 c4 04 00 #>  [7009] aa 02 98 04 00 16 8a 02 00 85 02 9e 03 00 ff 02 98 02 00 eb 03 96 02 00 #>  [7033] ab 05 de 03 00 8d 04 fa 03 00 f9 01 98 02 00 9d 03 90 01 00 91 05 ee 02 #>  [7057] 00 99 06 d6 03 00 df 02 e6 02 00 bf 09 96 04 00 d1 06 f8 03 00 f7 07 8c #>  [7081] 0b 00 be 04 8e 03 00 92 04 e6 03 00 ee 05 90 05 00 da 06 ac 07 00 ea 05 #>  [7105] a0 06 00 fc 05 9a 07 00 aa 05 a2 07 00 b6 03 9a 06 00 a6 04 ec 08 00 88 #>  [7129] 05 ae 09 00 f6 03 86 08 00 9e 04 be 07 00 be 04 f2 07 00 84 05 a0 09 00 #>  [7153] aa 04 f4 07 00 aa 04 cc 08 00 82 04 ba 06 00 f2 02 e0 04 00 b4 02 f6 04 #>  [7177] 00 12 fc 05 00 5f ae 06 00 59 b2 06 00 55 a6 03 00 55 bc 03 00 b1 01 a0 #>  [7201] 09 00 fd 01 9a 0a 00 87 02 d0 0a 00 d1 02 8a 0d 00 c3 01 f6 08 00 77 ca #>  [7225] 08 00 7f ce 0b 00 49 88 09 00 1f e2 0a 00 1b 9c 0a 00 63 b8 0a 00 11 f2 #>  [7249] 02 00 31 9e 08 00 0a cc 0a 00 d0 01 d0 0a 00 ce 02 e6 06 00 da 01 ac 04 #>  [7273] 00 96 03 c6 04 00 8a 02 e8 02 00 9c 04 86 03 00 f6 03 b6 02 00 c6 05 ee #>  [7297] 02 00 a4 07 86 03 00 f2 09 c2 04 00 ee 09 b0 03 00 e6 09 c0 02 00 a4 01 #>  [7321] 8e 01 00 54 da 01 00 22 9e 03 00 18 c0 07 00 90 02 92 13 00 b6 01 e8 03 #>  [7345] 00 f8 01 90 01 00 dc 12 d4 04 00 da 0a fa 02 00 d8 08 b0 02 00 b0 11 b2 #>  [7369] 04 00 8c 13 96 05 00 d6 03 7a 00 ac 10 a2 04 00 c8 06 dc 01 00 e8 03 d4 #>  [7393] 08 00 96 06 bc 0c 00 bc 05 ee 11 00 06 10 00 f0 06 c6 12 00 d6 07 a4 13 #>  [7417] 00 e8 09 a6 1a 00 b4 04 e4 0a 00 be 03 c4 08 00 86 0a e4 18 00 d4 01 b4 #>  [7441] 04 00 cc 0a 92 1c 00 f6 08 f8 14 00 f8 08 c0 16 00 be 01 de 03 00 88 02 #>  [7465] 98 05 00 ec 08 94 17 00 a0 0c e0 1f 00 ca 09 b2 19 00 9a 09 90 17 00 f2 #>  [7489] 06 ac 10 00 be 06 c4 10 00 ea 05 e0 0e 00 88 05 f6 0c 00 d2 03 cc 0b 00 #>  [7513] c2 02 de 05 00 2d ca 6c 00 97 08 c0 03 00 c9 0c 8e 06 00 dd 0c 98 05 00 #>  [7537] cf 0e ee 06 00 ff 0d de 06 00 8f 13 c8 07 00 d1 03 f4 01 00 ef 08 d4 04 #>  [7561] 00 e5 08 d4 04 00 a1 0e e2 06 00 8b 10 84 08 00 8f 0d c2 06 00 f9 0d b0 #>  [7585] 07 00 d9 09 fa 04 00 ff 09 a4 05 00 b5 09 a6 04 00 a5 08 d6 02 00 e3 06 #>  [7609] 5e 00 c9 07 a1 01 00 d9 06 dd 01 00 ed 03 38 00 f5 01 80 02 00 39 90 02 #>  [7633] 00 2c b0 03 00 b2 01 d8 04 00 e8 01 bc 07 00 d4 01 a6 07 00 ea 02 a0 09 #>  [7657] 00 68 b2 05 00 02 ec 05 00 20 88 07 00 55 c8 06 00 ed 01 9e 06 00 a9 02 #>  [7681] 84 05 00 ad 02 84 05 00 57 f0 03 00 8a 01 c6 02 00 9e 02 d0 03 00 84 04 #>  [7705] c8 05 00 ea 03 a8 06 00 ec 01 a4 04 00 05 84 04 00 87 01 c8 02 00 f3 01 #>  [7729] 84 03 00 bf 02 94 04 00 d3 03 ca 03 00 9b 02 8c 03 00 f3 01 e0 03 00 a5 #>  [7753] 02 dc 04 00 89 01 fe 03 00 03 d4 03 00 a4 02 c4 03 00 96 02 7a 00 c2 03 #>  [7777] 92 02 00 7a de 01 00 99 01 de 01 00 c3 02 da 02 00 8b 03 a8 03 00 87 02 #>  [7801] e0 03 00 b5 01 f2 04 00 2b 8a 05 00 43 d6 04 00 93 01 d4 04 00 17 fe 03 #>  [7825] 00 b0 01 d8 02 00 ee 02 f6 01 00 b4 04 94 03 00 a8 07 e0 03 00 d2 04 f0 #>  [7849] 01 00 bc 06 c6 03 00 d8 03 c0 03 00 b0 01 ce 03 00 25 bc 03 00 2b b6 03 #>  [7873] 00 b7 01 de 03 00 83 05 ea 04 00 e3 02 94 04 00 2f b6 04 00 3f f8 04 00 #>  [7897] 9e 02 8e 05 00 de 04 c6 06 00 de 03 e6 06 00 92 03 8e 07 00 ae 02 b2 03 #>  [7921] 00 b6 03 52 00 e4 03 db 01 00 be 04 cd 01 00 92 06 9d 01 00 98 05 99 02 #>  [7945] 00 d2 08 85 01 00 a2 0a 28 00 f8 07 0d 00 b2 03 98 01 00 e0 01 c8 02 00 #>  [7969] 2a d8 03 00 05 92 05 00 35 fc 05 00 14 d0 06 00 76 a8 04 00 bc 02 8e 04 #>  [7993] 00 fc 02 92 02 00 94 04 a0 01 00 90 05 78 00 86 03 f8 01 00 c8 02 c2 02 #>  [8017] 00 8e 01 94 03 00 aa 02 84 03 00 fc 01 a2 03 00 12 1e 00 a2 04 fa 08 00 #>  [8041] d8 04 c0 07 00 8c 03 dc 04 00 ae 02 e8 04 00 0e 1e 00 30 d0 03 00 87 01 #>  [8065] fc 02 00 87 02 ba 03 00 83 04 da 04 00 eb 01 92 04 00 1d 94 05 00 07 ac #>  [8089] 05 00 a3 01 9c 06 00 ab 03 bc 06 00 ed 02 f8 04 00 b3 02 fa 04 00 37 ac #>  [8113] 03 00 94 02 b4 02 00 c2 04 ca 03 00 d0 07 da 05 00 b8 06 e0 02 00 ba 05 #>  [8137] cc 01 00 e8 02 da 02 00 b0 01 a8 03 00 84 01 96 04 00 f4 02 d6 05 00 d8 #>  [8161] 03 fc 03 00 8a 02 9e 02 00 a6 05 94 06 00 44 aa 05 00 e1 01 b6 07 00 d1 #>  [8185] 01 dc 05 00 1a a0 05 00 02 c8 05 00 59 d4 06 00 e7 01 9e 08 00 ad 02 b0 #>  [8209] 07 00 ff 02 8a 08 00 df 04 d4 06 00 b9 05 96 06 00 d9 03 f0 04 00 f3 01 #>  [8233] 82 03 00 6a d6 02 00 f6 02 c4 02 00 86 03 d8 02 00 94 01 98 03 00 4d a2 #>  [8257] 05 00 02 a8 06 00 a1 01 b4 05 00 04 98 04 00 12 a0 05 00 96 01 fc 02 00 #>  [8281] b1 01 2f 00 f3 03 8f 01 00 cb 03 e9 01 00 af 02 83 03 00 d5 01 a7 06 00 #>  [8305] 5d 8b 04 00 d7 02 a1 05 00 b3 03 ab 03 00 eb 03 91 03 00 db 04 93 01 00 #>  [8329] 9f 06 58 00 9d 05 c0 02 00 93 05 fa 02 00 fb 05 c8 01 00 dd 07 f0 01 00 #>  [8353] eb 06 d2 01 00 f9 05 54 00 d1 03 73 00 89 02 89 03 00 8f 03 99 02 00 83 #>  [8377] 07 a7 01 00 a1 04 7f 00 b5 03 93 02 00 b9 01 a1 03 00 79 d3 04 00 8d 01 #>  [8401] 97 03 00 dd 04 d1 02 00 8f 05 3f 00 ab 05 55 00 bf 03 95 01 00 a9 02 cb #>  [8425] 02 00 ab 01 9d 03 00 9f 01 c9 03 00 a5 02 ef 02 00 b9 03 8d 02 00 e5 03 #>  [8449] 45 00 ad 04 40 00 ff 02 7e 00 b5 03 95 01 00 87 03 a1 03 00 85 03 a1 02 #>  [8473] 00 f3 02 11 00 cf 02 17 00 f9 01 5f 00 23 d3 01 00 78 e9 04 00 46 e7 02 #>  [8497] 00 17 df 02 00 54 95 03 00 e2 01 f9 02 00 a4 01 a5 03 00 ed 01 cb 02 00 #>  [8521] e9 03 a5 01 00 ad 04 40 00 83 04 5c 00 cd 02 53 00 c3 02 fb 01 00 85 01 #>  [8545] 9b 03 00 33 8b 03 00 c7 02 bd 02 00 f3 07 e1 03 00 c5 0e e1 07 00 d5 0a #>  [8569] ad 07 00 c7 0b c7 0a 00 f1 07 ad 08 00 bd 08 8f 08 00 f7 07 f3 06 00 a7 #>  [8593] 09 cb 07 00 a7 0c 97 09 00 d1 07 ef 07 00 87 05 e3 03 00 d3 05 f3 02 00 #>  [8617] a9 06 d7 02 00 bd 07 af 01 00 c1 06 cd 01 00 bf 0d 99 01 00 bf 0d cf 01 #>  [8641] 00 bd 05 6b 00 c1 03 18 00 81 03 9e 02 00 e1 0a e8 09 00 81 0a e2 08 00 #>  [8665] 89 08 ac 07 00 97 03 8a 01 00 9b 03 42 00 af 05 7f 00 b5 0a b5 05 00 6b #>  [8689] 9a 02 00 b1 07 ff 01 00 93 08 cc 05 00 b9 01 80 01 00 d9 07 ea 05 00 89 #>  [8713] 07 b8 04 00 9f 0c 86 06 00 af 0a cc 04 00 df 0c ae 05 00 e5 0e ae 06 00 #>  [8737] f3 0e 82 06 00 d7 48 e2 1b 00 bb 6b f8 28 00 c1 45 8a 1b 00 b7 33 92 14 #>  [8761] 00 a1 6e c5 07 00 c5 53 9d 05 00 af 10 61 00 c9 0a 77 00 ad 06 3a 00 d5 #>  [8785] 04 be 01 00 a1 06 a8 03 00 93 0c bc 06 00 93 11 d4 09 00 85 22 be 11 00 #>  [8809] b1 20 ae 11 00 c9 32 b8 19 00 af 4a d6 27 00 f1 1e a9 27 00 8d 02 17 00 #>  [8833] fd 11 98 09 00 d7 0d d8 07 00 bf 11 cc 08 00 bd 06 a8 03 00 b9 02 90 02 #>  [8857] 00 c1 01 c6 05 00 bd 02 9c 0a 00 c9 04 f0 13 00 97 03 0a 00 ef 03 42 00 #>  [8881] cf 02 6a 00 d5 04 e0 02 00 df 04 d2 02 00 cb 04 e4 02 00 ff 04 c4 01 00 #>  [8905] 87 05 0f 00 9b 04 0d 00 d3 04 28 00 8b 06 56 00 e1 06 39 00 ab 03 b5 01 #>  [8929] 00 ef 01 c1 02 00 6d 95 04 00 92 01 c9 05 00 8e 01 85 04 00 89 01 a7 03 #>  [8953] 00 cd 02 87 02 00 db 04 bb 01 00 dd 04 01 00 a5 05 c8 01 00 97 03 80 02 #>  [8977] 00 a7 02 a8 03 00 9f 02 ee 04 00 a7 02 c6 02 00 ff 03 a6 01 00 81 03 99 #>  [9001] 01 00 db 01 a1 03 00 67 87 04 00 43 e3 04 00 f5 02 f3 03 00 85 05 d5 02 #>  [9025] 00 df 05 b1 02 00 9b 05 a7 03 00 e9 05 cf 01 00 bb 04 32 00 f5 03 8c 01 #>  [9049] 00 e7 04 c6 01 00 8f 03 f8 02 00 f3 01 fc 03 00 39 86 02 00 70 f4 02 00 #>  [9073] 5c ce 03 00 5f da 01 00 b3 02 aa 01 00 9f 04 42 00 ef 03 a3 01 00 cd 01 #>  [9097] c9 02 00 bd 01 e1 03 00 75 a7 04 00 17 a1 04 00 43 8b 03 00 7a a3 05 00 #>  [9121] 96 02 8f 04 00 e6 03 fd 02 00 9e 01 93 02 00 3d cb 03 00 3d ed 03 00 af #>  [9145] 02 eb 02 00 ad 03 6f 00 bb 03 1a 00 d9 03 96 01 00 97 04 e0 01 00 f1 04 #>  [9169] 8e 01 00 cb 04 b2 01 00 bd 03 86 01 00 93 03 72 00 cf 01 43 00 ad 01 37 #>  [9193] 00 e1 01 f5 01 00 cd 01 e5 02 00 93 01 f9 02 00 08 cf 03 00 4f 9b 05 00 #>  [9217] 00 c5 05 00 0f c1 04 00 ab 02 9b 03 00 a3 03 ed 01 00 fb 04 b5 02 00 8b #>  [9241] 05 cb 01 00 db 05 89 01 00 9d 06 57 00 df 06 db 01 00 8f 06 45 00 fd 04 #>  [9265] 03 00 9e 01 9f 07 00 ee 02 b7 01 00 e0 02 a7 03 00 d4 02 b5 03 00 42 53 #>  [9289] 00 ee 03 91 02 00 8e 05 c3 01 00 a6 05 5f 00 82 06 66 00 c4 06 46 00 e2 #>  [9313] 06 21 00 fe 02 af 04 00 9d 01 e1 02 00 d7 02 a3 01 00 c7 06 85 02 00 bd #>  [9337] 02 e9 02 00 ed 03 d7 02 00 db 03 a7 02 00 8f 04 d1 01 00 ab 04 c7 01 00 #>  [9361] 93 04 95 02 00 d1 01 a7 02 00 57 d7 02 00 04 a9 03 00 4e 87 03 00 ba 02 #>  [9385] 8d 02 00 c2 03 55 00 c2 03 19 00 ae 05 1b 00 8a 05 49 00 a0 03 6f 00 d2 #>  [9409] 01 99 02 00 46 85 03 00 0b e9 02 00 73 cd 02 00 d1 01 ad 02 00 8f 02 f1 #>  [9433] 01 00 81 03 a7 01 00 ad 03 8d 01 00 8b 04 2d 00 85 0d cf 23 00 eb 01 81 #>  [9457] 05 00 b9 1c e1 4a 00 8f 15 8b 39 00 97 01 5d 00 b7 45 8d 1f 00 d1 27 e1 #>  [9481] 11 00 c1 5d 97 28 00 e3 ad 01 91 41 00 eb 01 9e 01 00 b1 07 90 05 00 e3 #>  [9505] 04 ba 03 00 b7 02 be 01 00 a3 02 e6 01 00 d5 02 ba 01 00 bb 02 b8 01 00 #>  [9529] 87 03 f8 01 00 af 06 b0 03 00 fd 07 f2 02 00 e9 05 f2 01 00 dd 01 56 00 #>  [9553] d9 01 3e 00 f9 01 40 00 91 01 00 00 b7 01 2d 00 c9 01 47 00 fb 08 fd 04 #>  [9577] 00 85 04 e1 02 00 c5 01 77 00 cf 01 8b 01 00 bd 03 95 04 00 fd 01 b3 02 #>  [9601] 00 f3 01 a1 02 00 df 02 8f 03 00 83 04 fd 04 00 e3 06 cf 08 00 df 05 ef #>  [9625] 07 00 8f 0b d9 10 00 85 0c ad 12 00 85 09 f5 0d 00 eb 07 e7 0c 00 b9 09 #>  [9649] bb 0b 00 a3 0e bb 0f 00 b3 06 b7 06 00 b9 04 b8 03 00 c5 02 cc 01 00 81 #>  [9673] 02 ee 02 00 1e 8a 03 00 06 b8 02 00 bd 01 dc 02 00 93 03 ee 02 00 bb 03 #>  [9697] 86 01 00 bf 06 1f 00 89 06 49 00 8b 04 47 00 df 01 d7 01 00 b9 02 9b 04 #>  [9721] 00 eb 01 ef 03 00 c5 01 ed 05 00 34 f7 03 00 90 01 e1 03 00 6d 9b 03 00 #>  [9745] 8f 02 f5 01 00 c7 04 b9 02 00 a5 04 d7 02 00 a9 03 a5 04 00 93 02 83 03 #>  [9769] 00 79 a3 05 00 1f bd 05 00 ad 01 d5 05 00 a3 02 df 05 00 bf 02 c9 05 00 #>  [9793] bf 03 ed 05 00 a9 03 f5 03 00 e5 03 9b 05 00 b7 02 9f 06 00 d3 03 91 09 #>  [9817] 00 ef 03 eb 09 00 ff 04 ad 0c 00 e5 0e c7 23 00 bd 0c 95 22 00 db 0e cd #>  [9841] 2d 00 b3 07 8f 12 00 97 06 d3 11 00 c5 06 93 13 00 f3 05 a9 13 00 d5 04 #>  [9865] bf 11 00 a3 04 99 0a 00 ad 02 cb 05 00 95 03 b3 01 00 e7 03 96 01 00 f7 #>  [9889] 02 d2 02 00 91 03 fc 01 00 91 03 6b 00 e9 02 8d 02 00 57 fd 01 00 d8 01 #>  [9913] a1 02 00 98 02 81 02 00 b0 01 b7 01 00 a6 01 c5 01 00 07 e5 01 00 dd 02 #>  [9937] 15 00 d9 02 36 00 d7 04 06 00 91 04 35 00 fd 02 8d 01 00 e7 02 99 03 00 #>  [9961] e9 01 a1 03 00 e3 02 af 02 00 fb 04 d7 02 00 95 04 22 00 83 04 7c 00 87 #>  [9985] 04 16 00 81 05 a7 01 00 fb 03 f7 01 00 f1 04 d5 01 00 a7 05 73 00 c1 05 #> [10009] b8 01 00 8d 04 86 02 00 bb 04 c6 04 00 e3 03 e4 03 00 a3 05 ca 04 00 99 #> [10033] 06 dc 05 00 b1 04 9c 04 00 c7 03 82 03 00 d5 03 fc 01 00 cd 04 44 00 b5 #> [10057] 04 5f 00 ef 08 b9 03 00 e1 0b 83 05 00 d5 0b 8d 04 00 ed 0c b1 03 00 ff #> [10081] 0b eb 02 00 db 06 33 00 9f 05 3e 00 93 06 4f 00 fb 05 fb 01 00 f3 06 ff #> [10105] 03 00 d1 05 dd 05 00 85 03 b5 07 00 5b ed 07 00 12 fd 09 00 ae 01 f3 09 #> [10129] 00 b4 01 8b 0a 00 9a 02 b9 08 00 e0 01 ad 0c 00 b8 02 85 0b 00 84 02 ff #> [10153] 09 00 b8 02 b1 0a 00 e2 02 d3 08 00 c8 02 a7 07 00 b6 01 a7 08 00 33 fb #> [10177] 03 00 b9 01 db 02 00 bd 02 cd 02 00 f7 04 c5 01 00 99 05 3a 00 f1 04 b4 #> [10201] 02 00 8f 05 86 04 00 91 05 c8 06 00 eb 05 94 08 00 d1 04 a6 08 00 f1 04 #> [10225] 9c 08 00 8f 04 fa 07 00 ab 04 ba 08 00 cd 02 90 04 00 8d 04 d0 07 00 f1 #> [10249] 03 e0 07 00 eb 03 84 06 00 d7 04 94 04 00 c1 04 90 06 00 d3 04 9e 06 00 #> [10273] ff 04 fc 06 00 bb 05 e6 06 00 c7 05 f0 07 00 f5 04 88 07 00 f5 05 a2 07 #> [10297] 00 83 05 c4 06 00 b7 06 c0 07 00 f9 05 e6 06 00 f5 05 ca 06 00 f9 07 fe #> [10321] 07 00 95 06 b8 06 00 b7 06 e2 06 00 e9 07 fa 06 00 9d 06 e0 05 00 f3 04 #> [10345] a0 04 00 91 07 be 07 00 c9 04 c4 05 00 cf 03 f2 05 00 a3 04 a2 04 00 ed #> [10369] 13 d2 15 00 a3 16 e8 18 00 a9 13 dc 14 00 d5 14 e2 16 00 8d 1b f0 1c 00 #> [10393] ff 0a c0 0b 00 a1 26 ce 23 00 1b 11 00 6d 09 00 29 03 00 89 01 1c 00 87 #> [10417] 02 62 00 b1 02 82 01 00 3b 08 00 db 05 80 05 00 c7 03 b6 06 00 af 01 c0 #> [10441] 07 00 b9 01 88 01 00 cb 01 66 00 fd 01 76 00 b1 02 24 00 c9 03 32 00 8f #> [10465] 02 44 00 f5 02 a8 01 00 eb 03 a2 02 00 eb 03 a0 02 00 ed 01 56 00 99 01 #> [10489] 11 00 85 03 eb 01 00 c5 07 b7 05 00 cf 06 83 05 00 85 03 c1 02 00 d3 02 #> [10513] 53 00 c1 02 10 00 d3 02 56 00 db 01 78 00 c1 02 fc 01 00 eb 03 e6 02 00 #> [10537] 85 03 90 02 00 db 01 f6 02 00 a9 01 be 04 00 a9 01 d2 04 00 cb 01 d0 04 #> [10561] 00 97 02 fa 0b 00 53 9e 05 00 3d c8 04 00 2a 9a 06 00 d2 01 9c 05 00 a6 #> [10585] 01 e8 08 00 29 e6 01 00 51 b8 03 00 a3 02 a2 03 00 cd 02 be 01 00 c3 06 #> [10609] 14 00 93 08 8f 01 00 d5 07 90 01 00 c1 07 ba 02 00 97 07 8c 03 00 ef 05 #> [10633] 98 07 00 fd 08 98 07 00 c9 04 fa 01 00 b5 03 ce 02 00 e3 02 fc 01 00 9b #> [10657] 05 d6 07 00 c9 01 88 03 00 a7 03 bc 02 00 fb 04 68 00 c5 04 33 00 a3 08 #> [10681] bb 02 00 ed 07 00 00 c5 04 88 02 00 91 04 ea 0c 00 e5 05 d2 0d 00 cf 06 #> [10705] 8c 09 00 87 02 8e 04 00 a0 01 b6 0d 00 8c 02 c4 07 00 d6 01 e4 03 00 c2 #> [10729] 07 f0 04 00 e0 0d cc 04 00 ba 0b c8 04 00 e0 0d ea 03 00 f6 09 ca 04 00 #> [10753] c0 0e b4 08 00 92 16 da 0a 00 8e 06 8e 06 00 86 03 d2 07 00 8d 06 fc 0c #> [10777] 00 cf 07 ea 03 00 d1 07 e8 03 00 e7 03 ac 05 00 62 b2 08 00 00 d8 0a 00 #> [10801] 61 d8 0a 00 c9 04 ac 05 00 ef 06 62 00 b9 0b 00 00 93 09 a6 02 00 e7 03 #> [10825] aa 05 00 61 ea 03 00 e8 03 f0 06 00 ca 04 e8 03 00 ac 05 c2 01 00 8e 06 #> [10849] 64 00 ca 04 62 00 e8 03 8e 06 00 a6 02 d8 0a 00 00 96 06 00 00 c2 04 00 #> [10873] e7 03 ac 05 00 dd 0d ac 05 00 df 0d 00 00 9b 0c a5 02 00 f5 09 85 03 00 #> [10897] b3 08 c4 01 00 d1 07 88 03 00 b9 0b 88 03 00 d1 07 5f 00 b1 08 c2 01 00 #> [10921] c9 04 ca 04 00 ef 06 ea 03 00 d1 07 5f 00 fd 0c c9 04 00 9b 0c d1 07 00 #> [10945] f3 1b 9f 0e 00 fb 07 d5 02 00 8d 09 62 00 91 0c dc 08 00 87 11 c6 0f 00 #> [10969] 99 12 90 09 00 a7 10 88 06 00 9f 0a f4 01 00 9d 09 c4 05 00 f1 0b c5 06 #> [10993] 00 97 0d bd 08 00 e3 13 97 0d 00 f9 10 a7 0b 00 8f 0e 97 0d 00 b5 09 81 #> [11017] 10 00 e1 03 f9 10 00 f1 01 e3 13 00 d4 05 cd 16 00 88 06 f5 15 00 98 06 #> [11041] ad 16 00 e2 03 e3 13 00 77 97 0d 00 e9 02 c3 07 00 c3 07 dd 04 00 9f 0c #> [11065] e7 02 00 bd 18 da 04 00 dd 16 e6 09 00 9b 01 95 09 00 2e 9f 16 00 71 83 #> [11089] 1c 00 f4 21 cb 0b 00 a8 1b bb 08 00 ac 01 33 00 b2 23 f3 0a 00 dc 07 a9 #> [11113] 01 00 a0 29 91 07 00 9a 1d b5 09 00 fa 10 d9 04 00 c4 07 b5 09 00 d4 05 #> [11137] 89 0f 00 ea 05 9b 1b 00 d4 02 ab 0c 00 a6 0b fb 10 00 ce 16 eb 12 00 ce #> [11161] 10 c5 0b 00 a6 11 ff 0b 00 94 2a 93 1b 00 82 01 a9 01 00 a2 05 a3 08 00 #> [11185] c8 02 b9 06 00 b2 03 ef 07 00 f9 05 87 08 00 ad 05 d3 07 00 f9 03 f3 05 #> [11209] 00 f5 01 9d 04 00 15 ef 08 00 21 df 0d 00 29 9b 18 00 ac 1d 8a 0a 00 ca #> [11233] 16 b9 2d 00 86 19 c5 33 00 e3 14 c7 0d 00 ce 35 dd 40 00 e4 34 f9 3d 00 #> [11257] 99 05 fd 0c 00 de 1a a1 21 00 e8 12 8b 17 00 c8 12 eb 16 00 f4 11 89 16 #> [11281] 00 d6 12 f3 16 00 f8 0d 97 11 00 e2 12 b9 17 00 ea 10 f3 14 00 e2 17 d5 #> [11305] 1d 00 bc 0d e9 12 00 8a 0c db 0f 00 86 17 9b 1f 00 80 01 af 01 00 e3 03 #> [11329] b5 05 00 d7 0b c1 15 00 bf 07 cd 0d 00 95 07 a3 0d 00 d1 07 9f 0e 00 d3 #> [11353] 0a 95 13 00 e7 04 85 09 00 e9 02 a3 05 00 d3 02 9d 03 00 81 03 bb 02 00 #> [11377] eb 08 b5 06 00 a5 06 81 05 00 c7 05 b3 04 00 b7 04 e6 02 00 e9 0a fa 04 #> [11401] 00 d9 0d dc 05 00 a3 06 ee 03 00 87 05 d8 04 00 b7 05 d6 05 00 a9 06 a4 #> [11425] 07 00 91 06 c2 06 00 b7 04 f4 03 00 9f 08 da 08 00 e3 0a 98 09 00 f3 08 #> [11449] 88 08 00 e1 07 8a 07 00 fd 05 98 05 00 ad 06 b0 06 00 f9 05 c4 06 00 9f #> [11473] 08 a0 07 00 eb 06 aa 06 00 b1 08 94 06 00 ef 07 c6 06 00 f7 09 d8 06 00 #> [11497] c1 05 e0 04 00 b5 05 f2 03 00 95 06 f0 03 00 c9 06 a4 05 00 d1 07 ac 08 #> [11521] 00 e9 03 e4 06 00 93 02 ec 02 00 d3 03 e2 03 00 cb 06 e8 05 00 a1 08 d8 #> [11545] 07 00 bd 0d be 0c 00 b7 11 c8 0f 00 fb 07 8a 07 00 d5 05 84 05 00 93 12 #> [11569] 8a 11 00 8b 0d 82 0d 00 af 0e be 0e 00 9f 0c a8 0f 00 ad 0f b6 12 00 cd #> [11593] 07 ee 08 00 c5 08 ac 08 00 87 09 da 08 00 99 09 86 09 00 ed 07 f6 07 00 #> [11617] bf 07 e4 06 00 eb 08 a4 06 00 e5 0e 8c 0d 00 d5 0a c4 08 00 bb 0b f7 06 #> [11641] 00 95 06 b7 02 00 e7 03 4b 00 fb 03 62 00 c7 04 be 02 00 c7 04 a2 02 00 #> [11665] cb 05 94 02 00 af 05 34 00 d9 07 97 01 00 b9 06 e9 01 00 b9 04 b1 03 00 #> [11689] f5 02 e9 03 00 c9 01 eb 04 00 a9 01 f1 05 00 1e ff 04 00 d2 01 93 05 00 #> [11713] f0 01 ab 04 00 a2 02 e7 04 00 a6 01 c9 05 00 92 01 db 05 00 5c f5 04 00 #> [11737] a3 01 c5 05 00 e5 02 89 07 00 c3 03 eb 06 00 bd 04 f5 06 00 f5 04 a9 06 #> [11761] 00 fb 06 a5 07 00 c1 07 b1 08 00 b9 08 f7 09 00 b9 09 e9 0b 00 a3 05 d5 #> [11785] 05 00 a1 05 e9 01 00 9d 07 db 03 00 bd 04 a7 02 00 bc 27 b3 28 00 fc 5a #> [11809] fb 64 00 b0 30 ed 29 00 ec 1f c1 19 00 c8 13 cb 15 00 84 0f bb 18 00 fc #> [11833] 0e 9b 2c 00 e6 12 97 19 00 fc 09 e9 0e 00 d0 0c 81 0c 00 c8 08 8f 04 00 #> [11857] ec 14 87 08 00 82 1e fb 04 00 a2 0b 9b 02 00 ac 0b ff 03 00 fa 03 99 05 #> [11881] 00 28 93 07 00 85 07 a5 09 00 d5 0d ef 06 00 d1 0a 8f 0c 00 46 c5 0c 00 #> [11905] fc 0f b7 18 00 96 2d 91 20 00 b6 24 c7 17 00 c4 1b f5 20 00 ae 13 e3 25 #> [11929] 00 e4 1a 8f 3a 00 dc 28 c1 39 00 c2 2b b3 39 00 ca 35 85 4a 00 fe 18 e9 #> [11953] 1e 00 80 2c 9f 36 00 a0 3a ef 49 00 9e 20 d3 21 00 80 0c af 12 00 9e 04 #> [11977] bf 0b 00 ca 02 89 10 00 cf 01 85 03 00 9f 05 ed 09 00 db 0a ad 0a 00 d3 #> [12001] 0d f1 06 00 fd 08 cb 07 00 52 ad 0e 00 ca 06 9b 16 00 a4 08 c3 12 00 b0 #> [12025] 09 89 16 00 c0 06 b5 14 00 bc 0f c1 21 00 a0 08 cf 11 00 a4 04 8f 21 00 #> [12049] 67 b9 17 00 d3 01 a1 19 00 db 06 c1 10 00 eb 0a d7 07 00 e1 0f c9 01 00 #> [12073] e7 0f 59 00 f7 0c af 02 00 c9 0d d9 08 00 97 0a 87 16 00 61 ab 18 00 c0 #> [12097] 01 9f 21 00 e2 03 95 2a 00 5e f3 24 00 eb 07 c1 35 00 4e bf 0d 00 8e 02 #> [12121] a7 05 00 e8 04 af 03 00 c2 07 bb 01 00 bc 06 98 01 00 ac 05 d2 05 00 a0 #> [12145] 05 b6 07 00 ea 09 ba 09 00 80 0f 87 02 00 b8 0b e5 05 00 20 b3 05 00 a3 #> [12169] 04 a5 08 00 91 09 81 04 00 91 09 ff 03 00 a3 03 85 0a 00 b2 02 cd 0b 00 #> [12193] aa 0c ef 04 00 e8 10 85 01 00 d8 13 dd 02 00 ac 0a 9f 02 00 e0 06 8d 05 #> [12217] 00 b5 02 99 08 00 e3 0d 9b 04 00 cb 11 c9 02 00 87 0a 87 04 00 b5 02 99 #> [12241] 08 00 bc 02 b3 0d 00 80 07 c1 0a 00 d8 07 87 05 00 88 05 e5 08 00 27 c1 #> [12265] 0d 00 a6 04 95 21 00 9e 06 91 0e 00 ea 16 c7 1e 00 ce 0e e3 0d 00 ae 0f #> [12289] 91 0a 00 82 17 a9 0e 00 b4 08 43 00 ca 05 20 00 a2 09 a8 01 00 9c 09 9a #> [12313] 02 00 a8 0a ab 01 00 e4 05 9f 04 00 9e 02 81 08 00 b3 01 fd 09 00 9b 02 #> [12337] dd 0c 00 dc 06 f9 18 00 e8 19 f9 22 00 b2 1b c5 1c 00 a8 1a 81 19 00 9a #> [12361] 16 87 11 00 e0 0f 9f 12 00 e2 13 91 2d 00 ca 20 d9 50 00 88 1c cd 53 00 #> [12385] e4 23 bd 6d 00 94 04 95 12 00 c6 1c f5 7c 00 fa 1d 87 a4 01 00 b2 13 d7 #> [12409] 74 00 f0 0d 87 4e 00 9a 06 99 21 00 86 01 c7 16 00 6a f9 25 00 e5 04 a7 #> [12433] 25 00 d7 0b af 31 00 ad 0f bb 32 00 fd 0c a7 29 00 9b 17 d5 3d 00 cb 1c #> [12457] bb 42 00 dd 37 fb 53 00 bb 33 8d 3e 00 c3 08 a5 0a 00 89 3f 99 42 00 f5 #> [12481] 19 e3 17 00 a3 35 e3 24 00 b1 2c d3 22 00 71 59 00 c8 01 9f 08 00 b3 01 #> [12505] df 06 00 06 91 05 00 da 01 eb 03 00 92 04 cb 05 00 d0 04 ad 05 00 f4 02 #> [12529] 83 04 00 da 02 93 04 00 88 02 d7 03 00 b0 01 a9 04 00 03 c5 04 00 2d d7 #> [12553] 03 00 c5 01 b1 03 00 83 03 9b 03 00 cf 04 a9 02 00 b5 04 07 00 83 05 c2 #> [12577] 01 00 9b 03 c6 01 00 c7 03 a6 02 00 cd 02 bc 03 00 81 03 92 03 00 f7 01 #> [12601] 8c 01 00 bf 03 3a 00 ed 04 77 00 97 04 a7 02 00 c7 05 b7 04 00 af 05 cf #> [12625] 08 00 fd 02 e5 07 00 97 01 db 06 00 11 cb 04 00 68 df 03 00 e0 01 f5 01 #> [12649] 00 8c 03 05 00 e4 04 66 00 8a 05 5e 00 dc 04 25 00 b4 03 65 00 e4 02 89 #> [12673] 02 00 c0 02 ef 02 00 d0 01 8d 04 00 0b f7 04 00 db 02 af 05 00 e7 04 e9 #> [12697] 05 00 d3 06 8d 05 00 a9 06 cb 04 00 81 06 a3 06 00 d7 03 b3 04 00 d7 04 #> [12721] 95 03 00 a3 06 df 01 00 fb 04 5d 00 97 04 97 01 00 c5 03 f3 02 00 d5 02 #> [12745] b3 05 00 06 ef 04 00 94 01 e1 05 00 f0 01 9d 07 00 ee 02 8b 06 00 ac 05 #> [12769] cb 07 00 96 07 d5 08 00 fe 03 eb 04 00 c6 01 c7 03 00 60 d5 04 00 12 d1 #> [12793] 06 00 18 c1 08 00 20 99 06 00 d4 01 d9 07 00 88 03 bf 08 00 ae 03 a7 08 #> [12817] 00 86 05 8d 0b 00 b2 04 fb 07 00 a0 04 8b 06 00 b4 05 d3 05 00 ba 03 f1 #> [12841] 03 00 e4 02 c1 04 00 98 02 dd 05 00 a0 02 f3 04 00 ce 02 a1 06 00 ee 02 #> [12865] d5 06 00 8c 01 a7 06 00 1f af 05 00 9b 01 93 07 00 cd 01 95 04 00 eb 03 #> [12889] db 03 00 b9 02 b5 02 00 fd 01 e3 04 00 18 9f 04 00 d6 01 df 05 00 86 02 #> [12913] 9b 05 00 56 fb 03 00 37 93 04 00 f3 01 97 05 00 a7 02 ed 05 00 16 a1 05 #> [12937] 00 be 01 91 05 00 98 02 9b 05 00 86 01 f9 04 00 49 f3 05 00 7d dd 04 00 #> [12961] 45 9b 03 00 12 a9 05 00 6d ef 03 00 6a 85 03 00 7a c7 03 00 09 d7 03 00 #> [12985] 17 8b 03 00 2a 9b 04 00 c4 02 8b 04 00 cc 04 d9 02 00 fc 02 bf 02 00 a4 #> [13009] 04 cb 05 00 8a 08 c3 0b 00 b4 06 b9 09 00 84 04 e3 06 00 a6 01 b1 06 00 #> [13033] 25 d3 04 00 32 b1 03 00 b2 02 91 04 00 ac 08 c3 0b 00 d4 02 e5 05 00 4a #> [13057] c1 04 00 1b 9b 04 00 04 e7 03 00 90 01 fb 02 00 f2 02 b7 03 00 f0 02 8f #> [13081] 04 00 9a 02 ef 04 00 80 02 a1 06 00 b2 02 f7 03 00 e4 02 d1 02 00 c2 04 #> [13105] 9f 02 00 90 08 d3 01 00 9c 04 83 02 00 b4 03 d1 02 00 f8 03 cf 04 00 90 #> [13129] 04 c3 04 00 f8 04 81 05 00 f2 03 d9 02 00 fa 04 f3 01 00 b6 04 8f 01 00 #> [13153] d4 06 a1 03 00 d2 04 87 04 00 f8 01 cb 03 00 ca 01 ef 03 00 d6 02 c7 03 #> [13177] 00 b8 05 ab 03 00 ea 04 d7 04 00 aa 02 e7 04 00 b2 02 95 03 00 aa 03 e7 #> [13201] 01 00 a4 05 37 00 a4 05 c1 01 00 d6 04 cf 02 00 a0 04 e5 01 00 e2 04 79 #> [13225] 00 ba 02 87 02 00 d2 02 93 04 00 0a 05 00 3a 49 00 2e 3b 00 24 25 00 1e #> [13249] 19 00 24 13 00 24 07 00 1e 00 00 14 0a 00 34 14 00 1e 20 00 24 2e 00 28 #> [13273] 3c 00 2e 48 00 38 50 00 24 38 00 32 50 00 1e 2e 00 1e 10 00 24 10 00 2a #> [13297] 0a 00 2e 03 00 48 13 00 3e 23 00 5e 2b 00 44 2b 00 34 17 00 3a 17 00 2e #> [13321] 03 00 58 00 00 34 0a 00 34 14 00 28 20 00 48 36 00 34 2e 00 3e 2e 00 2e #> [13345] 1a 00 2e 00 00 2e 0d 00 24 1f 00 2a 31 00 2a 31 00 4a 55 00 4a 55 00 34 #> [13369] 41 00 68 8b 01 00 2e 45 00 3a 59 00 4e 81 01 00 44 4b 00 3e 45 00 4e 39 #> [13393] 00 54 3b 00 4e 27 00 62 2f 00 4e 27 00 48 17 00 52 1b 00 86 01 1d 00 68 #> [13417] 17 00 62 0d 00 80 01 0b 00 5e 06 00 8c 01 03 00 90 01 0a 00 f8 01 1a 00 #> [13441] 76 10 00 90 01 12 00 5c 16 00 62 05 00 aa 01 03 00 8c 01 2b 00 ac 01 57 #> [13465] 00 fa 01 87 01 00 bc 01 75 00 9c 01 67 00 50 5b 00 10 69 00 12 97 01 00 #> [13489] 08 d7 07 00 10 69 00 40 89 01 00 40 95 01 00 7e a5 01 00 aa 02 ab 02 00 #> [13513] 8e 01 df 01 00 70 8f 02 00 30 a5 01 00 0d c3 01 00 2d 79 00 5b 89 01 00 #> [13537] a9 01 79 00 a9 01 3d 00 e3 02 a9 01 00 a9 01 97 01 00 5b 89 01 00 1d 69 #> [13561] 00 2d 87 01 00 0d a7 01 00 0d e3 01 00 02 f1 01 00 22 91 02 00 32 fb 02 #> [13585] 00 32 81 02 00 60 c3 01 00 5e 79 00 5e 3b 00 6e 0b 00 7c 02 00 5e 2e 00 #> [13609] 5c 4c 00 5c 5e 00 8a 01 c6 01 00 aa 01 a8 01 00 7c 4c 00 7c 10 00 7c 10 #> [13633] 00 9c 01 1d 00 ac 01 39 00 8c 01 5b 00 8e 01 67 00 ae 01 df 01 00 ac 01 #> [13657] c5 01 00 6e c3 01 00 10 87 01 00 2b b7 01 00 4d 87 01 00 6b 79 00 d7 01 #> [13681] 8b 01 00 b9 01 6b 00 83 03 a7 01 00 87 02 99 01 00 99 01 7b 00 89 01 97 #> [13705] 01 00 4b 97 01 00 0d 79 00 02 97 01 00 20 97 01 00 30 89 01 00 5e 85 01 #> [13729] 00 5e 5b 00 5e 2b 00 9c 01 2b 00 bc 01 2b 00 ac 01 3b 00 da 01 57 00 ae #> [13753] 01 a5 01 00 8e 01 85 01 00 9c 01 a5 01 00 be 01 8f 02 00 ae 01 ff 01 00 #> [13777] 9e 01 f1 01 00 8e 01 ff 01 00 5e b3 01 00 7e 87 01 00 6e 75 00 7e 69 00 #> [13801] 7e 3b 00 5e 3b 00 20 69 00 02 a7 01 00 2b d3 01 00 6b 91 02 00 79 81 02 #> [13825] 00 a7 01 dd 02 00 89 01 91 02 00 2d a7 01 00 0d c3 01 00 0d b7 01 00 20 #> [13849] f1 01 00 32 a7 03 00 32 bd 02 00 30 81 02 00 40 c5 01 00 3e 59 00 5e 59 #> [13873] 00 6e 3b 00 8c 01 4b 00 7c 0b 00 9c 01 02 00 88 02 30 00 f8 01 4c 00 aa #> [13897] 01 7c 00 8a 01 98 01 00 5c 6a 00 0e 7a 00 1e e4 01 00 01 c4 01 00 0e b4 #> [13921] 01 00 2e 5e 00 3e 1e 00 5e 00 00 7e 3b 00 bc 01 85 01 00 bc 01 c1 01 00 #> [13945] ae 01 8f 02 00 60 e3 01 00 40 c3 01 00 02 a7 01 00 2b e3 01 00 1d e1 01 #> [13969] 00 2b 83 02 00 1b 9f 02 00 0b ad 02 00 0d 91 02 00 3b 81 02 00 59 ed 02 #> [13993] 00 3b bb 02 00 4b 91 02 00 3b b1 02 00 1d f1 01 00 02 97 01 00 30 b5 01 #> [14017] 00 5e 95 01 00 6e e3 01 00 40 a3 01 00 30 b5 01 00 20 a5 01 00 2d d3 01 #> [14041] 00 4b c5 01 00 2d 97 01 00 1d a7 01 00 0d c3 01 00 02 a7 01 00 20 89 01 #> [14065] 00 2d 87 01 00 3d 79 00 3b 87 01 00 3d a7 01 00 02 79 00 12 97 01 00 20 #> [14089] 59 00 4e 79 00 6e 59 00 6e 1d 00 9c 01 0b 00 cc 01 3b 00 ca 01 2b 00 98 #> [14113] 02 0d 00 ea 01 30 00 a6 02 40 00 f4 02 6e 00 9a 01 7c 00 9a 01 6c 00 8a #> [14137] 01 98 01 00 6c 4c 00 6e 20 00 5e 00 00 5e 3b 00 5e 4b 00 50 95 01 00 5e #> [14161] 75 00 4e 4b 00 3e 0f 00 3e 10 00 3e 2e 00 6c 5c 00 6c 6c 00 4e 3e 00 6c #> [14185] 2e 00 7c 02 00 9c 01 0b 00 fa 01 39 00 ea 01 3b 00 ac 01 3b 00 6e 49 00 #> [14209] 6e 3b 00 4e 5b 00 30 77 00 10 69 00 40 a5 01 00 20 79 00 4e 2b 00 5e 0f #> [14233] 00 7e 39 00 8c 01 1d 00 8c 01 0d 00 4e 39 00 40 4b 00 30 59 00 30 69 00 #> [14257] 4e 79 00 6e 85 01 00 5e 4b 00 5e 69 00 2e 3b 00 00 59 00 2d 69 00 5b a7 #> [14281] 01 00 89 01 d5 01 00 4b 97 01 00 00 69 00 20 59 00 40 69 00 2e 3b 00 5e #> [14305] 1d 00 ac 01 3b 00 ea 01 2b 00 9c 01 1b 00 5e 1d 00 7e 39 00 40 79 00 20 #> [14329] 87 01 00 00 69 00 11 4b 00 07 0f 00 35 7d 00 00 77 00 10 d1 01 00 21 f1 #> [14353] 03 00 2b a9 04 00 19 af 03 00 2c e3 02 00 58 c5 02 00 15 b1 01 00 3b 89 #> [14377] 01 00 61 a9 01 00 6f 8f 02 00 06 bb 01 00 66 ff 02 00 f0 01 df 03 00 14 #> [14401] 29 00 c2 01 a5 02 00 c4 01 93 02 00 8e 01 f1 01 00 80 01 8f 02 00 60 ad #> [14425] 02 00 60 8f 02 00 50 ff 01 00 70 f9 02 00 20 a5 01 00 0d d1 01 00 2d c7 #> [14449] 01 00 59 cb 02 00 99 01 b1 02 00 99 01 81 02 00 89 01 c5 01 00 b9 01 5b #> [14473] 00 b9 01 6b 00 8b 01 5d 00 3d 69 00 2d 87 01 00 0d 69 00 02 d3 01 00 30 #> [14497] e3 01 00 40 b3 01 00 5e a5 01 00 9e 01 f1 01 00 9c 01 67 00 ea 01 67 00 #> [14521] bc 01 1b 00 88 02 30 00 88 02 40 00 ba 01 12 00 9c 01 2b 00 dc 01 87 01 #> [14545] 00 fc 01 d1 01 00 8a 02 ef 01 00 9c 01 a5 01 00 7e c3 01 00 6e 97 01 00 #> [14569] 30 77 00 dc 01 95 01 00 8e 01 67 00 4e 89 01 00 40 a5 01 00 20 a3 01 00 #> [14593] 10 a7 01 00 50 5b 00 5e 59 00 9c 01 59 00 ec 01 d1 01 00 dc 01 b5 01 00 #> [14617] bc 01 df 01 00 6e a5 01 00 50 89 01 00 4e 69 00 8e 01 85 01 00 b4 01 51 #> [14641] 00 5e 59 00 7e 87 01 00 8e 01 67 00 9e 01 95 01 00 ac 01 95 01 00 be 01 #> [14665] d1 01 00 ec 01 ef 01 00 9e 01 b5 01 00 bc 01 ef 01 00 9e 01 f1 01 00 60 #> [14689] c3 01 00 7e d3 01 00 7e d3 01 00 8e 01 e1 01 00 7e c3 01 00 5e b5 01 00 #> [14713] 50 8d 02 00 32 af 02 00 50 bd 02 00 32 81 02 00 40 d3 01 00 8e 01 c3 01 #> [14737] 00 be 01 ff 01 00 bc 01 d1 01 00 ec 01 9f 02 00 dc 01 c1 01 00 be 01 ff #> [14761] 01 00 be 01 8f 02 00 8e 01 8f 02 00 22 c3 01 00 02 c3 01 00 3d 99 01 00 #> [14785] 7b 77 00 b9 01 7b 00 7b 5b 00 6b 79 00 02 a7 01 00 30 d3 01 00 42 8f 02 #> [14809] 00 50 ff 01 00 40 c3 01 00 5e 69 00 9c 01 77 00 8a 02 b1 01 00 ae 01 b5 #> [14833] 01 00 30 69 00 10 79 00 4b 97 01 00 87 01 eb 02 00 c1 02 ef 04 00 5b a7 #> [14857] 01 00 4b 97 01 00 1d 69 00 10 79 00 20 f1 01 00 10 97 01 00 0d 89 01 00 #> [14881] 1d 97 01 00 3d 87 01 00 d7 01 93 02 00 f5 01 cf 02 00 89 01 d5 01 00 3b #> [14905] 97 01 00 00 69 00 30 59 00 5e 4b 00 9c 01 49 00 6e 0d 00 c0 04 04 00 5e #> [14929] 1b 00 4e 3b 00 30 79 00 62 c5 03 00 32 ed 02 00 42 b5 03 00 22 dd 02 00 #> [14953] 04 db 02 00 0d 91 02 00 20 a5 01 00 30 d3 01 00 52 cb 02 00 80 01 af 02 #> [14977] 00 5e b3 01 00 ac 01 c5 01 00 9e 01 c3 01 00 cc 01 a5 01 00 9e 01 95 01 #> [15001] 00 ac 01 57 00 bc 01 3b 00 8a 02 39 00 bc 01 3b 00 bc 01 1b 00 da 01 49 #> [15025] 00 9c 01 49 00 bc 01 3b 00 bc 01 2b 00 ca 01 1d 00 ba 01 12 00 98 02 40 #> [15049] 00 ea 01 30 00 98 02 6c 00 d8 01 6c 00 c8 01 b8 01 00 e2 02 ee 02 00 6a #> [15073] a0 02 00 6a f4 01 00 4c 98 01 00 5c 5c 00 5e 10 00 6e 2b 00 5e 4b 00 ba #> [15097] 02 bb 02 00 9c 02 c9 02 00 6e b5 01 00 20 4b 00 0d 59 00 1d 59 00 a9 01 #> [15121] e5 01 00 f5 01 fd 02 00 4b a7 01 00 00 69 00 30 59 00 40 b3 01 00 90 01 #> [15145] bd 02 00 60 e3 01 00 50 c3 01 00 30 89 01 00 5e 75 00 6e 4b 00 6e 85 01 #> [15169] 00 8e 01 f1 01 00 68 d9 01 00 5e a5 01 00 5e 89 01 00 9e 01 85 01 00 8e #> [15193] 01 95 01 00 6e 69 00 40 59 00 30 79 00 80 01 d3 03 00 30 b5 01 00 30 59 #> [15217] 00 5e 3b 00 7c 2b 00 ba 01 1b 00 ca 01 0d 00 6e 2b 00 5e 5b 00 4e 85 01 #> [15241] 00 40 d3 01 00 22 f1 01 00 12 c5 01 00 20 77 00 20 69 00 4e 4b 00 6e 49 #> [15265] 00 9c 01 4b 00 dc 01 a5 01 00 8c 01 49 00 7e 77 00 5e 89 01 00 7e 85 01 #> [15289] 00 8e 01 85 01 00 bc 01 a5 01 00 ac 01 87 01 00 6e 2b 00 dc 01 85 01 00 #> [15313] d8 02 c3 01 00 bc 01 67 00 7e 69 00 7c 59 00 5e 79 00 20 69 00 0d 87 01 #> [15337] 00 04 fb 02 00 30 77 00 5e 5b 00 50 77 00 10 89 01 00 12 c3 01 00 02 a7 #> [15361] 01 00 20 97 01 00 40 79 00 6e b3 01 00 9e 01 cd 02 00 4e 95 01 00 9e 01 #> [15385] 95 01 00 aa 02 ad 02 00 86 04 fd 03 00 8c 02 8f 02 00 7e a5 01 00 4e 85 #> [15409] 01 00 40 95 01 00 10 89 01 00 0d 87 01 00 97 01 91 02 00 4b 97 01 00 3b #> [15433] 97 01 00 0d 59 00 20 79 00 50 b5 01 00 70 ad 02 00 6e d3 01 00 90 01 cd #> [15457] 02 00 be 01 ad 02 00 6e a5 01 00 8e 01 67 00 7c 69 00 8e 01 a5 01 00 9e #> [15481] 01 95 01 00 bc 01 75 00 cc 01 87 01 00 bc 01 67 00 6e 59 00 30 4b 00 02 #> [15505] 87 01 00 2d a7 01 00 4b 81 02 00 79 b7 01 00 99 01 c5 01 00 5b 79 00 4b #> [15529] 87 01 00 3b b7 01 00 1b 81 02 00 75 d1 06 00 2b f1 01 00 2d c3 01 00 4b #> [15553] d5 01 00 4b a7 01 00 2d 97 01 00 02 79 00 30 69 00 5e b5 01 00 aa 02 85 #> [15577] 03 00 de 01 e9 02 00 30 a5 01 00 0d 69 00 3d 4d 00 3d 3d 00 5d 0d 00 6d #> [15601] 0c 00 89 02 2e 00 f5 02 38 00 9b 01 0d 00 8b 01 1f 00 8b 01 4b 00 b9 01 #> [15625] 8b 01 00 f7 01 d5 01 00 e7 01 b5 01 00 7b 97 01 00 1d 69 00 00 5b 00 30 #> [15649] 87 01 00 30 79 00 4e 59 00 9e 01 95 01 00 ac 01 a5 01 00 7e 95 01 00 8e #> [15673] 01 a5 01 00 60 a5 01 00 7e 77 00 3e 69 00 7e 39 00 7c 2d 00 9c 01 12 00 #> [15697] aa 01 02 00 ea 01 12 00 ac 01 12 00 8c 01 0e 00 5e 0b 00 6e 3b 00 cc 01 #> [15721] 77 00 c6 03 8d 02 00 86 03 ed 01 00 8a 02 87 01 00 7e 59 00 5e 69 00 9e #> [15745] 01 c3 01 00 cc 01 87 01 00 ec 01 95 01 00 fa 01 75 00 ec 01 67 00 dc 01 #> [15769] 87 01 00 7c 2b 00 8c 01 1b 00 9c 01 1e 00 8c 01 3e 00 c6 02 6c 00 94 03 #> [15793] 5e 00 98 02 30 00 ca 01 0b 00 6e 2d 00 bc 01 57 00 bc 01 85 01 00 ec 01 #> [15817] b5 01 00 bc 01 77 00 6e 85 01 00 60 95 01 00 70 ff 01 00 8e 01 b5 01 00 #> [15841] 8e 01 85 01 00 6e 69 00 4e 3b 00 4e 95 01 00 40 95 01 00 6e a5 01 00 3e #> [15865] 69 00 6e 69 00 7c 2b 00 9c 01 1d 00 a2 04 91 01 00 c8 02 67 00 da 01 67 #> [15889] 00 7e 59 00 8e 01 87 01 00 4e 85 01 00 50 e3 01 00 30 f1 01 00 30 b5 01 #> [15913] 00 40 87 01 00 4e 3b 00 9c 01 2b 00 6c 1e 00 ca 01 22 00 7c 4c 00 ba 01 #> [15937] 02 00 bc 01 47 00 7e 4b 00 7e 69 00 6e 75 00 40 d3 01 00 40 f3 01 00 22 #> [15961] bd 02 00 32 bd 02 00 22 bd 02 00 12 ad 02 00 0d c3 01 00 2b e3 01 00 79 #> [15985] bf 02 00 e3 01 85 04 00 c5 01 ed 02 00 a9 01 85 02 00 b7 01 dd 02 00 c5 #> [16009] 01 c7 03 00 c5 01 8d 03 00 3b f1 01 00 5b 81 02 00 89 01 d5 01 00 89 01 #> [16033] f5 01 00 99 01 a7 01 00 d7 01 a9 01 00 f7 01 e3 01 00 c9 01 7b 00 99 01 #> [16057] a7 01 00 3d 97 01 00 3b b7 01 00 0f 63 00 01 2d 00 16 e5 01 00 2c d1 01 #> [16081] 00 54 b1 01 00 46 7d 00 72 4b 00 ee 03 99 03 00 22 71 00 12 d1 01 00 06 #> [16105] b5 01 00 2e bb 01 00 8c 01 d9 01 00 ae 02 8b 04 00 46 d7 01 00 3a a7 01 #> [16129] 00 46 9f 01 00 7a f5 01 00 42 9b 01 00 7a dd 01 00 8e 02 d7 02 00 76 83 #> [16153] 01 00 34 89 01 00 68 73 00 42 b5 01 00 0e 7b 00 0e 63 00 1b 6d 00 0e a9 #> [16177] 01 00 17 7f 00 37 5d 00 71 3f 00 a5 01 49 00 4f 2d 00 67 2f 00 33 4f 00 #> [16201] 17 0d 00 00 9b 01 00 2e e3 01 00 f0 01 f3 02 00 5e e5 01 00 50 a5 01 00 #> [16225] 42 e7 01 00 24 b3 01 00 0a 2f 00 56 55 00 88 01 6d 00 ca 02 b7 01 00 5a #> [16249] 4d 00 2e 7f 00 1b 75 00 6d 59 00 4c 95 01 00 4c 35 00 aa 01 41 00 94 01 #> [16273] 0c 00 e8 01 0a 00 9c 01 1f 00 ca 01 69 00 ae 02 9b 01 00 a0 01 7d 00 76 #> [16297] 5b 00 4c 31 00 0a 23 00 04 11 00 1c 79 00 00 bf 01 00 00 a3 01 00 00 dd #> [16321] 01 00 18 77 00 2a 63 00 62 75 00 4c 59 00 3e 77 00 0e 6b 00 00 f3 01 00 #> [16345] 67 af 02 00 2f ad 01 00 00 23 00 00 d7 01 00 18 b5 01 00 6c 8d 02 00 38 #> [16369] 79 00 ae 01 cb 01 00 50 05 00 6e 18 00 50 0b 00 3e 41 00 4a 93 01 00 2a #> [16393] 91 01 00 48 6f 00 58 8b 01 00 64 7b 00 88 03 81 02 00 8e 01 07 00 70 01 #> [16417] 00 a0 01 0f 00 ae 01 3d 00 9c 02 27 00 ae 01 3d 00 84 01 23 00 c2 01 77 #> [16441] 00 5e 2b 00 84 02 4f 00 76 01 00 92 01 02 00 76 0d 00 68 19 00 c6 01 1b #> [16465] 00 b8 02 00 00 a0 01 02 00 64 04 00 6c 00 00 92 01 2b 00 84 01 35 00 68 #> [16489] 8f 01 00 42 69 00 34 e3 01 00 0e 00 00 00 c5 01 00 09 9b 01 00 13 6d 00 #> [16513] 33 9b 01 00 4f fb 01 00 5d ef 01 00 2f 87 01 00 21 bb 01 00 17 97 02 00 #> [16537] 33 b7 01 00 55 a5 01 00 7b 6d 00 59 5b 00 c5 01 a7 01 00 6b cf 01 00 37 #> [16561] cd 01 00 13 e1 01 00 20 bb 01 00 0d 97 01 00 13 73 00 2b ad 01 00 8d 01 #> [16585] ed 03 00 3d 89 01 00 61 d1 01 00 29 93 01 00 33 dd 01 00 00 9b 01 00 22 #> [16609] a3 01 00 00 69 00 2f b1 01 00 49 bb 01 00 99 01 ef 03 00 00 df 04 00 00 #> [16633] cb 01 00 2a 8d 01 00 00 75 00 59 cb 01 00 6d a5 02 00 13 f1 01 00 04 ad #> [16657] 02 00 46 e5 01 00 3e d9 01 00 2e bd 01 00 2a a1 01 00 12 b1 01 00 00 ff #> [16681] 01 00 0d a9 02 00 08 a5 03 00 21 7b 00 00 91 01 00 16 9f 01 00 0a 73 00 #> [16705] 25 db 01 00 25 93 02 00 4b ad 01 00 95 01 db 01 00 71 7d 00 6b 4d 00 6b #> [16729] 5f 00 55 5b 00 33 9b 01 00 21 9f 01 00 00 b7 03 00 04 77 00 12 91 01 00 #> [16753] 03 bb 01 00 af 01 fb 04 00 6d cd 02 00 59 e9 01 00 41 a9 01 00 29 79 00 #> [16777] 2f 65 00 7f 5f 00 9b 01 3b 00 89 01 5f 00 87 01 87 01 00 75 b3 01 00 8d #> [16801] 01 bb 01 00 5d 6d 00 87 01 4f 00 ad 01 0b 00 9b 01 2b 00 79 31 00 59 69 #> [16825] 00 3d 9d 01 00 55 97 01 00 37 89 01 00 67 9b 01 00 9b 01 cb 01 00 9b 01 #> [16849] b7 01 00 71 d7 01 00 67 f1 01 00 79 c9 02 00 25 8b 01 00 45 b5 01 00 55 #> [16873] a5 01 00 8d 01 a7 01 00 6b 5b 00 a9 01 83 01 00 c5 01 5d 00 b3 01 47 00 #> [16897] bd 01 5f 00 9f 01 01 00 7f 03 00 f3 01 0d 00 d5 01 0d 00 e1 01 14 00 9b #> [16921] 01 00 00 63 05 00 67 07 00 63 29 00 71 19 00 67 3b 00 45 3d 00 71 73 00 #> [16945] 4f 8f 01 00 09 17 00 45 ed 01 00 09 6d 00 83 01 e7 01 00 37 cb 01 00 1b #> [16969] e7 01 00 2f a9 02 00 09 57 00 0e 9f 01 00 22 8d 02 00 04 95 04 00 0d e1 #> [16993] 01 00 25 d9 01 00 17 dd 01 00 17 cd 01 00 1b cd 01 00 25 b9 01 00 25 9f #> [17017] 01 00 55 87 01 00 6b 55 00 5d 8f 01 00 2f ad 01 00 05 77 00 26 8d 01 00 #> [17041] 34 69 00 08 e3 04 00 08 e3 01 00 18 d7 01 00 30 8d 01 00 42 39 00 2a 57 #> [17065] 00 00 67 00 2f 89 01 00 2b a5 01 00 00 8f 02 00 0e dd 01 00 70 ef 03 00 #> [17089] 13 c9 02 00 13 bb 02 00 17 ef 01 00 11 9f 01 00 09 e7 01 00 1c e9 01 00 #> [17113] 1c 77 00 30 8d 01 00 13 89 01 00 6d 9f 02 00 2d 69 00 59 43 00 63 b7 01 #> [17137] 00 3d d1 01 00 11 a9 01 00 03 93 03 00 13 97 01 00 47 b7 02 00 25 eb 01 #> [17161] 00 29 f5 01 00 1b c9 01 00 1b 83 01 00 4f b5 01 00 7f bb 01 00 33 85 01 #> [17185] 00 2f ef 01 00 0d eb 01 00 25 d9 04 00 00 93 02 00 00 95 01 00 0e df 01 #> [17209] 00 7a 7b 00 42 91 01 00 84 01 77 00 4a 9b 01 00 1c 91 01 00 00 7f 00 0d #> [17233] 7b 00 04 75 00 18 af 01 00 b8 01 bd 03 00 2e d9 02 00 2a 6d 00 26 59 00 #> [17257] 0a 73 00 00 4b 00 45 e7 01 00 4f a5 01 00 55 df 01 00 79 c1 01 00 1c ff #> [17281] 01 00 63 d5 04 00 1b 69 00 0d bf 01 00 2e af 01 00 60 c3 01 00 2a 9b 01 #> [17305] 00 24 b7 01 00 42 5b 00 20 69 00 bc 01 bf 01 00 5e 63 00 4c 67 00 38 b3 #> [17329] 01 00 2a c1 01 00 4c ad 01 00 bc 01 93 02 00 72 99 01 00 70 79 00 6c 7b #> [17353] 00 34 49 00 30 4d 00 0e 6f 00 0a 6d 00 0e 73 00 09 bb 01 00 39 d9 01 00 #> [17377] 33 fb 01 00 51 d7 01 00 07 f3 01 00 00 4f 00 0a 61 00 1c 67 00 64 71 00 #> [17401] 94 01 97 01 00 6c 87 01 00 3e 91 01 00 06 9b 01 00 17 6d 00 11 65 00 1f #> [17425] 93 01 00 11 8d 01 00 29 9b 01 00 3b 89 01 00 5d 6f 00 45 71 00 1f 61 00 #> [17449] 11 69 00 00 8d 01 00 1b 8d 01 00 25 73 00 1f 85 01 00 11 55 00 00 91 01 #> [17473] 00 10 91 01 00 00 99 01 00 1b 6b 00 33 89 01 00 2d 9b 01 00 3b 9f 01 00 #> [17497] 1f af 01 00 00 91 01 00 36 8f 03 00 18 d1 01 00 18 cb 01 00 0a ad 01 00 #> [17521] 00 ab 01 00 0d 89 01 00 14 85 01 00 1e 91 01 00 1e 57 00 42 77 00 50 61 #> [17545] 00 50 49 00 42 3b 00 34 35 00 34 37 00 3e 5f 00 1e 9b 01 00 10 7f 00 0d #> [17569] 85 02 00 15 ad 02 00 37 df 01 00 33 b5 01 00 2d a9 01 00 0d 31 00 25 81 #> [17593] 01 00 29 85 01 00 5b e7 01 00 95 01 e9 02 00 1b 85 01 00 11 4f 00 17 35 #> [17617] 00 6b 6f 00 5d b3 01 00 75 c1 01 00 5d 89 01 00 79 a1 01 00 5d 89 01 00 #> [17641] 61 c5 01 00 4f 97 01 00 3b 97 01 00 29 93 01 00 0d 65 00 0d 97 01 00 0d #> [17665] 69 00 07 27 00 2f 29 00 7d 41 00 d7 01 6d 00 9b 01 7d 00 7d 8d 01 00 67 #> [17689] 8f 01 00 db 01 c7 03 00 61 c3 01 00 7d ed 01 00 a3 01 9d 02 00 79 f5 01 #> [17713] 00 6b db 01 00 49 a5 01 00 11 a1 01 00 0a ed 01 00 02 93 02 00 29 93 01 #> [17737] 00 57 a7 01 00 41 83 01 00 29 93 01 00 1f 99 01 00 1b 51 00 23 53 00 a3 #> [17761] 01 5b 00 79 49 00 75 73 00 33 5d 00 45 b3 01 00 1f 5b 00 1b 47 00 61 6f #> [17785] 00 bb 01 33 00 bf 01 69 00 ad 01 8b 01 00 15 11 00 33 81 01 00 23 61 00 #> [17809] 15 6b 00 05 25 00 22 a3 01 00 5a 00 00 fa 01 58 00 d4 02 34 00 c6 01 47 #> [17833] 00 84 01 3f 00 aa 01 3f 00 de 02 43 00 ae 02 63 00 fa 02 a3 01 00 b0 02 #> [17857] d5 01 00 fa 02 e3 01 00 a6 04 d3 03 00 e8 05 ed 04 00 b4 04 d1 03 00 a4 #> [17881] 06 97 04 00 18 0f 00 88 02 eb 0d 00 f4 01 b1 01 00 ec 01 89 01 00 ea 04 #> [17905] cf 02 00 d0 02 a5 01 00 82 02 55 00 ee 01 4f 00 f8 01 3d 00 a0 02 2f 00 #> [17929] 98 0a 66 00 ce 01 62 00 f4 05 f8 02 00 ae 02 bc 01 00 9c 01 96 01 00 8a #> [17953] 01 a2 01 00 64 88 01 00 34 6a 00 02 d6 01 00 e6 02 b0 03 00 b0 02 e2 01 #> [17977] 00 ba 04 e4 01 00 d4 04 ec 01 00 c4 07 ae 03 00 ac 03 d4 01 00 ea 03 b8 #> [18001] 02 00 b0 02 a8 01 00 c0 03 28 00 8a 04 59 00 b6 02 43 00 88 03 78 00 80 #> [18025] 04 f8 01 00 ae 03 88 03 00 d2 01 dc 04 00 5e c4 02 00 fc 02 a4 01 00 a2 #> [18049] 04 8c 02 00 92 09 b2 05 00 a0 08 b8 06 00 90 07 e6 03 00 ec 07 c2 02 00 #> [18073] d6 11 a0 04 00 dc 0a 9a 02 00 d8 06 f8 01 00 b0 05 90 02 00 e4 06 e8 03 #> [18097] 00 b2 06 a8 07 00 ac 08 f0 07 00 f8 07 94 07 00 f8 03 92 06 00 92 03 f2 #> [18121] 03 00 de 02 ae 03 00 d2 05 aa 03 00 86 05 aa 03 00 b0 05 fc 04 00 82 05 #> [18145] b8 06 00 f0 03 a0 06 00 84 04 de 04 00 c2 0a a2 07 00 d4 11 b8 0c 00 e0 #> [18169] 04 86 03 00 e8 06 45 00 a2 06 2d 00 8a 05 1d 00 90 04 0c 00 8a 06 ec 02 #> [18193] 00 b6 06 be 04 00 c8 04 86 05 00 fa 01 b2 03 00 de 03 66 00 ea 02 b6 02 #> [18217] 00 b2 02 d0 02 00 fa 01 e2 02 00 c2 03 ba 01 00 ea 03 ca 02 00 d0 02 d0 #> [18241] 04 00 96 03 f0 05 00 5c ae 05 00 78 94 04 00 84 02 f2 02 00 96 02 d6 02 #> [18265] 00 e6 04 78 00 82 05 20 00 da 03 9e 02 00 ae 01 e4 02 00 e6 01 ac 02 00 #> [18289] ba 03 90 02 00 d6 01 e2 01 00 10 b4 03 00 ad 01 fe 03 00 4f ca 03 00 8a #> [18313] 02 ce 01 00 b4 04 96 01 00 b6 04 c4 02 00 d0 03 a4 04 00 9e 03 be 05 00 #> [18337] e0 02 b6 04 00 aa 03 a0 04 00 ae 04 98 04 00 b6 05 ba 03 00 d2 04 9a 02 #> [18361] 00 9c 03 92 01 00 dc 04 1b 00 c6 05 da 01 00 8a 07 96 03 00 c8 07 8a 03 #> [18385] 00 b4 09 8a 03 00 8a 06 fc 02 00 aa 05 84 04 00 f0 05 c2 04 00 e8 04 c6 #> [18409] 04 00 a2 03 80 05 00 b8 04 e8 03 00 ac 05 cc 03 00 de 09 c0 06 00 90 07 #> [18433] be 04 00 dc 06 ec 03 00 bc 05 e0 03 00 9c 02 f0 02 00 84 03 e0 03 00 ec #> [18457] 01 a4 02 00 f6 02 64 00 d8 03 29 00 92 04 2e 00 f8 02 c0 02 00 82 01 de #> [18481] 03 00 30 d4 03 00 c8 01 de 03 00 da 01 9c 03 00 f0 02 ba 03 00 e6 03 ca #> [18505] 03 00 e2 02 dc 02 00 bc 02 fa 02 00 d8 01 f6 01 00 ee 02 ec 01 00 ca 02 #> [18529] 7f 00 9e 02 f7 03 00 dc 02 87 04 00 ec 02 a3 02 00 fc 01 b9 02 00 b6 01 #> [18553] e1 03 00 fc 01 dd 07 00 52 cf 04 00 8e 01 e1 02 00 e0 02 9d 01 00 d0 02 #> [18577] f5 01 00 c6 01 85 03 00 06 cf 04 00 28 f1 04 00 54 ed 03 00 d2 01 95 04 #> [18601] 00 82 03 71 00 98 03 93 01 00 84 01 cb 02 00 2b 95 04 00 00 e9 02 00 ee #> [18625] 01 a7 04 00 b4 03 bf 01 00 ee 05 8b 02 00 9c 03 a2 01 00 ae 02 9c 03 00 #> [18649] e2 01 a4 03 00 de 01 f4 02 00 f6 01 e4 02 00 86 06 6c 00 ee 06 4c 00 b2 #> [18673] 03 93 03 00 cc 02 b5 04 00 8e 01 bd 02 00 80 03 f7 01 00 a6 04 de 01 00 #> [18697] b6 02 ba 02 00 e2 01 dc 02 00 fa 01 d4 02 00 fc 02 ca 01 00 f8 02 90 02 #> [18721] 00 ae 02 da 03 00 68 c4 03 00 26 9e 03 00 0d b8 03 00 b6 01 f8 01 00 ae #> [18745] 03 08 00 f2 04 4b 00 f8 04 55 00 f8 03 86 02 00 f6 02 ec 03 00 d8 01 e8 #> [18769] 01 00 f8 04 34 00 07 16 00 44 a6 01 00 ae 02 e8 03 00 86 01 ae 02 00 89 #> [18793] 01 a8 01 00 ad 02 2d 00 37 b6 04 00 a2 03 36 00 82 04 64 00 b6 03 c2 03 #> [18817] 00 c2 01 ec 03 00 7d a2 02 00 9f 03 40 00 b3 02 b4 01 00 78 d0 02 00 9c #> [18841] 03 8e 02 00 f2 02 f8 01 00 c6 01 de 03 00 38 c2 04 00 54 dc 04 00 a2 02 #> [18865] ae 06 00 f2 01 ac 02 00 91 03 96 04 00 8a 01 d6 02 00 84 03 da 02 00 b5 #> [18889] 04 a8 0b 00 80 02 f8 06 00 aa 04 e0 02 00 b2 06 a2 02 00 e6 03 09 00 98 #> [18913] 03 9d 02 00 05 8f 03 00 87 01 b9 04 00 35 ad 05 00 f2 01 f3 01 00 96 02 #> [18937] 7e 00 72 a2 03 00 a0 01 d6 04 00 48 ea 02 00 40 e6 05 00 f2 01 ba 03 00 #> [18961] ec 03 ca 03 00 8a 04 f6 04 00 a6 04 ec 05 00 ee 03 e6 04 00 ac 03 d4 04 #> [18985] 00 8c 01 ce 04 00 3c 86 05 00 bb 01 98 03 00 91 02 13 00 e5 01 17 00 af #> [19009] 01 4c 00 32 aa 02 00 86 02 ac 02 00 d0 03 ee 02 00 fe 03 ea 02 00 c4 02 #> [19033] 76 00 e0 01 87 01 00 16 8d 02 00 75 a1 03 00 2f eb 02 00 6a 87 02 00 b4 #> [19057] 02 23 00 c8 02 a0 02 00 8e 01 ec 02 00 1b a6 03 00 25 80 04 00 1c f2 03 #> [19081] 00 9e 01 c0 02 00 e0 01 e2 01 00 98 02 8c 02 00 a0 02 a8 03 00 80 03 90 #> [19105] 06 00 d0 04 8a 06 00 71 06 00 95 01 80 02 00 81 03 a4 03 00 8f 03 e8 02 #> [19129] 00 d9 02 7c 00 e7 01 9a 01 00 f1 01 32 00 f1 01 96 01 00 dd 01 38 00 ab #> [19153] 02 a2 01 00 d5 02 c8 02 00 f7 01 b0 01 00 8d 01 1f 00 89 01 80 01 00 e3 #> [19177] 01 e2 01 00 89 01 4e 00 9d 01 70 00 97 01 ea 01 00 9f 01 e2 02 00 f7 01 #> [19201] ea 02 00 b9 03 a0 03 00 e1 02 92 03 00 a9 01 ae 03 00 87 01 dc 03 00 a1 #> [19225] 01 ac 05 00 19 a0 02 00 28 98 02 00 c3 01 c8 02 00 57 94 03 00 bf 01 d0 #> [19249] 01 00 b1 01 ac 02 00 5e 7a 00 01 b2 01 00 41 9e 04 00 71 b8 04 00 22 94 #> [19273] 03 00 03 f2 02 00 08 da 04 00 78 bc 02 00 1a a2 02 00 73 dc 01 00 15 98 #> [19297] 02 00 bf 01 80 03 00 16 da 01 00 ee 01 d4 02 00 19 c0 01 00 bd 01 7a 00 #> [19321] ad 01 12 00 c7 01 92 01 00 eb 01 44 00 eb 01 21 00 97 01 62 00 a1 01 ee #> [19345] 01 00 77 a6 01 00 c9 01 84 02 00 1f d4 02 00 25 e4 03 00 0c e6 04 00 3f #> [19369] f2 02 00 fb 01 ee 01 00 3f b8 02 00 03 d6 03 00 05 b4 04 00 8b 01 c6 02 #> [19393] 00 2c 90 03 00 10 80 06 00 47 a4 08 00 36 a8 05 00 68 bc 07 00 b6 01 ec #> [19417] 04 00 66 b6 02 00 53 a4 03 00 b5 01 aa 02 00 4d b8 01 00 30 ba 02 00 98 #> [19441] 01 c8 02 00 d8 01 f4 01 00 1d e6 01 00 23 96 02 00 2c e8 02 00 36 e6 01 #> [19465] 00 a5 01 92 01 00 fd 03 03 00 df 01 9c 01 00 f1 01 e0 01 00 f5 01 54 00 #> [19489] e7 01 0c 00 cb 01 aa 01 00 95 01 84 02 00 5b a0 02 00 47 a0 04 00 15 fc #> [19513] 05 00 09 80 08 00 38 a4 04 00 17 a8 04 00 b5 01 c0 02 00 38 ae 01 00 7e #> [19537] a6 01 00 1e 90 02 00 c1 01 4e 00 c3 02 55 00 c5 01 14 00 69 86 02 00 15 #> [19561] d2 02 00 5c bc 01 00 66 e2 01 00 44 ba 02 00 71 ea 03 00 3f f2 02 00 56 #> [19585] 8c 02 00 2c a2 02 00 93 01 d4 01 00 c3 01 de 01 00 23 e2 01 00 1a d4 01 #> [19609] 00 82 01 a4 01 00 78 a8 02 00 19 ae 02 00 69 de 01 00 01 8e 01 00 32 e2 #> [19633] 01 00 23 b0 02 00 89 01 a2 01 00 89 02 de 01 00 70 82 02 00 88 01 b6 02 #> [19657] 00 17 98 02 00 60 ca 01 00 2a e4 01 00 03 f0 02 00 04 aa 02 00 9c 01 a6 #> [19681] 02 00 a6 01 9c 01 00 3a e6 03 00 74 c8 03 00 0e d4 02 00 43 c8 01 00 05 #> [19705] d8 01 00 51 c4 01 00 2f d0 01 00 9e 01 e4 03 00 65 de 02 00 7b bc 04 00 #> [19729] 59 fc 06 00 53 ca 05 00 a1 01 a0 04 00 1f 94 03 00 8c 01 c0 02 00 a2 01 #> [19753] 84 03 00 be 04 96 04 00 2d a2 03 00 2b 8a 04 00 5b cc 03 00 37 b2 02 00 #> [19777] 86 01 c6 01 00 39 b2 01 00 61 60 00 32 de 01 00 0b b2 01 00 5f b6 01 00 #> [19801] 24 98 01 00 37 98 02 00 67 a0 02 00 29 8e 03 00 09 e2 01 00 66 90 02 00 #> [19825] 1d b0 01 00 a3 01 98 01 00 5b 96 01 00 40 d4 03 00 b4 01 80 06 00 6a ee #> [19849] 03 00 1d c8 06 00 30 d8 0a 00 68 88 0a 00 4c a0 08 00 84 01 90 07 00 aa #> [19873] 01 9c 05 00 4b 96 02 00 59 92 02 00 92 01 fc 01 00 44 7a 00 06 d4 03 00 #> [19897] 7f 9a 02 00 20 86 02 00 50 dc 02 00 1e ca 03 00 1d a0 04 00 50 f8 02 00 #> [19921] 9a 01 de 01 00 e4 01 a0 03 00 78 c4 03 00 45 b8 03 00 ec 01 fc 02 00 d6 #> [19945] 02 84 01 00 88 03 0b 00 bc 02 39 00 e6 02 28 00 6c ee 01 00 21 c6 01 00 #> [19969] ad 01 54 00 9b 02 2b 00 33 a4 02 00 39 d4 01 00 b3 01 fe 01 00 1b fc 01 #> [19993] 00 85 01 cc 01 00 c7 01 96 01 00 ef 01 60 00 63 f0 01 00 6a d0 01 00 88 #> [20017] 01 f6 01 00 55 ae 02 00 dd 02 e8 01 00 bb 01 7a 00 3f c6 01 00 39 8a 02 #> [20041] 00 b7 01 8a 02 00 5d 9e 02 00 65 a4 03 00 a9 01 a4 02 00 b5 01 96 03 00 #> [20065] 22 f2 02 00 0c cc 03 00 08 c6 04 00 0f b6 04 00 2b b8 04 00 32 c8 04 00 #> [20089] 3e 90 05 00 78 f4 03 00 e6 01 a6 02 00 d6 02 98 01 00 da 02 4e 00 d8 02 #> [20113] 1f 00 cc 01 38 00 8e 01 b6 02 00 04 90 02 00 69 6a 00 d9 0c 56 00 97 01 #> [20137] c2 01 00 0d e8 09 00 62 dc 02 00 8a 02 94 03 00 90 02 9c 01 00 ae 02 38 #> [20161] 00 ca 02 0d 00 bc 02 34 00 dc 01 8e 02 00 de 01 f0 02 00 d8 01 9a 02 00 #> [20185] 39 8c 02 00 e1 01 b8 02 00 c7 01 bc 01 00 5b bf 03 00 85 04 0a 00 ab 01 #> [20209] 60 00 17 ae 02 00 16 dc 03 00 9e 01 aa 04 00 66 cc 04 00 24 fc 03 00 3e #> [20233] fc 02 00 70 a6 02 00 2c 94 03 00 62 bc 04 00 5e fc 02 00 51 8a 01 00 ef #> [20257] 01 82 01 00 b1 02 3e 00 e9 01 9a 01 00 85 02 e8 01 00 c3 02 66 00 97 02 #> [20281] 17 00 bf 01 36 00 4a b6 01 00 8a 01 a8 01 00 02 a4 01 00 85 01 96 01 00 #> [20305] 35 72 00 fc 01 7c 00 b0 02 74 00 d8 02 fa 01 00 fe 01 d0 01 00 e2 01 18 #> [20329] 00 fe 01 77 00 90 01 c5 01 00 da 01 c1 01 00 d8 01 29 00 8e 01 24 00 66 #> [20353] b6 01 00 2e ec 01 00 f1 01 92 02 00 b7 02 96 02 00 bb 02 aa 02 00 b9 02 #> [20377] b8 01 00 e1 01 26 00 e7 08 02 00 c9 02 2d 00 2d 7c 00 ba 01 9e 01 00 d2 #> [20401] 02 aa 01 00 c2 01 08 00 d2 01 37 00 82 02 77 00 48 94 01 00 4d d4 01 00 #> [20425] e7 01 dc 01 00 93 03 96 01 00 dd 03 9e 02 00 f9 03 dc 01 00 01 98 04 00 #> [20449] aa 03 f6 02 00 c8 01 66 00 72 60 00 77 58 00 10 98 01 00 ac 01 98 01 00 #> [20473] a6 02 50 00 c6 02 46 00 c2 03 8e 01 00 ba 01 86 01 00 09 8a 02 00 55 be #> [20497] 01 00 c3 01 58 00 81 01 a8 01 00 2f e6 01 00 f1 01 e6 03 00 d5 02 c6 03 #> [20521] 00 6b d0 02 00 23 f0 02 00 08 ee 03 00 5c d6 06 00 44 b8 08 00 30 fc 07 #> [20545] 00 07 96 08 00 01 fc 0d 00 0b a2 04 00 b3 01 80 02 00 ed 01 8c 01 00 8b #> [20569] 01 aa 01 00 5c 8c 01 00 d2 01 b8 01 00 b8 01 b4 02 00 5c c2 03 00 56 a6 #> [20593] 05 00 20 b2 04 00 5f a2 04 00 37 e6 04 00 3a ba 06 00 58 e8 08 00 6a e6 #> [20617] 0b 00 92 01 fa 09 00 6c b8 07 00 1a 90 07 00 07 aa 08 00 0d e8 07 00 0d #> [20641] bc 08 00 56 90 08 00 4e e6 0b 00 6b c2 03 00 af 02 ae 01 00 c5 02 11 00 #> [20665] 8d 03 3d 00 bf 03 0e 00 d5 01 c8 01 00 73 fc 03 00 3b bc 03 00 70 94 02 #> [20689] 00 70 a2 02 00 11 e2 02 00 3c a6 04 00 b8 01 80 03 00 b6 01 7e 00 c6 01 #> [20713] 1d 00 8c 02 1b 00 09 84 02 00 24 b0 01 00 bc 01 f2 02 00 bc 01 96 04 00 #> [20737] d4 01 94 02 00 ec 01 ea 02 00 84 01 19 00 b2 02 d0 02 00 b8 01 2b 00 80 #> [20761] 01 6e 00 4a fc 01 00 0f d6 01 00 61 56 00 07 7a 00 1e b8 01 00 04 8a 02 #> [20785] 00 a6 01 64 00 c6 01 0a 00 d4 0a c9 01 00 9a 02 12 00 5e f0 01 00 a2 01 #> [20809] b8 01 00 ca 01 04 00 a6 02 42 00 8c 01 bc 01 00 03 84 03 00 00 92 05 00 #> [20833] 3e de 07 00 76 96 0a 00 d0 01 98 0c 00 57 d6 01 00 8b 01 66 00 f9 01 2c #> [20857] 00 d5 05 54 00 e6 03 a6 07 00 8a 01 fa 02 00 83 02 03 00 8f 04 2c 00 df #> [20881] 03 46 00 cf 01 88 03 00 b3 01 80 02 00 21 b6 01 00 78 a6 01 00 cd 0a 28 #> [20905] 00 5c 8c 06 00 e0 01 8d 01 00 dc 04 25 00 82 0e d9 01 00 10 d0 08 00 02 #> [20929] ac 08 00 3c e8 06 00 46 92 0b 00 ff 10 d1 01 00 3e f2 07 00 91 01 8e 01 #> [20953] 00 d6 02 82 1b 00 96 02 88 19 00 c6 04 a0 02 00 9c 03 b8 01 00 5c c4 02 #> [20977] 00 6a a8 04 00 20 f6 05 00 bb 01 d0 01 00 22 b4 02 00 b4 01 84 03 00 8e #> [21001] 02 ea 03 00 48 fa 02 00 e0 01 e6 04 00 8e 01 8a 02 00 10 90 03 00 2d ac #> [21025] 04 00 22 82 04 00 61 ee 03 00 99 01 f8 03 00 10 e8 03 00 a8 01 c2 05 00 #> [21049] 98 01 ca 03 00 56 f8 03 00 15 88 04 00 02 c0 03 00 da 01 ce 04 00 86 02 #> [21073] 88 07 00 82 02 80 08 00 94 02 e8 06 00 e0 02 ac 06 00 ee 01 d4 05 00 45 #> [21097] ec 02 00 48 ac 03 00 8a 01 fe 03 00 9e 01 ce 04 00 80 02 a4 04 00 a2 01 #> [21121] b6 04 00 3a 92 04 00 57 bc 03 00 9c 01 b4 03 00 c8 01 e2 03 00 72 e0 01 #> [21145] 00 c6 01 8e 01 00 8e 02 2e 00 f4 03 ab 01 00 88 03 41 00 bc 01 40 00 22 #> [21169] b8 02 00 f9 01 6a 00 8b 05 b4 01 00 c9 02 78 00 6f da 01 00 0a e6 01 00 #> [21193] 42 8e 02 00 30 f0 02 00 86 02 ec 05 00 b4 01 96 04 00 d6 01 ae 02 00 cc #> [21217] 01 54 00 da 01 e6 01 00 8a 01 9e 02 00 8e 01 c2 01 00 f2 01 fc 01 00 d0 #> [21241] 01 f6 02 00 3a b0 03 00 7f 62 00 f5 01 3f 00 ad 01 b6 02 00 a6 01 ea 02 #> [21265] 00 36 f0 02 00 6e c0 03 00 8a 02 da 03 00 aa 01 9e 03 00 72 fe 01 00 b4 #> [21289] 01 30 00 92 01 25 00 92 01 0e 00 29 c8 01 00 db 01 aa 02 00 0e 76 00 b6 #> [21313] c3 bb 73 ec f6 85 0e 00 a0 12 b7 0a 00 f0 15 ef 06 00 cc 0e f7 06 00 fc #> [21337] 0a 8d 07 00 a6 07 ff 06 00 e4 03 c7 0a 00 12 8f 0e 00 1e 95 15 00 1c 95 #> [21361] 15 00 e8 03 e1 11 00 b2 07 c3 0a 00 a8 07 ff 06 00 ac 07 ff 06 00 f6 0a #> [21385] b7 03 00 ea 0a 94 07 00 88 07 da 11 00 17 d4 11 00 e3 03 8c 0e 00 11 cc #> [21409] 0a 00 09 88 07 00 9e 07 cc 03 00 ee 0a d0 03 00 a4 07 bb 03 00 e2 03 c7 #> [21433] 0a 00 ac 07 c3 0a 00 b2 07 c3 0a 00 80 0b bf 0a 00 f2 0a 05 00 80 12 a2 #> [21457] 0e 00 96 07 90 07 00 e0 0a ac 0e 00 1d 96 15 00 85 04 e6 26 00 d3 07 e2 #> [21481] 26 00 bf 07 a2 15 00 0d cc 0a 00 c4 03 8c 07 00 c6 03 8c 07 00 c0 0e d4 #> [21505] 03 00 a2 07 08 00 cc 0e 89 07 00 d8 03 83 07 00 ce 07 d9 1f 00 2e a5 23 #> [21529] 00 26 af 1c 00 1c d3 11 00 de 03 c7 0a 00 de 03 c7 0a 00 d0 0e bb 0a 00 #> [21553] 9a 12 af 03 00 92 12 02 00 e8 0a 94 07 00 e4 0a d6 0a 00 e2 0a d6 0a 00 #> [21577] d2 15 a6 0e 00 a4 07 bb 03 00 e2 03 c7 0a 00 14 8f 0e 00 c1 03 cf 0a 00 #> [21601] c9 03 8b 07 00 87 12 99 07 00 e3 0a d5 0a 00 95 07 8f 07 00 c5 03 8b 07 #> [21625] 00 ad 0e 9d 0e 00 ff 11 e5 11 00 b1 20 fd 18 00 ff 11 a1 0e 00 ab 19 a1 #> [21649] 07 00 8b 12 d5 03 00 f3 0a 0b 00 c9 03 c7 03 00 cd 03 c7 03 00 04 c3 03 #> [21673] 00 20 95 15 00 c9 03 8b 07 00 85 12 99 07 00 99 24 df 0a 00 d3 20 21 00 #> [21697] c3 19 b0 0a 00 ed 15 82 07 00 b5 19 1b 00 b9 19 ec 06 00 9f 12 f4 06 00 #> [21721] ff 0a d2 0a 00 89 0b c8 11 00 bb 07 90 15 00 c3 07 d2 18 00 fb 03 f0 1f #> [21745] 00 fd 03 de 1f 00 f4 06 ea 1f 00 98 0e f2 1f 00 a6 0e a6 15 00 d6 0a a2 #> [21769] 15 00 6a 0d 0a 0b 23 66 61 6c 73 65 43 6f 6c 6f 72 6a 06 32 04 6e 75 6c #> [21793] 6c 6a 09 11 cd cc cc cc cc cc 31 40 6a 09 11 00 00 00 00 00 80 30 40 6a #> [21817] 09 11 33 33 33 33 33 b3 30 40 6a 09 11 33 33 33 33 33 33 30 40 6a 02 18 #> [21841] 13 6a 09 11 66 66 66 66 66 66 32 40 6a 09 11 66 66 66 66 66 66 2b 40 6a #> [21865] 05 0a 03 4e 43 52 6a 06 32 04 6e 75 6c 6c 72 16 00 00 01 01 02 02 03 03 #> [21889] 04 04 05 05 06 06 07 07 08 08 09 09 0a 0a  # other geojson class objects x <- '{ \"type\": \"Polygon\", \"coordinates\": [   [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]   ] }' (y <- polygon(x)) #> <Polygon>  #>   no. lines:  1  #>   no. holes:  0  #>   no. nodes / line:  5  #>   coordinates:  [[[100,0],[101,0],[101,1],[100,1],[100,0]]]  to_geobuf(y) #>  [1] 10 02 18 06 2a 1a 0a 18 08 04 12 01 04 1a 11 80 84 af 5f 00 80 89 7a 00 00 #> [26] 80 89 7a ff 88 7a 00  x <- '{\"type\": \"MultiPoint\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ] }' (y <- multipoint(x)) #> <MultiPoint>  #>   coordinates:  [[100,0],[101,1]]  to_geobuf(y) #>  [1] 10 02 18 06 2a 11 0a 0f 08 01 1a 0b 80 84 af 5f 00 80 89 7a 80 89 7a"},{"path":"https://docs.ropensci.org/geojson/reference/geojson-package.html","id":null,"dir":"Reference","previous_headings":"","what":"geojson — geojson-package","title":"geojson — geojson-package","text":"Classes GeoJSON make working GeoJSON easier","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geojson-package.html","id":"package-api","dir":"Reference","previous_headings":"","what":"Package API","title":"geojson — geojson-package","text":"GeoJSON objects: feature - Feature featurecollection - FeatureCollection geometrycollection - GeometryCollection linestring - LineString multilinestring - MultiLineString multipoint - MultiPoint multipolygon - MultiPolygon point - Point polygon - Polygon assigned two classes. class geojson, also class name geo plus name geometry, e.g., geopolygon polygon. GeoJSON properties: properties_add, properties_get - Add get properties crs_add, crs_get - Add get CRS bbox_add, bbox_get - Add get bounding box GeoJSON operations: geo_bbox - calculate bounding box GeoJSON object geo_pretty - pretty print GeoJSON object geo_type - get object type GeoJSON object geo_write - easily write GeoJSON file complete GeoJSON operations provdied package geoops GeoJSON/Geobuf serialization: from_geobuf - Geobuf GeoJSON to_geobuf - GeoJSON Geobuf Check https://github.com/mapbox/geobuf inormation Geobuf format","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geojson-package.html","id":"coordinate-reference-system","dir":"Reference","previous_headings":"","what":"Coordinate Reference System","title":"geojson — geojson-package","text":"According RFC 7946 (https://datatracker.ietf.org/doc/html/rfc7946#page-12) CRS GeoJSON objects must WGS-84, equivalent urn:ogc:def:crs:OGC::CRS84. lat/long must decimal degrees. Given , considering GeoJSON blobs exist CRS attributes , provide CRS helpers package. moving forward likely used much.","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geojson-package.html","id":"coordinate-precision","dir":"Reference","previous_headings":"","what":"Coordinate precision","title":"geojson — geojson-package","text":"According RFC 7946 (https://datatracker.ietf.org/doc/html/rfc7946#section-11.2) consider 6 decimal places amoutns ~10 centimeters, precision well within current GPS sytems. , GeoJSON text containing many detailed Polygons can inflated almost factor two increasing coordinate precision 6 15 decimal places - consider whether worth decimal places.","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geojson-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"geojson — geojson-package","text":"Scott Chamberlain, Jeroen Ooms","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geojson_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for use in examples — geojson_data","title":"Data for use in examples — geojson_data","text":"Data use examples","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geojson_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for use in examples — geojson_data","text":"list character strings points polygons FeatureCollection Feature Geojson formats.","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geojson_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data for use in examples — geojson_data","text":"data objects included list, accessible name featurecollection_point - FeatureCollection single point filter_features - FeatureCollection points points_average - FeatureCollection points polygons_average - FeatureCollection polygons points_count - FeatureCollection points polygons_count - FeatureCollection polygons points_within - FeatureCollection points polygons_within - FeatureCollection polygons poly - Feaure single 1 degree 1 degree polygon multipoly - FeatureCollection two 1 degree 1 degree polygons polygons_aggregate - FeatureCollection Polygons turf.js examples points_aggregate - FeatureCollection Points turf.js examples","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geometrycollection.html","id":null,"dir":"Reference","previous_headings":"","what":"geometrycollection class — geometrycollection","title":"geometrycollection class — geometrycollection","text":"geometrycollection class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geometrycollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geometrycollection class — geometrycollection","text":"","code":"geometrycollection(x)"},{"path":"https://docs.ropensci.org/geojson/reference/geometrycollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geometrycollection class — geometrycollection","text":"x input","code":""},{"path":"https://docs.ropensci.org/geojson/reference/geometrycollection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geometrycollection class — geometrycollection","text":"","code":"x <- '{  \"type\": \"GeometryCollection\",  \"geometries\": [    {      \"type\": \"Point\",      \"coordinates\": [100.0, 0.0]    },    {      \"type\": \"LineString\",      \"coordinates\": [ [101.0, 0.0], [102.0, 1.0] ]    }   ] }' (y <- geometrycollection(x)) #> <GeometryCollection>  #>   geometries (n): 2  #>   geometries (geometry / length): #>     Point / 2 #>     LineString / 2  geo_type(y) #> [1] \"GeometryCollection\" geo_pretty(y) #> { #>     \"type\": \"GeometryCollection\", #>     \"geometries\": [ #>         { #>             \"type\": \"Point\", #>             \"coordinates\": [ #>                 100.0, #>                 0.0 #>             ] #>         }, #>         { #>             \"type\": \"LineString\", #>             \"coordinates\": [ #>                 [ #>                     101.0, #>                     0.0 #>                 ], #>                 [ #>                     102.0, #>                     1.0 #>                 ] #>             ] #>         } #>     ] #> } #>   geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"GeometryCollection\" #>  #> $geometries #> $geometries[[1]] #> $geometries[[1]]$type #> [1] \"Point\" #>  #> $geometries[[1]]$coordinates #> $geometries[[1]]$coordinates[[1]] #> [1] 100 #>  #> $geometries[[1]]$coordinates[[2]] #> [1] 0 #>  #>  #>  #> $geometries[[2]] #> $geometries[[2]]$type #> [1] \"LineString\" #>  #> $geometries[[2]]$coordinates #> $geometries[[2]]$coordinates[[1]] #> $geometries[[2]]$coordinates[[1]][[1]] #> [1] 101 #>  #> $geometries[[2]]$coordinates[[1]][[2]] #> [1] 0 #>  #>  #> $geometries[[2]]$coordinates[[2]] #> $geometries[[2]]$coordinates[[2]][[1]] #> [1] 102 #>  #> $geometries[[2]]$coordinates[[2]][[2]] #> [1] 1 #>  #>  #>  #>  #>  unlink(f)  # bigger geometrycollection file <- system.file(\"examples\", \"geometrycollection1.geojson\", package = \"geojson\") (y <- geometrycollection(paste0(readLines(file), collapse=\"\"))) #> <GeometryCollection>  #>   geometries (n): 3  #>   geometries (geometry / length): #>     Point / 2 #>     Polygon / 1 #>     LineString / 36  geo_type(y) #> [1] \"GeometryCollection\" geo_pretty(y) #> { #>     \"type\": \"GeometryCollection\", #>     \"geometries\": [ #>         { #>             \"type\": \"Point\", #>             \"coordinates\": [ #>                 -80.66080570220947, #>                 35.04939206472683 #>             ] #>         }, #>         { #>             \"type\": \"Polygon\", #>             \"coordinates\": [ #>                 [ #>                     [ #>                         -80.66458225250244, #>                         35.04496519190309 #>                     ], #>                     [ #>                         -80.66344499588013, #>                         35.04603679820616 #>                     ], #>                     [ #>                         -80.66258668899536, #>                         35.045580049697556 #>                     ], #>                     [ #>                         -80.66387414932251, #>                         35.044280059194946 #>                     ], #>                     [ #>                         -80.66458225250244, #>                         35.04496519190309 #>                     ] #>                 ] #>             ] #>         }, #>         { #>             \"type\": \"LineString\", #>             \"coordinates\": [ #>                 [ #>                     -80.66237211227417, #>                     35.05950973022538 #>                 ], #>                 [ #>                     -80.66269397735596, #>                     35.0592638296087 #>                 ], #>                 [ #>                     -80.66284418106079, #>                     35.05893010615862 #>                 ], #>                 [ #>                     -80.66308021545409, #>                     35.05833291342246 #>                 ], #>                 [ #>                     -80.66359519958496, #>                     35.057753281001425 #>                 ], #>                 [ #>                     -80.66387414932251, #>                     35.05740198662245 #>                 ], #>                 [ #>                     -80.66441059112549, #>                     35.05703312589789 #>                 ], #>                 [ #>                     -80.66486120223999, #>                     35.056787217822475 #>                 ], #>                 [ #>                     -80.66541910171509, #>                     35.05650617911516 #>                 ], #>                 [ #>                     -80.66563367843628, #>                     35.05631296444281 #>                 ], #>                 [ #>                     -80.66601991653441, #>                     35.055891403570705 #>                 ], #>                 [ #>                     -80.66619157791138, #>                     35.05545227534804 #>                 ], #>                 [ #>                     -80.66619157791138, #>                     35.05517123204622 #>                 ], #>                 [ #>                     -80.66625595092773, #>                     35.05489018777713 #>                 ], #>                 [ #>                     -80.6662130355835, #>                     35.054222703761525 #>                 ], #>                 [ #>                     -80.6662130355835, #>                     35.05392409072499 #>                 ], #>                 [ #>                     -80.66595554351807, #>                     35.05290528508858 #>                 ], #>                 [ #>                     -80.66569805145262, #>                     35.052044560077285 #>                 ], #>                 [ #>                     -80.66550493240356, #>                     35.0514824490509 #>                 ], #>                 [ #>                     -80.665762424469, #>                     35.05048117920187 #>                 ], #>                 [ #>                     -80.66617012023926, #>                     35.04972582715769 #>                 ], #>                 [ #>                     -80.66651344299316, #>                     35.049286665781096 #>                 ], #>                 [ #>                     -80.66692113876343, #>                     35.0485313026898 #>                 ], #>                 [ #>                     -80.66700696945189, #>                     35.048215102112344 #>                 ], #>                 [ #>                     -80.66707134246826, #>                     35.04777593261294 #>                 ], #>                 [ #>                     -80.66704988479614, #>                     35.04738946150025 #>                 ], #>                 [ #>                     -80.66696405410767, #>                     35.04698542156371 #>                 ], #>                 [ #>                     -80.66681385040283, #>                     35.046353007216055 #>                 ], #>                 [ #>                     -80.66659927368164, #>                     35.04596652937105 #>                 ], #>                 [ #>                     -80.66640615463257, #>                     35.04561518428889 #>                 ], #>                 [ #>                     -80.6659984588623, #>                     35.045193568195565 #>                 ], #>                 [ #>                     -80.66552639007568, #>                     35.044877354697526 #>                 ], #>                 [ #>                     -80.6649899482727, #>                     35.04454357245502 #>                 ], #>                 [ #>                     -80.66449642181396, #>                     35.04417465365292 #>                 ], #>                 [ #>                     -80.66385269165039, #>                     35.04387600387859 #>                 ], #>                 [ #>                     -80.66303730010986, #>                     35.043717894732545 #>                 ] #>             ] #>         } #>     ] #> } #>"},{"path":"https://docs.ropensci.org/geojson/reference/linestring.html","id":null,"dir":"Reference","previous_headings":"","what":"linestring class — linestring","title":"linestring class — linestring","text":"linestring class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/linestring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"linestring class — linestring","text":"","code":"linestring(x)"},{"path":"https://docs.ropensci.org/geojson/reference/linestring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"linestring class — linestring","text":"x input","code":""},{"path":"https://docs.ropensci.org/geojson/reference/linestring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"linestring class — linestring","text":"","code":"x <- '{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ] }' (y <- linestring(x)) #> <LineString>  #>   coordinates:  [[100,0],[101,1]]  geo_type(y) #> [1] \"LineString\" geo_pretty(y) #> { #>     \"type\": \"LineString\", #>     \"coordinates\": [ #>         [ #>             100.0, #>             0.0 #>         ], #>         [ #>             101.0, #>             1.0 #>         ] #>     ] #> } #>   geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"LineString\" #>  #> $coordinates #> $coordinates[[1]] #> $coordinates[[1]][[1]] #> [1] 100 #>  #> $coordinates[[1]][[2]] #> [1] 0 #>  #>  #> $coordinates[[2]] #> $coordinates[[2]][[1]] #> [1] 101 #>  #> $coordinates[[2]][[2]] #> [1] 1 #>  #>  #>  unlink(f)  # add to a data.frame library('tibble') tibble(a = 1:5, b = list(y)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <glnstrng [1]> #> 2     2 <glnstrng [1]> #> 3     3 <glnstrng [1]> #> 4     4 <glnstrng [1]> #> 5     5 <glnstrng [1]>"},{"path":"https://docs.ropensci.org/geojson/reference/linting_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"GeoJSON Linting — linting_opts","title":"GeoJSON Linting — linting_opts","text":"GeoJSON Linting","code":""},{"path":"https://docs.ropensci.org/geojson/reference/linting_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeoJSON Linting — linting_opts","text":"","code":"linting_opts(   lint = FALSE,   method = \"hint\",   error = FALSE,   suppress_pkgcheck_warnings = FALSE )"},{"path":"https://docs.ropensci.org/geojson/reference/linting_opts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeoJSON Linting — linting_opts","text":"lint (logical) lint geojson . Default: FALSE method (character) method use: hint - uses geojsonlint::geojson_hint() lint - uses geojsonlint::geojson_lint() validate - uses geojsonlint::geojson_validate() error (logical) Throw error parse failure? TRUE, function returns TRUE success, stop error message error. Default: FALSE suppress_pkgcheck_warnings (logical) Suppress warning geojsonlint installed? Default: FALSE","code":""},{"path":"https://docs.ropensci.org/geojson/reference/linting_opts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GeoJSON Linting — linting_opts","text":"linting_opts deprecated 0.3.5","code":""},{"path":"https://docs.ropensci.org/geojson/reference/multilinestring.html","id":null,"dir":"Reference","previous_headings":"","what":"multilinestring class — multilinestring","title":"multilinestring class — multilinestring","text":"multilinestring class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/multilinestring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multilinestring class — multilinestring","text":"","code":"multilinestring(x)"},{"path":"https://docs.ropensci.org/geojson/reference/multilinestring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multilinestring class — multilinestring","text":"x input","code":""},{"path":"https://docs.ropensci.org/geojson/reference/multilinestring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multilinestring class — multilinestring","text":"","code":"x <- '{ \"type\": \"MultiLineString\",  \"coordinates\": [ [ [100.0, 0.0], [101.0, 1.0] ], [ [102.0, 2.0], [103.0, 3.0] ] ] }' (y <- multilinestring(x)) #> <MultiLineString>  #>   no. lines:  2  #>   no. nodes / line:  2, 2  #>   coordinates:  [[[100,0],[101,1]],[[102,2],[103,3]]]  y[1] #> [1] \"{ \\\"type\\\": \\\"MultiLineString\\\",\\n \\\"coordinates\\\": [ [ [100.0, 0.0], [101.0, 1.0] ], [ [102.0, 2.0], [103.0, 3.0] ] ] }\" geo_type(y) #> [1] \"MultiLineString\" geo_pretty(y) #> { #>     \"type\": \"MultiLineString\", #>     \"coordinates\": [ #>         [ #>             [ #>                 100.0, #>                 0.0 #>             ], #>             [ #>                 101.0, #>                 1.0 #>             ] #>         ], #>         [ #>             [ #>                 102.0, #>                 2.0 #>             ], #>             [ #>                 103.0, #>                 3.0 #>             ] #>         ] #>     ] #> } #>   geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"MultiLineString\" #>  #> $coordinates #> $coordinates[[1]] #> $coordinates[[1]][[1]] #> $coordinates[[1]][[1]][[1]] #> [1] 100 #>  #> $coordinates[[1]][[1]][[2]] #> [1] 0 #>  #>  #> $coordinates[[1]][[2]] #> $coordinates[[1]][[2]][[1]] #> [1] 101 #>  #> $coordinates[[1]][[2]][[2]] #> [1] 1 #>  #>  #>  #> $coordinates[[2]] #> $coordinates[[2]][[1]] #> $coordinates[[2]][[1]][[1]] #> [1] 102 #>  #> $coordinates[[2]][[1]][[2]] #> [1] 2 #>  #>  #> $coordinates[[2]][[2]] #> $coordinates[[2]][[2]][[1]] #> [1] 103 #>  #> $coordinates[[2]][[2]][[2]] #> [1] 3 #>  #>  #>  #>  unlink(f)  file <- system.file(\"examples\", 'multilinestring_one.geojson',    package = \"geojson\") con <- file(file) str <- paste0(readLines(con), collapse = \" \") (y <- multilinestring(str)) #> <MultiLineString>  #>   no. lines:  2  #>   no. nodes / line:  80, 20  #>   coordinates:  [[[-80.51399230957031,28.069556808283608],[-80.51193237304688,28.05743 ...  y[1] #> [1] \"{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[-80.51399230957031,28.069556808283608],[-80.51193237304688,28.057438520876673],[-80.49819946289062,28.05622661698537],[-80.5023193359375,28.04471284867091],[-80.48583984375,28.042288740362853],[-80.50575256347656,28.028349057505775],[-80.50163269042969,28.02168161433489],[-80.49476623535156,28.021075462659883],[-80.48652648925781,28.021075462659883],[-80.47691345214844,28.021075462659883],[-80.46936035156249,28.015619944017807],[-80.47760009765624,28.007133032319448],[-80.49201965332031,27.998039170620494],[-80.46730041503906,27.962262536875905],[-80.46524047851562,27.91980029694533],[-80.40550231933594,27.930114089618602],[-80.39657592773438,27.980455528671527],[-80.41305541992188,27.982274659104082],[-80.42953491210938,27.990763528690582],[-80.4144287109375,28.00955793247135],[-80.3594970703125,27.972572275562527],[-80.36224365234375,27.948919060105453],[-80.38215637207031,27.913732900444284],[-80.41786193847656,27.881570017022806],[-80.40550231933594,27.860932192608534],[-80.39382934570312,27.85425440786446],[-80.37803649902344,27.86336037597851],[-80.38215637207031,27.880963078302393],[-80.36842346191405,27.888246118437756],[-80.35743713378906,27.882176952341734],[-80.35469055175781,27.86882358965466],[-80.3594970703125,27.8421119273228],[-80.37940979003906,27.83300417483936],[-80.39932250976561,27.82511017099003],[-80.40069580078125,27.79352841586229],[-80.36155700683594,27.786846483587688],[-80.35537719726562,27.794743268514615],[-80.36705017089844,27.800209937418252],[-80.36889553070068,27.801918215058347],[-80.3690242767334,27.803930152059845],[-80.36713600158691,27.805942051806845],[-80.36584854125977,27.805524490772143],[-80.36563396453857,27.80465140342285],[-80.36619186401367,27.803095012921272],[-80.36623477935791,27.801842292177923],[-80.36524772644043,27.80127286888392],[-80.36224365234375,27.801158983867033],[-80.36065578460693,27.802639479776524],[-80.36138534545898,27.803740348273823],[-80.36220073699951,27.804803245204976],[-80.36190032958984,27.806625330038287],[-80.3609561920166,27.80742248254359],[-80.35932540893555,27.806853088493792],[-80.35889625549315,27.806321651354835],[-80.35902500152588,27.805448570411585],[-80.35863876342773,27.804461600896783],[-80.35739421844482,27.804461600896783],[-80.35700798034668,27.805334689771293],[-80.35696506500244,27.80673920932572],[-80.35726547241211,27.80772615814989],[-80.35808086395264,27.808295547623707],[-80.3585958480835,27.80928248230861],[-80.35653591156006,27.80943431761813],[-80.35572052001953,27.808637179875486],[-80.3555917739868,27.80772615814989],[-80.3555917739868,27.806055931810487],[-80.35572052001953,27.803778309057556],[-80.35537719726562,27.801804330717825],[-80.3554630279541,27.799564581098746],[-80.35670757293701,27.799564581098746],[-80.35499095916748,27.796831264786892],[-80.34610748291016,27.79478123244122],[-80.34404754638672,27.802070060660014],[-80.34748077392578,27.804955086774896],[-80.3433609008789,27.805790211616266],[-80.34353256225586,27.8101555324401],[-80.33499240875244,27.810079615315917],[-80.33383369445801,27.805676331334084],[-80.33022880554199,27.801652484744796],[-80.32872676849365,27.80848534345178]],[[-80.51193237304688,28.091366281406945],[-80.47760009765624,28.074403740607135],[-80.47210693359375,28.058650411105386],[-80.46936035156249,28.01016414897993],[-80.45425415039061,27.99682659773872],[-80.44464111328125,28.02956127552927],[-80.43228149414062,28.024712321517228],[-80.40069580078125,28.01743848094423],[-80.3704833984375,28.004101830368654],[-80.35537719726562,27.991976169784156],[-80.3485107421875,27.947099367319762],[-80.32379150390625,27.937393821330247],[-80.34027099609375,27.879142241732627],[-80.35263061523436,27.90948552034696],[-80.36773681640625,27.858503954841247],[-80.34027099609375,27.822073862795612],[-80.29220581054688,27.853647316127383],[-80.30319213867188,27.860932192608534],[-80.30319213867188,27.88278388425912],[-80.2935791015625,27.894921808206057]]]}\" geo_type(y) #> [1] \"MultiLineString\" geo_pretty(y) #> { #>     \"type\": \"MultiLineString\", #>     \"coordinates\": [ #>         [ #>             [ #>                 -80.51399230957031, #>                 28.069556808283608 #>             ], #>             [ #>                 -80.51193237304688, #>                 28.057438520876673 #>             ], #>             [ #>                 -80.49819946289062, #>                 28.05622661698537 #>             ], #>             [ #>                 -80.5023193359375, #>                 28.04471284867091 #>             ], #>             [ #>                 -80.48583984375, #>                 28.042288740362853 #>             ], #>             [ #>                 -80.50575256347656, #>                 28.028349057505775 #>             ], #>             [ #>                 -80.50163269042969, #>                 28.02168161433489 #>             ], #>             [ #>                 -80.49476623535156, #>                 28.021075462659883 #>             ], #>             [ #>                 -80.48652648925781, #>                 28.021075462659883 #>             ], #>             [ #>                 -80.47691345214844, #>                 28.021075462659883 #>             ], #>             [ #>                 -80.46936035156249, #>                 28.015619944017807 #>             ], #>             [ #>                 -80.47760009765624, #>                 28.007133032319448 #>             ], #>             [ #>                 -80.49201965332031, #>                 27.998039170620494 #>             ], #>             [ #>                 -80.46730041503906, #>                 27.962262536875905 #>             ], #>             [ #>                 -80.46524047851562, #>                 27.91980029694533 #>             ], #>             [ #>                 -80.40550231933594, #>                 27.930114089618602 #>             ], #>             [ #>                 -80.39657592773438, #>                 27.980455528671527 #>             ], #>             [ #>                 -80.41305541992188, #>                 27.982274659104082 #>             ], #>             [ #>                 -80.42953491210938, #>                 27.990763528690582 #>             ], #>             [ #>                 -80.4144287109375, #>                 28.00955793247135 #>             ], #>             [ #>                 -80.3594970703125, #>                 27.972572275562527 #>             ], #>             [ #>                 -80.36224365234375, #>                 27.948919060105453 #>             ], #>             [ #>                 -80.38215637207031, #>                 27.913732900444284 #>             ], #>             [ #>                 -80.41786193847656, #>                 27.881570017022806 #>             ], #>             [ #>                 -80.40550231933594, #>                 27.860932192608534 #>             ], #>             [ #>                 -80.39382934570312, #>                 27.85425440786446 #>             ], #>             [ #>                 -80.37803649902344, #>                 27.86336037597851 #>             ], #>             [ #>                 -80.38215637207031, #>                 27.880963078302393 #>             ], #>             [ #>                 -80.36842346191405, #>                 27.888246118437756 #>             ], #>             [ #>                 -80.35743713378906, #>                 27.882176952341734 #>             ], #>             [ #>                 -80.35469055175781, #>                 27.86882358965466 #>             ], #>             [ #>                 -80.3594970703125, #>                 27.8421119273228 #>             ], #>             [ #>                 -80.37940979003906, #>                 27.83300417483936 #>             ], #>             [ #>                 -80.39932250976561, #>                 27.82511017099003 #>             ], #>             [ #>                 -80.40069580078125, #>                 27.79352841586229 #>             ], #>             [ #>                 -80.36155700683594, #>                 27.786846483587688 #>             ], #>             [ #>                 -80.35537719726562, #>                 27.794743268514615 #>             ], #>             [ #>                 -80.36705017089844, #>                 27.800209937418252 #>             ], #>             [ #>                 -80.36889553070068, #>                 27.801918215058347 #>             ], #>             [ #>                 -80.3690242767334, #>                 27.803930152059845 #>             ], #>             [ #>                 -80.36713600158691, #>                 27.805942051806845 #>             ], #>             [ #>                 -80.36584854125977, #>                 27.805524490772143 #>             ], #>             [ #>                 -80.36563396453857, #>                 27.80465140342285 #>             ], #>             [ #>                 -80.36619186401367, #>                 27.803095012921272 #>             ], #>             [ #>                 -80.36623477935791, #>                 27.801842292177923 #>             ], #>             [ #>                 -80.36524772644043, #>                 27.80127286888392 #>             ], #>             [ #>                 -80.36224365234375, #>                 27.801158983867033 #>             ], #>             [ #>                 -80.36065578460693, #>                 27.802639479776524 #>             ], #>             [ #>                 -80.36138534545898, #>                 27.803740348273823 #>             ], #>             [ #>                 -80.36220073699951, #>                 27.804803245204976 #>             ], #>             [ #>                 -80.36190032958984, #>                 27.806625330038287 #>             ], #>             [ #>                 -80.3609561920166, #>                 27.80742248254359 #>             ], #>             [ #>                 -80.35932540893555, #>                 27.806853088493792 #>             ], #>             [ #>                 -80.35889625549315, #>                 27.806321651354835 #>             ], #>             [ #>                 -80.35902500152588, #>                 27.805448570411585 #>             ], #>             [ #>                 -80.35863876342773, #>                 27.804461600896783 #>             ], #>             [ #>                 -80.35739421844482, #>                 27.804461600896783 #>             ], #>             [ #>                 -80.35700798034668, #>                 27.805334689771293 #>             ], #>             [ #>                 -80.35696506500244, #>                 27.80673920932572 #>             ], #>             [ #>                 -80.35726547241211, #>                 27.80772615814989 #>             ], #>             [ #>                 -80.35808086395264, #>                 27.808295547623707 #>             ], #>             [ #>                 -80.3585958480835, #>                 27.80928248230861 #>             ], #>             [ #>                 -80.35653591156006, #>                 27.80943431761813 #>             ], #>             [ #>                 -80.35572052001953, #>                 27.808637179875486 #>             ], #>             [ #>                 -80.3555917739868, #>                 27.80772615814989 #>             ], #>             [ #>                 -80.3555917739868, #>                 27.806055931810487 #>             ], #>             [ #>                 -80.35572052001953, #>                 27.803778309057556 #>             ], #>             [ #>                 -80.35537719726562, #>                 27.801804330717825 #>             ], #>             [ #>                 -80.3554630279541, #>                 27.799564581098746 #>             ], #>             [ #>                 -80.35670757293701, #>                 27.799564581098746 #>             ], #>             [ #>                 -80.35499095916748, #>                 27.796831264786892 #>             ], #>             [ #>                 -80.34610748291016, #>                 27.79478123244122 #>             ], #>             [ #>                 -80.34404754638672, #>                 27.802070060660014 #>             ], #>             [ #>                 -80.34748077392578, #>                 27.804955086774896 #>             ], #>             [ #>                 -80.3433609008789, #>                 27.805790211616266 #>             ], #>             [ #>                 -80.34353256225586, #>                 27.8101555324401 #>             ], #>             [ #>                 -80.33499240875244, #>                 27.810079615315917 #>             ], #>             [ #>                 -80.33383369445801, #>                 27.805676331334084 #>             ], #>             [ #>                 -80.33022880554199, #>                 27.801652484744796 #>             ], #>             [ #>                 -80.32872676849365, #>                 27.80848534345178 #>             ] #>         ], #>         [ #>             [ #>                 -80.51193237304688, #>                 28.091366281406945 #>             ], #>             [ #>                 -80.47760009765624, #>                 28.074403740607135 #>             ], #>             [ #>                 -80.47210693359375, #>                 28.058650411105386 #>             ], #>             [ #>                 -80.46936035156249, #>                 28.01016414897993 #>             ], #>             [ #>                 -80.45425415039061, #>                 27.99682659773872 #>             ], #>             [ #>                 -80.44464111328125, #>                 28.02956127552927 #>             ], #>             [ #>                 -80.43228149414062, #>                 28.024712321517228 #>             ], #>             [ #>                 -80.40069580078125, #>                 28.01743848094423 #>             ], #>             [ #>                 -80.3704833984375, #>                 28.004101830368654 #>             ], #>             [ #>                 -80.35537719726562, #>                 27.991976169784156 #>             ], #>             [ #>                 -80.3485107421875, #>                 27.947099367319762 #>             ], #>             [ #>                 -80.32379150390625, #>                 27.937393821330247 #>             ], #>             [ #>                 -80.34027099609375, #>                 27.879142241732627 #>             ], #>             [ #>                 -80.35263061523436, #>                 27.90948552034696 #>             ], #>             [ #>                 -80.36773681640625, #>                 27.858503954841247 #>             ], #>             [ #>                 -80.34027099609375, #>                 27.822073862795612 #>             ], #>             [ #>                 -80.29220581054688, #>                 27.853647316127383 #>             ], #>             [ #>                 -80.30319213867188, #>                 27.860932192608534 #>             ], #>             [ #>                 -80.30319213867188, #>                 27.88278388425912 #>             ], #>             [ #>                 -80.2935791015625, #>                 27.894921808206057 #>             ] #>         ] #>     ] #> } #>   close(con)  # add to a data.frame library('tibble') tibble(a = 1:5, b = list(y)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <gmltlnst [1]> #> 2     2 <gmltlnst [1]> #> 3     3 <gmltlnst [1]> #> 4     4 <gmltlnst [1]> #> 5     5 <gmltlnst [1]>"},{"path":"https://docs.ropensci.org/geojson/reference/multipoint.html","id":null,"dir":"Reference","previous_headings":"","what":"multipoint class — multipoint","title":"multipoint class — multipoint","text":"multipoint class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/multipoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multipoint class — multipoint","text":"","code":"multipoint(x)"},{"path":"https://docs.ropensci.org/geojson/reference/multipoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multipoint class — multipoint","text":"x input","code":""},{"path":"https://docs.ropensci.org/geojson/reference/multipoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multipoint class — multipoint","text":"","code":"x <- '{\"type\": \"MultiPoint\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ] }' (y <- multipoint(x)) #> <MultiPoint>  #>   coordinates:  [[100,0],[101,1]]  geo_type(y) #> [1] \"MultiPoint\" geo_pretty(y) #> { #>     \"type\": \"MultiPoint\", #>     \"coordinates\": [ #>         [ #>             100.0, #>             0.0 #>         ], #>         [ #>             101.0, #>             1.0 #>         ] #>     ] #> } #>   geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"MultiPoint\" #>  #> $coordinates #> $coordinates[[1]] #> $coordinates[[1]][[1]] #> [1] 100 #>  #> $coordinates[[1]][[2]] #> [1] 0 #>  #>  #> $coordinates[[2]] #> $coordinates[[2]][[1]] #> [1] 101 #>  #> $coordinates[[2]][[2]] #> [1] 1 #>  #>  #>  unlink(f)  # add to a data.frame library('tibble') tibble(a = 1:5, b = list(y)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <gemltpnt [1]> #> 2     2 <gemltpnt [1]> #> 3     3 <gemltpnt [1]> #> 4     4 <gemltpnt [1]> #> 5     5 <gemltpnt [1]>  # as.geojson coercion as.geojson(x) #> <geojson>  #>   type:  MultiPoint  #>   points (n): 2  #>   coordinates: [[100,0],[101,1]]"},{"path":"https://docs.ropensci.org/geojson/reference/multipolygon.html","id":null,"dir":"Reference","previous_headings":"","what":"multipolygon class — multipolygon","title":"multipolygon class — multipolygon","text":"multipolygon class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/multipolygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multipolygon class — multipolygon","text":"","code":"multipolygon(x)"},{"path":"https://docs.ropensci.org/geojson/reference/multipolygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multipolygon class — multipolygon","text":"x input","code":""},{"path":"https://docs.ropensci.org/geojson/reference/multipolygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multipolygon class — multipolygon","text":"","code":"x <- '{ \"type\": \"MultiPolygon\", \"coordinates\": [   [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],   [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],   [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]   ] }' (y <- multipolygon(x)) #> <MultiPolygon>  #>   no. polygons:  2  #>   coordinates:  [[[[102,2],[103,2],[103,3],[102,3],[102,2]]],[[[100,0],[101,0],[101,1] ...  geo_type(y) #> [1] \"MultiPolygon\" geo_pretty(y) #> { #>     \"type\": \"MultiPolygon\", #>     \"coordinates\": [ #>         [ #>             [ #>                 [ #>                     102.0, #>                     2.0 #>                 ], #>                 [ #>                     103.0, #>                     2.0 #>                 ], #>                 [ #>                     103.0, #>                     3.0 #>                 ], #>                 [ #>                     102.0, #>                     3.0 #>                 ], #>                 [ #>                     102.0, #>                     2.0 #>                 ] #>             ] #>         ], #>         [ #>             [ #>                 [ #>                     100.0, #>                     0.0 #>                 ], #>                 [ #>                     101.0, #>                     0.0 #>                 ], #>                 [ #>                     101.0, #>                     1.0 #>                 ], #>                 [ #>                     100.0, #>                     1.0 #>                 ], #>                 [ #>                     100.0, #>                     0.0 #>                 ] #>             ], #>             [ #>                 [ #>                     100.2, #>                     0.2 #>                 ], #>                 [ #>                     100.8, #>                     0.2 #>                 ], #>                 [ #>                     100.8, #>                     0.8 #>                 ], #>                 [ #>                     100.2, #>                     0.8 #>                 ], #>                 [ #>                     100.2, #>                     0.2 #>                 ] #>             ] #>         ] #>     ] #> } #>   geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"MultiPolygon\" #>  #> $coordinates #> $coordinates[[1]] #> $coordinates[[1]][[1]] #> $coordinates[[1]][[1]][[1]] #> $coordinates[[1]][[1]][[1]][[1]] #> [1] 102 #>  #> $coordinates[[1]][[1]][[1]][[2]] #> [1] 2 #>  #>  #> $coordinates[[1]][[1]][[2]] #> $coordinates[[1]][[1]][[2]][[1]] #> [1] 103 #>  #> $coordinates[[1]][[1]][[2]][[2]] #> [1] 2 #>  #>  #> $coordinates[[1]][[1]][[3]] #> $coordinates[[1]][[1]][[3]][[1]] #> [1] 103 #>  #> $coordinates[[1]][[1]][[3]][[2]] #> [1] 3 #>  #>  #> $coordinates[[1]][[1]][[4]] #> $coordinates[[1]][[1]][[4]][[1]] #> [1] 102 #>  #> $coordinates[[1]][[1]][[4]][[2]] #> [1] 3 #>  #>  #> $coordinates[[1]][[1]][[5]] #> $coordinates[[1]][[1]][[5]][[1]] #> [1] 102 #>  #> $coordinates[[1]][[1]][[5]][[2]] #> [1] 2 #>  #>  #>  #>  #> $coordinates[[2]] #> $coordinates[[2]][[1]] #> $coordinates[[2]][[1]][[1]] #> $coordinates[[2]][[1]][[1]][[1]] #> [1] 100 #>  #> $coordinates[[2]][[1]][[1]][[2]] #> [1] 0 #>  #>  #> $coordinates[[2]][[1]][[2]] #> $coordinates[[2]][[1]][[2]][[1]] #> [1] 101 #>  #> $coordinates[[2]][[1]][[2]][[2]] #> [1] 0 #>  #>  #> $coordinates[[2]][[1]][[3]] #> $coordinates[[2]][[1]][[3]][[1]] #> [1] 101 #>  #> $coordinates[[2]][[1]][[3]][[2]] #> [1] 1 #>  #>  #> $coordinates[[2]][[1]][[4]] #> $coordinates[[2]][[1]][[4]][[1]] #> [1] 100 #>  #> $coordinates[[2]][[1]][[4]][[2]] #> [1] 1 #>  #>  #> $coordinates[[2]][[1]][[5]] #> $coordinates[[2]][[1]][[5]][[1]] #> [1] 100 #>  #> $coordinates[[2]][[1]][[5]][[2]] #> [1] 0 #>  #>  #>  #> $coordinates[[2]][[2]] #> $coordinates[[2]][[2]][[1]] #> $coordinates[[2]][[2]][[1]][[1]] #> [1] 100.2 #>  #> $coordinates[[2]][[2]][[1]][[2]] #> [1] 0.2 #>  #>  #> $coordinates[[2]][[2]][[2]] #> $coordinates[[2]][[2]][[2]][[1]] #> [1] 100.8 #>  #> $coordinates[[2]][[2]][[2]][[2]] #> [1] 0.2 #>  #>  #> $coordinates[[2]][[2]][[3]] #> $coordinates[[2]][[2]][[3]][[1]] #> [1] 100.8 #>  #> $coordinates[[2]][[2]][[3]][[2]] #> [1] 0.8 #>  #>  #> $coordinates[[2]][[2]][[4]] #> $coordinates[[2]][[2]][[4]][[1]] #> [1] 100.2 #>  #> $coordinates[[2]][[2]][[4]][[2]] #> [1] 0.8 #>  #>  #> $coordinates[[2]][[2]][[5]] #> $coordinates[[2]][[2]][[5]][[1]] #> [1] 100.2 #>  #> $coordinates[[2]][[2]][[5]][[2]] #> [1] 0.2 #>  #>  #>  #>  #>  unlink(f)  # add to a data.frame library('tibble') tibble(a = 1:5, b = list(y)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <gmltplyg [1]> #> 2     2 <gmltplyg [1]> #> 3     3 <gmltplyg [1]> #> 4     4 <gmltplyg [1]> #> 5     5 <gmltplyg [1]>"},{"path":"https://docs.ropensci.org/geojson/reference/ndgeo.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write newline-delimited GeoJSON (GeoJSON text sequences) — ndgeo","title":"Read and write newline-delimited GeoJSON (GeoJSON text sequences) — ndgeo","text":"various flavors newline-delimited GeoJSON, aim handle . See Details .","code":""},{"path":"https://docs.ropensci.org/geojson/reference/ndgeo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write newline-delimited GeoJSON (GeoJSON text sequences) — ndgeo","text":"","code":"ndgeo_write(x, file, sep = \"\\n\")  # S3 method for default ndgeo_write(x, file, sep = \"\\n\")  # S3 method for geofeaturecollection ndgeo_write(x, file, sep = \"\\n\")  # S3 method for geofeature ndgeo_write(x, file, sep = \"\\n\")  ndgeo_read(txt, pagesize = 500, verbose = TRUE)"},{"path":"https://docs.ropensci.org/geojson/reference/ndgeo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write newline-delimited GeoJSON (GeoJSON text sequences) — ndgeo","text":"x input, object class geojson file (character) file. connection. required. sep (character) character separator use writeLines() txt text, file, url. required. pagesize (integer) number lines read/write /connection per iteration verbose (logical) print messages. default: TRUE","code":""},{"path":"https://docs.ropensci.org/geojson/reference/ndgeo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write newline-delimited GeoJSON (GeoJSON text sequences) — ndgeo","text":"geojson class object","code":""},{"path":"https://docs.ropensci.org/geojson/reference/ndgeo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and write newline-delimited GeoJSON (GeoJSON text sequences) — ndgeo","text":"ndgeo_write: writes geojson package types newline-delimited GeoJSON file ndgeo_read: reads newline-delimited GeoJSON string, file, URL appropriate geojson type alternative ndgeo_read, can simply use jsonlite::stream_in() convert newline-delimited GeoJSON data.frame","code":""},{"path":"https://docs.ropensci.org/geojson/reference/ndgeo.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read and write newline-delimited GeoJSON (GeoJSON text sequences) — ndgeo","text":"IMPORTANT: ngeo_read now handles lines geojson file either features geometry objects (e.g., point, multipoint, polygon, multipolygon, linestring, multilinestring)","code":""},{"path":"https://docs.ropensci.org/geojson/reference/ndgeo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read and write newline-delimited GeoJSON (GeoJSON text sequences) — ndgeo","text":"Newline-delimited JSON flavors. difference ndjson http://ndjson.org/ JSON Lines https://jsonlines.org/ can tell former requires UTF-8 encoding, latter . GeoJSON text sequences specification found https://datatracker.ietf.org/doc/html/rfc8142. spec states : GeoJSON text sequence number GeoJSON RFC7946 texts line encoded UTF-8 RFC3629 line preceded one ASCII RFC20 record separator (RS; \"0x1e\") character line followed line feed (LF) JSON text MUST contain single GeoJSON object defined RFC7946 See also GeoJSON specification https://datatracker.ietf.org/doc/html/rfc7946","code":""},{"path":"https://docs.ropensci.org/geojson/reference/ndgeo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write newline-delimited GeoJSON (GeoJSON text sequences) — ndgeo","text":"","code":"# featurecollection ## write file <- system.file(\"examples\", 'featurecollection2.geojson',   package = \"geojson\") str <- paste0(readLines(file), collapse = \" \") (x <- featurecollection(str)) #> <FeatureCollection>  #>   type:  FeatureCollection  #>   no. features:  3  #>   features (1st 5):  Point, Point, Point  outfile <- tempfile(fileext = \".geojson\") ndgeo_write(x, outfile) readLines(outfile) #> [1] \"{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":0,\\\"properties\\\":{\\\"NOME\\\":\\\"Sec de segunrança\\\",\\\"URL\\\":\\\"http://www.theatermania.com/new-york/theaters/45th-street-theatre_2278/\\\",\\\"ADDRESS1\\\":\\\"354 West 45th Street\\\",\\\"CIDADE\\\":\\\"Goiânia\\\",\\\"CEP\\\":74250010},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-49.25624,-16.689612]}}\"                 #> [2] \"{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"properties\\\":{\\\"NOME\\\":\\\"Teste\\\",\\\"URL\\\":\\\"http://www.bestofoffbroadway.com/theaters/47streettheatre.html\\\",\\\"ADDRESS1\\\":\\\"304 West 47th Street\\\",\\\"CIDADE\\\":\\\"New York\\\",\\\"ZIP\\\":74250010},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-49.27624,-16.655612]}}\"                                     #> [3] \"{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"properties\\\":{\\\"NOME\\\":\\\"Delacorte Theater\\\",\\\"URL\\\":\\\"http://www.centralpark.com/pages/attractions/delacorte-theatre.html\\\",\\\"ADDRESS1\\\":\\\"Central Park - Mid-Park at 80th Street\\\",\\\"CIDADE\\\":\\\"New York\\\",\\\"ZIP\\\":74250010},\\\"geometry\\\":{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-49.277263,-16.679057]}}\" jsonlite::stream_in(file(outfile)) #> opening file input connection. #>   Found 3 records...  Imported 3 records. Simplifying... #> closing file input connection. #>      type id   properties.NOME #> 1 Feature  0 Sec de segunrança #> 2 Feature  1             Teste #> 3 Feature  3 Delacorte Theater #>                                                            properties.URL #> 1 http://www.theatermania.com/new-york/theaters/45th-street-theatre_2278/ #> 2          http://www.bestofoffbroadway.com/theaters/47streettheatre.html #> 3     http://www.centralpark.com/pages/attractions/delacorte-theatre.html #>                      properties.ADDRESS1 properties.CIDADE properties.CEP #> 1                   354 West 45th Street           Goiânia       74250010 #> 2                   304 West 47th Street          New York             NA #> 3 Central Park - Mid-Park at 80th Street          New York             NA #>   properties.ZIP geometry.type geometry.coordinates #> 1             NA         Point -49.25624, -16.68961 #> 2       74250010         Point -49.27624, -16.65561 #> 3       74250010         Point -49.27726, -16.67906 ## read ndgeo_read(outfile) #> opening file input connection. #>   Found 3 records... #> closing file input connection. #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 3  #>   features (geometry / length) [first 5]: #>     Point / 2 #>     Point / 2 #>     Point / 2  unlink(outfile)  # read from an existing file ## GeoJSON objects all of same type: Feature file <- system.file(\"examples\", 'ndgeojson1.json', package = \"geojson\") ndgeo_read(file) #> opening file input connection. #>   Found 3 records... #> closing file input connection. #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 3  #>   features (geometry / length) [first 5]: #>     Point / 2 #>     Point / 2 #>     Point / 2  ## GeoJSON objects all of same type: Point file <- system.file(\"examples\", 'ndgeojson2.json', package = \"geojson\") ndgeo_read(file) #> opening file input connection. #>   Found 3 records... #> closing file input connection. #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 3  #>   features (geometry / length) [first 5]: #>     Point / 2 #>     Point / 2 #>     Point / 2  ## GeoJSON objects of mixed type: Point, and Feature file <- system.file(\"examples\", 'ndgeojson3.json', package = \"geojson\") ndgeo_read(file) #> opening file input connection. #>   Found 3 records... #> closing file input connection. #> <geojson>  #>   type:  FeatureCollection  #>   features (n): 3  #>   features (geometry / length) [first 5]: #>     Point / 2 #>     Point / 2 #>     Point / 2   if (FALSE) { # read from a file url <- \"https://raw.githubusercontent.com/ropensci/geojson/main/inst/examples/ndgeojson1.json\" f <- tempfile(fileext = \".geojsonl\") download.file(url, f) x <- ndgeo_read(f) x unlink(f)  # read from a URL url <- \"https://raw.githubusercontent.com/ropensci/geojson/main/inst/examples/ndgeojson1.json\" x <- ndgeo_read(url) x  # geojson text sequences from file file <- system.file(\"examples\", 'featurecollection2.geojson',   package = \"geojson\") str <- paste0(readLines(file), collapse = \" \") x <- featurecollection(str) outfile <- tempfile(fileext = \".geojson\") ndgeo_write(x, outfile, sep = \"\\u001e\\n\") con <- file(outfile) readLines(con) close(con) ndgeo_read(outfile) unlink(outfile) }"},{"path":"https://docs.ropensci.org/geojson/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"Pipe operator","code":""},{"path":"https://docs.ropensci.org/geojson/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/geojson/reference/point.html","id":null,"dir":"Reference","previous_headings":"","what":"point class — point","title":"point class — point","text":"point class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"point class — point","text":"","code":"point(x)"},{"path":"https://docs.ropensci.org/geojson/reference/point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"point class — point","text":"x input","code":""},{"path":"https://docs.ropensci.org/geojson/reference/point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"point class — point","text":"","code":"x <- '{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }' (y <- point(x)) #> <Point>  #>   coordinates:  [100,0]  geo_type(y) #> [1] \"Point\" geo_pretty(y) #> { #>     \"type\": \"Point\", #>     \"coordinates\": [ #>         100.0, #>         0.0 #>     ] #> } #>   geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"Point\" #>  #> $coordinates #> $coordinates[[1]] #> [1] 100 #>  #> $coordinates[[2]] #> [1] 0 #>  #>  unlink(f)  # add to a data.frame library('tibble') tibble(a = 1:5, b = list(y)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <geopoint [1]> #> 2     2 <geopoint [1]> #> 3     3 <geopoint [1]> #> 4     4 <geopoint [1]> #> 5     5 <geopoint [1]>  # as.geojson coercion as.geojson(x) #> <geojson>  #>   type:  Point  #>   points (n): 2  #>   coordinates: [100,0]"},{"path":"https://docs.ropensci.org/geojson/reference/polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"polygon class — polygon","title":"polygon class — polygon","text":"polygon class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"polygon class — polygon","text":"","code":"polygon(x)"},{"path":"https://docs.ropensci.org/geojson/reference/polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"polygon class — polygon","text":"x input","code":""},{"path":"https://docs.ropensci.org/geojson/reference/polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"polygon class — polygon","text":"","code":"x <- '{ \"type\": \"Polygon\", \"coordinates\": [   [ [100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0], [100.0, 0.0] ]   ] }' (y <- polygon(x)) #> <Polygon>  #>   no. lines:  1  #>   no. holes:  0  #>   no. nodes / line:  5  #>   coordinates:  [[[100,0],[100,1],[101,1],[101,0],[100,0]]]  y[1] #> [1] \"{ \\\"type\\\": \\\"Polygon\\\",\\n\\\"coordinates\\\": [\\n  [ [100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0], [100.0, 0.0] ]\\n  ]\\n}\" geo_type(y) #> [1] \"Polygon\" geo_pretty(y) #> { #>     \"type\": \"Polygon\", #>     \"coordinates\": [ #>         [ #>             [ #>                 100.0, #>                 0.0 #>             ], #>             [ #>                 100.0, #>                 1.0 #>             ], #>             [ #>                 101.0, #>                 1.0 #>             ], #>             [ #>                 101.0, #>                 0.0 #>             ], #>             [ #>                 100.0, #>                 0.0 #>             ] #>         ] #>     ] #> } #>   geo_write(y, f <- tempfile(fileext = \".geojson\")) jsonlite::fromJSON(f, FALSE) #> $type #> [1] \"Polygon\" #>  #> $coordinates #> $coordinates[[1]] #> $coordinates[[1]][[1]] #> $coordinates[[1]][[1]][[1]] #> [1] 100 #>  #> $coordinates[[1]][[1]][[2]] #> [1] 0 #>  #>  #> $coordinates[[1]][[2]] #> $coordinates[[1]][[2]][[1]] #> [1] 100 #>  #> $coordinates[[1]][[2]][[2]] #> [1] 1 #>  #>  #> $coordinates[[1]][[3]] #> $coordinates[[1]][[3]][[1]] #> [1] 101 #>  #> $coordinates[[1]][[3]][[2]] #> [1] 1 #>  #>  #> $coordinates[[1]][[4]] #> $coordinates[[1]][[4]][[1]] #> [1] 101 #>  #> $coordinates[[1]][[4]][[2]] #> [1] 0 #>  #>  #> $coordinates[[1]][[5]] #> $coordinates[[1]][[5]][[1]] #> [1] 100 #>  #> $coordinates[[1]][[5]][[2]] #> [1] 0 #>  #>  #>  #>  unlink(f)  x <- '{ \"type\": \"Polygon\", \"coordinates\": [   [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],   [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]   ] }' (y <- polygon(x)) #> <Polygon>  #>   no. lines:  2  #>   no. holes:  1  #>   no. nodes / line:  5, 5  #>   coordinates:  [[[100,0],[101,0],[101,1],[100,1],[100,0]],[[100.2,0.2],[100.8,0.2],[1 ...  y[1] #> [1] \"{ \\\"type\\\": \\\"Polygon\\\",\\n\\\"coordinates\\\": [\\n  [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],\\n  [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]\\n  ]\\n}\" geo_type(y) #> [1] \"Polygon\" geo_pretty(y) #> { #>     \"type\": \"Polygon\", #>     \"coordinates\": [ #>         [ #>             [ #>                 100.0, #>                 0.0 #>             ], #>             [ #>                 101.0, #>                 0.0 #>             ], #>             [ #>                 101.0, #>                 1.0 #>             ], #>             [ #>                 100.0, #>                 1.0 #>             ], #>             [ #>                 100.0, #>                 0.0 #>             ] #>         ], #>         [ #>             [ #>                 100.2, #>                 0.2 #>             ], #>             [ #>                 100.8, #>                 0.2 #>             ], #>             [ #>                 100.8, #>                 0.8 #>             ], #>             [ #>                 100.2, #>                 0.8 #>             ], #>             [ #>                 100.2, #>                 0.2 #>             ] #>         ] #>     ] #> } #>    # add to a data.frame library('tibble') tibble(a = 1:5, b = list(y)) #> # A tibble: 5 × 2 #>       a b              #>   <int> <list>         #> 1     1 <geoplygn [1]> #> 2     2 <geoplygn [1]> #> 3     3 <geoplygn [1]> #> 4     4 <geoplygn [1]> #> 5     5 <geoplygn [1]>"},{"path":"https://docs.ropensci.org/geojson/reference/properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or get properties — properties","title":"Add or get properties — properties","text":"Add get properties","code":""},{"path":"https://docs.ropensci.org/geojson/reference/properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or get properties — properties","text":"","code":"properties_add(x, ..., .list = NULL)  properties_get(x, property)"},{"path":"https://docs.ropensci.org/geojson/reference/properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or get properties — properties","text":"x object class geojson ... Properties added, supports NSE well SE .list named list properties add. must named property (character) property name","code":""},{"path":"https://docs.ropensci.org/geojson/reference/properties.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add or get properties — properties","text":"https://geojson.org/geojson-spec.html","code":""},{"path":"https://docs.ropensci.org/geojson/reference/properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add or get properties — properties","text":"","code":"# add properties x <- '{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]}' (y <- linestring(x)) #> <LineString>  #>   coordinates:  [[100,0],[101,1]]  y %>% feature() %>% properties_add(population = 1000) #> <Feature>  #>   type:  LineString  #>   coordinates:  [[100,0],[101,1]]   ## add with a named list already created x <- '{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]}' (y <- linestring(x)) #> <LineString>  #>   coordinates:  [[100,0],[101,1]]  props <- list(population = 1000, temperature = 89, size = 5) y %>% feature() %>% properties_add(.list = props) #> <Feature>  #>   type:  LineString  #>   coordinates:  [[100,0],[101,1]]   ## combination of NSE and .list x <- '{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]}' (y <- linestring(x)) #> <LineString>  #>   coordinates:  [[100,0],[101,1]]  props <- list(population = 1000, temperature = 89, size = 5) y %>% feature() %>% properties_add(stuff = 4, .list = props) #> <Feature>  #>   type:  LineString  #>   coordinates:  [[100,0],[101,1]]   # features to featurecollection x <- '{ \"type\": \"Point\", \"coordinates\": [100.0, 0.0] }' point(x) %>%   feature() %>%   featurecollection() %>%   properties_add(population = 10) #> <FeatureCollection>  #>   type:  FeatureCollection  #>   no. features:  1  #>   features (1st 5):  Point   # get property x <- '{ \"type\": \"LineString\", \"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]}' (y <- linestring(x)) #> <LineString>  #>   coordinates:  [[100,0],[101,1]]  x <- y %>% feature() %>% properties_add(population = 1000) properties_get(x, property = 'population') #> 1000"},{"path":"https://docs.ropensci.org/geojson/reference/to_geojson.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GeoJSON character string to approriate GeoJSON class — to_geojson","title":"Convert GeoJSON character string to approriate GeoJSON class — to_geojson","text":"Automatically detects adds class","code":""},{"path":"https://docs.ropensci.org/geojson/reference/to_geojson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GeoJSON character string to approriate GeoJSON class — to_geojson","text":"","code":"to_geojson(x)"},{"path":"https://docs.ropensci.org/geojson/reference/to_geojson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GeoJSON character string to approriate GeoJSON class — to_geojson","text":"x GeoJSON character string","code":""},{"path":"https://docs.ropensci.org/geojson/reference/to_geojson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GeoJSON character string to approriate GeoJSON class — to_geojson","text":"","code":"mp <- '{\"type\":\"MultiPoint\",\"coordinates\":[[100,0],[101,1]]}' to_geojson(mp) #> <MultiPoint>  #>   coordinates:  [[100,0],[101,1]]   ft <- '{\"type\":\"Feature\",\"properties\":{\"a\":\"b\"}, \"geometry\":{\"type\": \"MultiPoint\",\"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]}}' to_geojson(mp) #> <MultiPoint>  #>   coordinates:  [[100,0],[101,1]]   fc <- '{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{\"a\":\"b\"}, \"geometry\":{\"type\": \"MultiPoint\",\"coordinates\": [ [100.0, 0.0], [101.0, 1.0] ]}}]}' to_geojson(fc) #> <FeatureCollection>  #>   type:  FeatureCollection  #>   no. features:  1  #>   features (1st 5):  MultiPoint"},{"path":[]},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"geojson-035","dir":"Changelog","previous_headings":"","what":"geojson 0.3.5","title":"geojson 0.3.5","text":"CRAN release: 2023-08-08 Now working main branch, removed references old trunk branch. Removed geojsonlint linting facilities code. linting_opts() deprecated. New maintainer Michael Sumner.","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"geojson-034","dir":"Changelog","previous_headings":"","what":"geojson 0.3.4","title":"geojson 0.3.4","text":"CRAN release: 2020-06-23","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"minor-improvements-0-3-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"geojson 0.3.4","text":"fixes test suite: skip package check warnings geojsonlint available, skip tests use geojsonlint (#40)","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"geojson-032","dir":"Changelog","previous_headings":"","what":"geojson 0.3.2","title":"geojson 0.3.2","text":"CRAN release: 2019-01-31","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"geojson 0.3.2","text":"fix typo within ndgeo_read() (#39)","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"geojson-030","dir":"Changelog","previous_headings":"","what":"geojson 0.3.0","title":"geojson 0.3.0","text":"CRAN release: 2019-01-18","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"geojson 0.3.0","text":"package gains two new functions working newline-delimited GeoJSON: ndgeo_write() ndgeo_read(). ndgeo_write() leverages writeLines() write disk, ndgeo_read() leverages modified version jsonlite::stream_in() stream line line. ndgeo_write() works geojson package classes geofeature geofeaturecollection (#31) (#38) .geojson() generic gains new method sf, see showMethods('.geojson') see methods available. method available sf installed (#30) thanks @cpsievert","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"geojson 0.3.0","text":"add examples using geobuf capabilities README (#35) .geojson() now throw warning message jsonlite json invalid help user sort ’s wrong JSON input valid JSON (#32) speed internal method asc() use stringi::stri_replace_all() installed, fall back using gsub() replace usage tibble::data_frame() tibble::tibble() throughout package","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"geojson 0.3.0","text":"change print.geojson() calculate print bounding box large geojson can take long time. Also changed precomputing everything printing geojson objects fast (#36) fix geo_bbox() handle negative coordinates (#33) (#34) thanks much @aoles","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"geojson-020","dir":"Changelog","previous_headings":"","what":"geojson 0.2.0","title":"geojson 0.2.0","text":"CRAN release: 2017-11-08","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"geojson 0.2.0","text":"gains new function to_geojson convert GeoJSON character string approriate GeoJSON class detecting GeoJSON type automatically. makes tasks easier (#28) (#29)","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"geojson 0.2.0","text":"Improve .geojson function print summary GeoJSON types well, just GeometryCollection FeatureCollection (#27)","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"geojson-014","dir":"Changelog","previous_headings":"","what":"geojson 0.1.4","title":"geojson 0.1.4","text":"CRAN release: 2017-10-24","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"minor-improvements-0-1-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"geojson 0.1.4","text":"Changed properties_add() give back class object given function. addition, correctly adds properties FeatureCollection objects well. (#22) Added properties fxns tests","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"bug-fixes-0-1-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"geojson 0.1.4","text":"Fixed bug print.featurecollection() calculating printing number features correctly (#24)","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"geojson-012","dir":"Changelog","previous_headings":"","what":"geojson 0.1.2","title":"geojson 0.1.2","text":"CRAN release: 2017-02-28","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"geojson 0.1.2","text":"Fixed bug internal function checked existence Suggested package (#17)","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"geojson-010","dir":"Changelog","previous_headings":"","what":"geojson 0.1.0","title":"geojson 0.1.0","text":"CRAN release: 2016-11-16","code":""},{"path":"https://docs.ropensci.org/geojson/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"geojson 0.1.0","text":"Released CRAN.","code":""}]
